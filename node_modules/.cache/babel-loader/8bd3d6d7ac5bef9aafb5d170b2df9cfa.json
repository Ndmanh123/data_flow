{"ast":null,"code":"export default {\n  name: 'DataFlow',\n  props: {\n    instanceKey: {\n      defaul: ''\n    },\n    action: {\n      defaul: 'view'\n    },\n    width: {\n      type: [String, Number],\n      default: 800\n    },\n    height: {\n      type: [String, Number],\n      default: 250\n    },\n    gridSize: {\n      type: Number,\n      default: 1\n    },\n    drawGrid: {\n      type: [Object, Boolean],\n      default: false\n    },\n    background: {\n      type: [Object, Boolean],\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    highLightLinks: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    },\n    nodes: {\n      type: [Object, Boolean],\n      default: false\n    },\n    links: {\n      type: [Object, Boolean],\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      stencilShapes: [],\n      selectionNode: null,\n      selectedElement: null,\n      selectedLink: null,\n      //check ctrl shift\n      ctrlDown: false,\n      shiftDown: false,\n      color: \"rgb(255 136 0)\",\n      arr: ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg']\n    };\n  },\n\n  created() {\n    this.graph = new joint.dia.Graph();\n  },\n\n  mounted() {\n    this.initPaper();\n  },\n\n  methods: {\n    initPaper() {\n      let graph = this.graph;\n      this.commandManager = new joint.dia.CommandManager({\n        graph: graph,\n        cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\n          return !options.ignoreCommandManager;\n        }\n      });\n      this.paper = new joint.dia.Paper({\n        width: 1000,\n        height: 800,\n        model: this.graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        interactive: {\n          vertexAdd: false\n        },\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n          radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: {\n          name: 'manhattan',\n          args: {\n            padding: 10\n          }\n        },\n        defaultConnector: {\n          name: 'rounded'\n        },\n        validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n          // Prevent linking from input ports.\n          if (magnetS && magnetS.getAttribute('port-group') === 'in') return false; // Prevent linking from output ports to input ports within one element.\n\n          if (cellViewS === cellViewT) return false; // Prevent linking to input ports.\n\n          return magnetT && magnetT.getAttribute('port-group') === 'in' || cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer';\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n          linkMove: true,\n          labelMove: true,\n          arrowheadMove: true,\n          vertexMove: false,\n          vertexAdd: false,\n          vertexRemove: false,\n          useLinkTools: false\n        },\n        defaultLink: function () {\n          return new joint.shapes.standard.Link({\n            attrs: {\n              z: 1,\n              line: {\n                connection: true,\n                stroke: '#707070',\n                strokeLinejoin: 'round'\n              },\n              wrapper: {\n                connection: true,\n                strokeWidth: 10,\n                strokeLinejoin: 'round'\n              }\n            },\n            markup: [{\n              tagName: 'path',\n              selector: 'wrapper',\n              attributes: {\n                'fill': 'none',\n                'stroke': 'transparent'\n              }\n            }, {\n              tagName: 'path',\n              selector: 'line',\n              attributes: {\n                'fill': 'none'\n              }\n            }]\n          });\n        }\n      });\n      var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n      this.toolsView = new joint.dia.ToolsView({\n        tools: [// verticesTool, segmentsTool,\n        // sourceArrowheadTool, \n        targetArrowheadTool // sourceAnchorTool, targetAnchorTool,\n        // boundaryTool, removeButton\n        ]\n      });\n      var linkView = link.findView(this.paper);\n      linkView.addTools(this.toolsView);\n      this.paperScroller = new joint.ui.PaperScroller({\n        paper: this.paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: 'grab'\n      });\n      this.selection = new joint.ui.Selection({\n        theme: 'material',\n        paper: this.paper,\n        useModelGeometry: true,\n        allowTranslate: true\n      });\n      this.snaplines = new joint.ui.Snaplines({\n        paper: this.paper\n      });\n      this.snaplines.startListening(); //render paper\n\n      document.getElementById('paper').appendChild(this.paperScroller.render().el); //render paperScroller\n\n      this.highlighters = joint.highlighters;\n      this.paperScroller.$el.css({\n        width: 900,\n        height: 600\n      }).appendTo('#paper');\n      this.paperScroller.center();\n      this.addStencil();\n      this.handlePaperEvents();\n      this.selection.collection.reset(graph.getElements());\n    },\n\n    jsUcfirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n\n    stencilRenderHandler(positionX, positionY, arr, elNoInPorts = \"\", spaceBetweenElToX = 0, spaceBetweenElToY = 0) {\n      var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2,\n            rx: 5,\n            ry: 5\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }, {\n            id: 'in-port',\n            group: 'in'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            },\n            in: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'left'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'passive',\n                  fill: '#FFFFFF',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      });\n      var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2\n          },\n          line: {\n            connection: true,\n            stroke: '#333333',\n            strokeWidth: 2,\n            strokeLinejoin: 'round',\n            targetMarker: {\n              'type': 'path',\n              'd': 'M 10 -5 0 0 10 5 z'\n            }\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      });\n      this.arr.forEach(element => {\n        //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n        let elementName = this.jsUcfirst(element);\n\n        if (elementName === this.jsUcfirst(elNoInPorts)) {\n          element = new customElNoInPorts();\n        } else {\n          element = new customEl();\n        }\n\n        element.prop('attrs/image/xlinkHref', require(`../assets/${elementName}.svg`));\n        this.stencilShapes.push(element.position(positionX, positionY));\n\n        if (spaceBetweenElToX > 0) {\n          positionX += element.attributes.size.width + spaceBetweenElToX;\n        }\n\n        if (spaceBetweenElToY > 0) {\n          positionY += element.attributes.size.height + spaceBetweenElToY;\n        }\n      });\n    },\n\n    addStencil() {\n      let graph = this.graph;\n      let paper = this.paper;\n      var stencil = new joint.ui.Stencil({\n        paper: this.paperScroller,\n        width: 900,\n        height: 60,\n        dropAnimation: {\n          duration: 200,\n          easing: 'swing'\n        }\n      });\n      this.stencilRenderHandler(20, 20, this.arr, \"load\", 16);\n      document.getElementById('stencil').appendChild(stencil.render().el);\n      stencil.load(this.stencilShapes);\n    },\n\n    getElementPredecessorLinks(el) {\n      let graph = this.graph;\n      return graph.getSubgraph([el, ...graph.getPredecessors(el)]).filter(cell => cell.isLink());\n    },\n\n    highlightCell(cell) {\n      let self = this;\n\n      if (cell) {\n        self.highlighters.addClass.add(cell.findView(self.paper), cell.isElement() ? \"body\" : \"line\", \"selection\", {\n          className: \"selection\"\n        });\n      } else {\n        return;\n      }\n    },\n\n    unhighlightCell(cell) {\n      let self = this;\n\n      if (cell) {\n        self.highlighters.addClass.remove(cell.findView(self.paper), \"selection\");\n      } else {\n        return;\n      }\n    },\n\n    selectElement(el) {\n      let self = this;\n      let graph = self.graph;\n      if (self.selectionNode === el) return;\n\n      if (self.selectionNode) {\n        self.unhighlightCell(self.selectionNode);\n        graph.getLinks().forEach(link => self.unhighlightCell(link));\n      }\n\n      if (el) {\n        self.highlightCell(el);\n        self.getElementPredecessorLinks(el).forEach(link => {\n          self.highlightCell(link);\n          link.toFront({\n            ignoreCommandManager: true\n          });\n        });\n        self.selectionNode = el;\n      } else {\n        self.selectionNode = null;\n      }\n    },\n\n    addHalo(cellView) {\n      var halo = new joint.ui.Halo({\n        cellView: cellView,\n        type: 'toolbar',\n        boxContent: false // bang phia duoi cell cho biet tọa độ height width và angle\n\n      });\n      halo.removeHandle('resize');\n      halo.removeHandle('rotate');\n      halo.removeHandle('direction');\n      halo.render();\n    },\n\n    handlePaperEvents() {\n      let self = this;\n      let paper = self.paper;\n      let graph = self.graph; //nếu bấm thì =true\n\n      document.addEventListener('keydown', function (evt) {\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n          self.ctrlDown = true;\n        }\n\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n          self.shiftDown = true;\n        }\n      }); //nếu thả nút thì =false\n\n      document.addEventListener('keyup', function (evt) {\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n          self.shiftDown = false;\n        }\n\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n          self.ctrlDown = false;\n        }\n      });\n      paper.on('cell:pointerup', function (cellView) {\n        self.addHalo(cellView);\n\n        if (cellView.model.attributes['type'] === 'standard.Link') {\n          self.$emit('select-link', {\n            id: cellView.model.id\n          });\n        } else {\n          self.$emit('select-cell', {\n            id: cellView.model.id\n          });\n        }\n\n        self.selectedElement = cellView.model;\n        self.selectedElement.toFront({\n          ignoreCommandManager: true\n        }); // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\n        // console.log(graph.getLinks())\n      });\n      paper.on({\n        //xử lý khi các sự kiện \n        \"cell:mouseenter\": cellView => {\n          cellView.model.toFront({\n            ignoreCommandManager: true\n          });\n        },\n        \"cell:mouseleave\": cellView => {\n          cellView.model.toBack({\n            ignoreCommandManager: true\n          });\n\n          if (self.selectionNode) {\n            self.getElementPredecessorLinks(self.selectionNode).forEach(link => {\n              link.toFront({\n                ignoreCommandManager: true\n              });\n            });\n          }\n        },\n        \"element:pointerclick\": cellView => {\n          //chỉ đổi màu khi ko bấm ctrl\n          if (self.ctrlDown === false) {\n            self.selectElement(cellView.model);\n          }\n        },\n        \"link:pointerclick\": cellView => {\n          self.selectElement(cellView.model); //chon vao link thi mo cho phep doi node\n\n          cellView.addTools(this.toolsView);\n        },\n        //chuyển lại màu cũ khi bấm ra ngoài\n        \"blank:pointerclick\": () => {\n          self.selectElement(null);\n          paper.removeTools({\n            ignoreCommandManager: true\n          });\n        },\n        'element:pointerup': function (cellView, evt) {\n          console.log(evt);\n\n          if (evt.ctrlKey || evt.metaKey) {\n            console.log(self.selection);\n            self.selection.collection.add(cellView.model); //loop to all the element in selection and set it to front\n\n            self.selection.collection.models.forEach(element => {\n              element.toFront({\n                ignoreCommandManager: true\n              });\n            });\n          }\n        },\n        //chuyển màu khi bấm vào link và cho nó lên trc\n        'link:pointerup': function (cellView) {\n          self.selectedLink = cellView.model;\n          self.selectedLink.toFront({\n            ignoreCommandManager: true\n          });\n        },\n        // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n        'blank:pointerdown': function (evt, x, y) {\n          if (self.shiftDown === true) {\n            self.selectElement(null);\n            self.paperScroller.setCursor('crosshair');\n            self.selection.startSelecting(evt);\n          } else {\n            self.selection.collection.reset([]);\n            self.paperScroller.startPanning(evt, x, y);\n            paper.removeTools();\n            self.paperScroller.setCursor('grab');\n          }\n        }\n      }); //xóa el nếu chọn lại lần 2 khi bấm ctrl\n\n      self.selection.on('selection-box:pointerdown', function (cellView, evt) {\n        if (evt.ctrlKey || evt.metaKey) {\n          self.selection.collection.remove(cellView.model);\n        }\n      }); //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n\n      document.addEventListener('keydown', function (evt) {\n        self.clipboard = new joint.ui.Clipboard();\n\n        if (evt.code === \"NumpadAdd\" && self.shiftDown === true) {\n          // console.log(evt.code)\n          self.paperScroller.zoom(0.2, {\n            max: 4\n          });\n        }\n\n        if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n          self.paperScroller.zoom(-0.2, {\n            min: 0.2\n          }); // console.log(evt.code)\n        } //check+ A\n\n\n        if (evt.code === \"KeyA\" && self.ctrlDown === true) {\n          self.selection.collection.reset(graph.getElements());\n          evt.preventDefault();\n        } //check ctrl + Z\n\n\n        if (evt.code === \"KeyZ\" && self.ctrlDown === true) {\n          self.commandManager.undo(); // console.log(selectionNode)\n\n          self.unhighlightCell(self.selectionNode);\n          graph.getLinks().forEach(link => self.unhighlightCell(link)); // console.log(selectionNode)\n\n          self.selectionNode = null;\n        } //check ctrl + Y\n\n\n        if (evt.code === \"KeyY\" && self.ctrlDown === true) {\n          self.commandManager.redo();\n          self.selectElement(null);\n        } //check ctrl + V ,ctrl + C, ctrl+X\n\n\n        if (evt.code === \"KeyX\" && self.ctrlDown === true) {\n          self.clipboard.cutElements(self.selection.collection, paper.model);\n        }\n\n        if (evt.code === \"KeyC\" && self.ctrlDown === true) {\n          self.clipboard.copyElements(self.selection.collection, graph);\n        }\n\n        if (evt.code === \"KeyV\" && self.ctrlDown === true) {\n          var pastedCells = self.clipboard.pasteCells(graph, {\n            translate: {\n              dx: 40,\n              dy: 40\n            },\n            useLocalStorage: true\n          });\n\n          var elements = _.filter(pastedCells, function (cell) {\n            return cell.isElement();\n          }); // Make sure pasted elements get selected immediately. This makes the UX better as\n          // the user can immediately manipulate the pasted elements.\n\n\n          self.selection.collection.reset(elements);\n        }\n      });\n    },\n\n    getAllLinks() {\n      return this.graph.getLinks();\n    },\n\n    getAllNodes() {\n      return this.graph.getCells();\n    },\n\n    clearAll() {\n      return this.graph.clear();\n    },\n\n    getNodeAttr(id) {\n      let node = this.graph.getCell(id);\n\n      if (node) {\n        return node.attributes;\n      } else {\n        return {};\n      }\n    },\n\n    render() {\n      let nodeInfo = this.nodes;\n      let linkInfo = this.links;\n      let nodeType = nodeInfo.nodeType; //checknode\n\n      if (nodeType) {\n        let cell = new joint.shapes.nodeType({\n          position: nodeInfo.position,\n          id: nodeInfo.id\n        });\n        this.graph.addCell(cell);\n      } else {\n        console.error(\"Node type '\" + nodeType + \"' is not defined\");\n      }\n\n      if (linkInfo) {\n        let link = new joint.shapes.standard.Link();\n        link.source(linkInfo.source);\n        link.target(linkInfo.target);\n        link.addTo(this.graph);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","instanceKey","defaul","action","width","type","String","Number","default","height","gridSize","drawGrid","Object","Boolean","background","readonly","highLightLinks","Array","nodes","links","data","stencilShapes","selectionNode","selectedElement","selectedLink","ctrlDown","shiftDown","color","arr","created","graph","joint","dia","Graph","mounted","initPaper","methods","commandManager","CommandManager","cmdBeforeAdd","cmdName","cell","options","ignoreCommandManager","paper","Paper","model","async","sorting","APPROX","restrictTranslate","stopDelegation","interactive","vertexAdd","snapLinks","radius","linkPinning","multiLinks","defaultRouter","args","padding","defaultConnector","validateConnection","cellViewS","magnetS","cellViewT","magnetT","end","linkView","getAttribute","get","linkMove","labelMove","arrowheadMove","vertexMove","vertexRemove","useLinkTools","defaultLink","shapes","standard","Link","attrs","z","line","connection","stroke","strokeLinejoin","wrapper","strokeWidth","markup","tagName","selector","attributes","targetArrowheadTool","linkTools","TargetArrowhead","toolsView","ToolsView","tools","link","findView","addTools","paperScroller","ui","PaperScroller","autoResizePaper","scrollWhileDragging","cursor","selection","Selection","theme","useModelGeometry","allowTranslate","snaplines","Snaplines","startListening","document","getElementById","appendChild","render","el","highlighters","$el","css","appendTo","center","addStencil","handlePaperEvents","collection","reset","getElements","jsUcfirst","string","charAt","toUpperCase","slice","stencilRenderHandler","positionX","positionY","elNoInPorts","spaceBetweenElToX","spaceBetweenElToY","customEl","Element","define","size","removable","image","x","y","root","magnet","body","fill","rx","ry","ports","items","id","group","groups","out","position","portBody","r","in","customElNoInPorts","targetMarker","forEach","element","elementName","prop","require","push","stencil","Stencil","dropAnimation","duration","easing","load","getElementPredecessorLinks","getSubgraph","getPredecessors","filter","isLink","highlightCell","self","addClass","add","isElement","className","unhighlightCell","remove","selectElement","getLinks","toFront","addHalo","cellView","halo","Halo","boxContent","removeHandle","addEventListener","evt","code","on","$emit","toBack","removeTools","console","log","ctrlKey","metaKey","models","setCursor","startSelecting","startPanning","clipboard","Clipboard","zoom","max","min","preventDefault","undo","redo","cutElements","copyElements","pastedCells","pasteCells","translate","dx","dy","useLocalStorage","elements","_","getAllLinks","getAllNodes","getCells","clearAll","clear","getNodeAttr","node","getCell","nodeInfo","linkInfo","nodeType","addCell","error","source","target","addTo"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\components\\dataflow.vue"],"sourcesContent":["<template>\r\n  <div id=\"main\" >\r\n    <div class=\"btn_contain\">\r\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\r\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\r\n        <button id=\"btn-center\" class=\"btn\">center</button>\r\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\r\n    </div>\r\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\r\n    \r\n    <div id=\"paper\" ></div>\r\n    <div id=\"navigator\"></div>\r\n    \r\n    \r\n        </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name:'DataFlow',\r\n    props: {\r\n        instanceKey: {\r\n            defaul: ''\r\n        },\r\n        action: {\r\n            defaul: 'view'\r\n        },\r\n\t\twidth: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 800\r\n\t\t},\r\n\t\theight: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 250\r\n\t\t},\r\n\t\tgridSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\tdrawGrid: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tbackground: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\treadonly: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n        highLightLinks:{\r\n            type: Array,\r\n            default(){\r\n                return []\r\n            }\r\n        },\r\n        nodes:{\r\n            type: [Object, Boolean],\r\n            default: false\r\n        },\r\n        links:{\r\n            type: [Object, Boolean],\r\n            default: false\r\n        }\r\n\t},\r\n    data(){\r\n        return{\r\n            stencilShapes : [],\r\n            selectionNode : null,\r\n            selectedElement : null,\r\n            selectedLink : null,\r\n            \r\n            //check ctrl shift\r\n            ctrlDown : false,\r\n            shiftDown : false,\r\n            color : \"rgb(255 136 0)\",\r\n            arr: ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'],\r\n        }\r\n    },\r\n    created() {\r\n        this.graph = new joint.dia.Graph;\r\n    },\r\n    mounted() {\r\n        this.initPaper()\r\n    },\r\n    methods: {\r\n        \r\n        initPaper(){\r\n            let graph = this.graph;\r\n             this.commandManager = new joint.dia.CommandManager({\r\n                graph: graph,\r\n                cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\r\n                    return !options.ignoreCommandManager;\r\n                }\r\n            });\r\n            this.paper = new joint.dia.Paper({  \r\n                \r\n                width: 1000,\r\n                height: 800,\r\n                model: this.graph,\r\n                async: true,\r\n                sorting: joint.dia.Paper.sorting.APPROX,\r\n                gridSize: 10,\r\n                drawGrid: true,\r\n                restrictTranslate: true,\r\n                stopDelegation: false,\r\n                \r\n                interactive: { vertexAdd: false } ,\r\n                // background: { color: '#F3F7F6' },\r\n                // defaultConnectionPoint: { name: 'boundary' },\r\n                // defaultConnector: {\r\n                //     name: \"rounded\"\r\n                //   },\r\n                //   defaultRouter: {\r\n                //     name: \"manhattan\",\r\n                //     args: {\r\n                //       step: 10,\r\n                //       endDirections: [\"bottom\"],\r\n                //       startDirections: [\"top\"],\r\n                //       padding: { bottom: 20 }\r\n                //     }\r\n                //   },\r\n                snapLinks: {\r\n                    radius: 75\r\n                },\r\n                linkPinning: false,\r\n                multiLinks: false,\r\n                defaultRouter: { name: 'manhattan', args: { padding: 10 }},\r\n                defaultConnector: { name: 'rounded' },\r\n                validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\r\n                    // Prevent linking from input ports.\r\n                    if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\r\n                    // Prevent linking from output ports to input ports within one element.\r\n                    if (cellViewS === cellViewT) return false;\r\n                    // Prevent linking to input ports.\r\n                    return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\r\n                },\r\n                // validateConnection: function (view1, _magnet1, view2, _magnet2) {\r\n                //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\r\n                //     return view1 !== view2;\r\n                // },\r\n                interactive: {\r\n                    linkMove: true,\r\n                    labelMove: true,\r\n                    arrowheadMove: true,\r\n                    vertexMove: false,\r\n                    vertexAdd: false,\r\n                    vertexRemove: false,\r\n                    useLinkTools: false,\r\n                },\r\n                defaultLink: function () {\r\n                    return new joint.shapes.standard.Link({\r\n                        attrs: {\r\n                            z:1,\r\n                            line: {\r\n                                connection: true,\r\n                                stroke: '#707070',\r\n                                strokeLinejoin: 'round',\r\n                            },\r\n                            wrapper: {\r\n                                connection: true,\r\n                                strokeWidth: 10,\r\n                                strokeLinejoin: 'round'\r\n                            },\r\n                            \r\n                        },\r\n                        \r\n                        markup: [{\r\n                            tagName: 'path',\r\n                            selector: 'wrapper',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                                'stroke': 'transparent'\r\n                            }\r\n                        }, {\r\n                            tagName: 'path',\r\n                            selector: 'line',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                            }\r\n                        }]\r\n                    });\r\n                }\r\n            });\r\n            var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\r\n            this.toolsView = new joint.dia.ToolsView({\r\n                tools: [\r\n                    // verticesTool, segmentsTool,\r\n                    // sourceArrowheadTool, \r\n                    targetArrowheadTool,\r\n                    // sourceAnchorTool, targetAnchorTool,\r\n                    // boundaryTool, removeButton\r\n                ]\r\n            });\r\n            var linkView = link.findView(this.paper);\r\n            linkView.addTools(this.toolsView);\r\n            this.paperScroller = new joint.ui.PaperScroller({\r\n                paper: this.paper,\r\n                autoResizePaper: true,\r\n                scrollWhileDragging: true,\r\n                cursor: 'grab'\r\n                \r\n            });\r\n            this.selection = new joint.ui.Selection({\r\n                theme: 'material',\r\n                paper: this.paper,\r\n                useModelGeometry: true,\r\n                allowTranslate: true,\r\n            });\r\n            this.snaplines = new joint.ui.Snaplines({ paper: this.paper })\r\n            this.snaplines.startListening()\r\n            //render paper\r\n            document.getElementById('paper').appendChild(this.paperScroller.render().el);\r\n            //render paperScroller\r\n            this.highlighters=joint.highlighters;\r\n            this.paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\r\n            this.paperScroller.center();\r\n            this.addStencil()\r\n            this.handlePaperEvents();\r\n            this.selection.collection.reset(graph.getElements());\r\n        },\r\n        jsUcfirst(string){\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        },\r\n        stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\r\n            \r\n            var customEl = joint.dia.Element.define('standard.Rectangle', {\r\n                z: 1,\r\n                size: {\r\n                    width: 44,\r\n                    height: 35\r\n                },\r\n                removable: false,\r\n                attrs: {\r\n                    image: {\r\n                        x: 5,\r\n                        y: 5,\r\n                        width: 'calc(w-10)',\r\n                        height: 'calc(h-10 )'\r\n                    },\r\n                    root: {\r\n                        magnet: false\r\n                    },\r\n                    body: {\r\n                        fill: '#FFFFFF',\r\n                        stroke: '#A0A0A0',\r\n                        width: 'calc(w)',\r\n                        height: 'calc(h)',\r\n                        strokeWidth: 2,\r\n                        rx: 5,\r\n                        ry: 5,\r\n\r\n                    }\r\n                },\r\n                ports: {\r\n                    items: [{\r\n                        id: 'out-port',\r\n                        group: 'out',\r\n\r\n                    },\r\n                    {\r\n                        id: 'in-port',\r\n                        group: 'in'\r\n                    }\r\n                    ],\r\n                    groups: {\r\n                        out: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'right'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'active',\r\n                                    fill: '#187BD3',\r\n                                    stroke: '#187BD3'\r\n\r\n                                }\r\n                            }\r\n                        },\r\n                        in: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'left'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'passive',\r\n                                    fill: '#FFFFFF',\r\n                                    stroke: '#187BD3',\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                markup: [\r\n                    {\r\n                        tagName: 'rect',\r\n                        selector: 'body',\r\n                    },\r\n                    {\r\n                        tagName: 'image',\r\n                        selector: 'image'\r\n                    }, {\r\n                        tagName: 'ports',\r\n                        selector: 'ports'\r\n                    }]\r\n            })\r\n            var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\r\n                z: 1,\r\n                theme: 'material',\r\n                size: {\r\n                    width: 44,\r\n                    height: 35\r\n                },\r\n                removable: false,\r\n                attrs: {\r\n                    image: {\r\n                        x: 5,\r\n                        y: 5,\r\n                        width: 'calc(w-10)',\r\n                        height: 'calc(h-10 )'\r\n                    },\r\n                    root: {\r\n                        magnet: false\r\n                    },\r\n                    body: {\r\n                        fill: '#FFFFFF',\r\n                        stroke: '#A0A0A0',\r\n                        width: 'calc(w)',\r\n                        height: 'calc(h)',\r\n                        strokeWidth: 2,\r\n                    },\r\n                    line: {\r\n                        connection: true,\r\n                        stroke: '#333333',\r\n                        strokeWidth: 2,\r\n                        strokeLinejoin: 'round',\r\n                        targetMarker: {\r\n                            'type': 'path',\r\n                            'd': 'M 10 -5 0 0 10 5 z'\r\n                        }\r\n                    },\r\n                },\r\n                ports: {\r\n                    items: [\r\n                        {\r\n                            id: 'out-port',\r\n                            group: 'out'\r\n                        }\r\n                    ],\r\n                    groups: {\r\n                        out: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'right'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'active',\r\n                                    fill: '#187BD3',\r\n                                    stroke: '#187BD3'\r\n                                }\r\n                            }\r\n                        },\r\n\r\n                    }\r\n                },\r\n                markup: [\r\n                    {\r\n                        tagName: 'rect',\r\n                        selector: 'body',\r\n                    }, {\r\n                        tagName: 'image',\r\n                        selector: 'image'\r\n                    }, {\r\n                        tagName: 'ports',\r\n                        selector: 'ports'\r\n                    }]\r\n            })\r\n            this.arr.forEach(element => {\r\n                //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\r\n                let elementName = this.jsUcfirst(element)\r\n                if (elementName === this.jsUcfirst(elNoInPorts)) {\r\n                    element = new customElNoInPorts();\r\n                }\r\n                else {\r\n                    element = new customEl();\r\n                }\r\n                element.prop('attrs/image/xlinkHref', require(`../assets/${elementName}.svg`))\r\n                this.stencilShapes.push(element.position(positionX, positionY))\r\n                if(spaceBetweenElToX>0){\r\n                    positionX += element.attributes.size.width+spaceBetweenElToX;\r\n                }\r\n                if(spaceBetweenElToY>0){\r\n                    positionY += element.attributes.size.height+spaceBetweenElToY;\r\n                }\r\n            });\r\n        },\r\n    \r\n        addStencil(){\r\n            let graph = this.graph;\r\n            let paper = this.paper;\r\n            var stencil = new joint.ui.Stencil({\r\n                paper: this.paperScroller,\r\n                width: 900,\r\n                height: 60,\r\n                dropAnimation: { duration: 200, easing: 'swing' },\r\n            });\r\n            \r\n            this.stencilRenderHandler(20,20,this.arr,\"load\",16)\r\n            document.getElementById('stencil').appendChild(stencil.render().el);\r\n            stencil.load(this.stencilShapes);\r\n        },\r\n        getElementPredecessorLinks(el) {\r\n            let graph=this.graph;\r\n            \r\n        return graph\r\n          .getSubgraph([el, ...graph.getPredecessors(el)])\r\n          .filter((cell) => cell.isLink());\r\n      },\r\n      highlightCell(cell) {\r\n          let self = this;\r\n        if(cell){\r\n        self.highlighters.addClass.add(\r\n          cell.findView(self.paper),\r\n          cell.isElement() ? \"body\" : \"line\",\r\n          \"selection\",\r\n          { className: \"selection\" }\r\n        );\r\n        }else{return}\r\n      },\r\n      unhighlightCell(cell) {\r\n          let self = this;\r\n        if(cell){\r\n        self.highlighters.addClass.remove(cell.findView(self.paper), \"selection\");\r\n        }\r\n        else{return}\r\n      },\r\n      selectElement(el) {   \r\n        let self = this;\r\n        let graph = self.graph;  \r\n        if (self.selectionNode === el) return;\r\n        if (self.selectionNode) {\r\n            \r\n          self.unhighlightCell(self.selectionNode);\r\n          graph.getLinks().forEach((link) => self.unhighlightCell(link));\r\n        }\r\n        if (el) {\r\n            \r\n          self.highlightCell(el);\r\n          self.getElementPredecessorLinks(el).forEach((link) => {\r\n              self.highlightCell(link)\r\n              link.toFront({ ignoreCommandManager: true })\r\n            });\r\n          self.selectionNode = el;\r\n        } else {\r\n            self.selectionNode = null;\r\n        }\r\n      },\r\n        addHalo(cellView){\r\n            var halo = new joint.ui.Halo({\r\n                cellView: cellView,\r\n                type: 'toolbar',\r\n                boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\r\n            });\r\n            halo.removeHandle('resize');\r\n            halo.removeHandle('rotate');\r\n            halo.removeHandle('direction');\r\n            halo.render();\r\n        },\r\n\r\n        handlePaperEvents(){\r\n            let self = this;\r\n            let paper = self.paper;\r\n            let graph = self.graph;\r\n            //nếu bấm thì =true\r\n            document.addEventListener('keydown', function (evt) {\r\n                if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n                    self.ctrlDown = true;\r\n                }\r\n                if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n                    self.shiftDown = true;\r\n                }\r\n            })\r\n            //nếu thả nút thì =false\r\n            document.addEventListener('keyup', function (evt) {\r\n                if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n                    self.shiftDown = false;\r\n\r\n                }\r\n                if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n                    self.ctrlDown = false;\r\n                }\r\n            })\r\n            paper.on('cell:pointerup',function (cellView) {\r\n                self.addHalo(cellView)\r\n                if(cellView.model.attributes['type']==='standard.Link'){\r\n                    self.$emit('select-link', {id: cellView.model.id});\r\n                }else{\r\n                    self.$emit('select-cell', {id: cellView.model.id});\r\n                }\r\n                \r\n                self.selectedElement = cellView.model;\r\n                self.selectedElement.toFront({ ignoreCommandManager: true })\r\n                // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\r\n                // console.log(graph.getLinks())\r\n            })\r\n            paper.on({\r\n          //xử lý khi các sự kiện \r\n                \"cell:mouseenter\":(cellView)=>{\r\n                        cellView.model.toFront({ ignoreCommandManager: true })\r\n                },\r\n                \"cell:mouseleave\":(cellView)=>{\r\n                    cellView.model.toBack({ ignoreCommandManager: true })\r\n                    if(self.selectionNode){\r\n                        self.getElementPredecessorLinks(self.selectionNode).forEach((link) => {\r\n                        \r\n                            link.toFront({ ignoreCommandManager: true })\r\n                        });\r\n                    }\r\n                },\r\n            \r\n                \"element:pointerclick\":(cellView) =>{\r\n                    //chỉ đổi màu khi ko bấm ctrl\r\n                    if(self.ctrlDown ===false )\r\n                        { \r\n                            self.selectElement(cellView.model)\r\n                        }\r\n                    },\r\n                    \"link:pointerclick\":(cellView) =>\r\n                        {\r\n                            self.selectElement(cellView.model)\r\n                            //chon vao link thi mo cho phep doi node\r\n                            cellView.addTools(this.toolsView);\r\n                        \r\n                        },\r\n                        \r\n                        //chuyển lại màu cũ khi bấm ra ngoài\r\n                    \"blank:pointerclick\":() => {\r\n                        self.selectElement(null)\r\n                        paper.removeTools({ ignoreCommandManager: true });\r\n                        \r\n                        },\r\n                    \r\n                    'element:pointerup': function (cellView, evt) {\r\n                        console.log(evt)\r\n                        if (evt.ctrlKey || evt.metaKey) {\r\n                            console.log(self.selection)\r\n                            self.selection.collection.add(cellView.model);\r\n                            //loop to all the element in selection and set it to front\r\n                            self.selection.collection.models.forEach(element => {\r\n                                element.toFront({ ignoreCommandManager: true })\r\n                            })               \r\n                        }\r\n                    },\r\n                    //chuyển màu khi bấm vào link và cho nó lên trc\r\n                    'link:pointerup': function (cellView) {\r\n                        self.selectedLink = cellView.model;\r\n                        self.selectedLink.toFront({ ignoreCommandManager: true })\r\n                    },\r\n                    \r\n                    // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\r\n                    'blank:pointerdown':function(evt, x, y) {\r\n                        if (self.shiftDown===true) {\r\n                            self.selectElement(null)\r\n                            self.paperScroller.setCursor('crosshair')\r\n                            self.selection.startSelecting(evt);\r\n                            \r\n                        } else {\r\n                            \r\n                            self.selection.collection.reset([]);\r\n                            self.paperScroller.startPanning(evt, x, y);\r\n                            paper.removeTools();\r\n                            self.paperScroller.setCursor('grab');\r\n                        }\r\n                \r\n                    },\r\n            })\r\n            //xóa el nếu chọn lại lần 2 khi bấm ctrl\r\n            self.selection.on('selection-box:pointerdown', function (cellView, evt) {\r\n                if (evt.ctrlKey || evt.metaKey) {\r\n                    self.selection.collection.remove(cellView.model);\r\n                }\r\n            });\r\n                //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\r\n    document.addEventListener('keydown', function (evt) {\r\n        self.clipboard = new joint.ui.Clipboard();\r\n        \r\n        \r\n        if (evt.code === \"NumpadAdd\" && self.shiftDown === true) {\r\n            // console.log(evt.code)\r\n            self.paperScroller.zoom(0.2, { max: 4 });\r\n        }\r\n        if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\r\n            self.paperScroller.zoom(-0.2, { min: 0.2 });\r\n            // console.log(evt.code)\r\n        }\r\n        //check+ A\r\n        if (evt.code === \"KeyA\" && self.ctrlDown === true) {\r\n            self.selection.collection.reset(graph.getElements())\r\n            evt.preventDefault();\r\n        }//check ctrl + Z\r\n        if (evt.code === \"KeyZ\" && self.ctrlDown === true) {\r\n            self.commandManager.undo();\r\n            // console.log(selectionNode)\r\n            \r\n            self.unhighlightCell(self.selectionNode);\r\n            graph.getLinks().forEach((link) => self.unhighlightCell(link));\r\n        \r\n            // console.log(selectionNode)\r\n            self.selectionNode=null\r\n        }\r\n        //check ctrl + Y\r\n        if (evt.code === \"KeyY\" && self.ctrlDown === true) {\r\n            self.commandManager.redo();\r\n            self.selectElement(null)\r\n        }\r\n        //check ctrl + V ,ctrl + C, ctrl+X\r\n        if (evt.code === \"KeyX\" && self.ctrlDown === true) {\r\n\r\n            self.clipboard.cutElements(self.selection.collection, paper.model)\r\n        }\r\n        if (evt.code === \"KeyC\" && self.ctrlDown === true) {\r\n            self.clipboard.copyElements(self.selection.collection, graph);\r\n        }\r\n        if (evt.code === \"KeyV\" && self.ctrlDown === true) {\r\n            var pastedCells = self.clipboard.pasteCells(graph, {\r\n                translate: { dx: 40, dy: 40 },\r\n                useLocalStorage: true\r\n            });\r\n\r\n            var elements = _.filter(pastedCells, function (cell) {\r\n                return cell.isElement();\r\n            });\r\n            // Make sure pasted elements get selected immediately. This makes the UX better as\r\n            // the user can immediately manipulate the pasted elements.\r\n            self.selection.collection.reset(elements);\r\n\r\n        }\r\n    })\r\n   \r\n        },\r\n        getAllLinks(){\r\n             return this.graph.getLinks()\r\n        },\r\n        getAllNodes(){\r\n            return this.graph.getCells()\r\n        },\r\n        clearAll(){\r\n            return this.graph.clear()\r\n        },\r\n        getNodeAttr(id){\r\n            let node = this.graph.getCell(id);\r\n            if(node){\r\n                return node.attributes;\r\n            }else{\r\n                return {}\r\n            }\r\n        },\r\n        render(){\r\n            let nodeInfo=this.nodes;\r\n            let linkInfo=this.links;\r\n            let nodeType=nodeInfo.nodeType;\r\n            //checknode\r\n            if(nodeType){\r\n                let cell =new joint.shapes.nodeType({\r\n                    position: nodeInfo.position,\r\n                    id: nodeInfo.id,\r\n                })\r\n                this.graph.addCell(cell)\r\n            }\r\n            else{\r\n                console.error(\"Node type '\" + nodeType + \"' is not defined\");\r\n            }\r\n            if(linkInfo){\r\n                let link =new joint.shapes.standard.Link();\r\n                link.source(linkInfo.source)\r\n                link.target(linkInfo.target)\r\n                link.addTo(this.graph)\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.joint-element .selection {\r\n    stroke: rgb(255 136 0);\r\n}\r\n.joint-link .selection {\r\n    stroke: rgb(255 136 0); \r\n    fill: rgb(255 136 0),\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}