{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport * as util from '../util/index.mjs';\nimport V from '../V/index.mjs';\nimport { Rect, Point } from '../g/index.mjs';\nimport * as Port from '../layout/ports/port.mjs';\nimport * as PortLabel from '../layout/ports/portLabel.mjs';\n\nvar PortData = function (data) {\n  var clonedData = util.cloneDeep(data) || {};\n  this.ports = [];\n  this.groups = {};\n  this.portLayoutNamespace = Port;\n  this.portLabelLayoutNamespace = PortLabel;\n\n  this._init(clonedData);\n};\n\nPortData.prototype = {\n  getPorts: function () {\n    return this.ports;\n  },\n  getGroup: function (name) {\n    return this.groups[name] || {};\n  },\n  getPortsByGroup: function (groupName) {\n    return this.ports.filter(function (port) {\n      return port.group === groupName;\n    });\n  },\n  getGroupPortsMetrics: function (groupName, elBBox) {\n    var group = this.getGroup(groupName);\n    var ports = this.getPortsByGroup(groupName);\n    var groupPosition = group.position || {};\n    var groupPositionName = groupPosition.name;\n    var namespace = this.portLayoutNamespace;\n\n    if (!namespace[groupPositionName]) {\n      groupPositionName = 'left';\n    }\n\n    var groupArgs = groupPosition.args || {};\n    var portsArgs = ports.map(function (port) {\n      return port && port.position && port.position.args;\n    });\n    var groupPortTransformations = namespace[groupPositionName](portsArgs, elBBox, groupArgs);\n    var accumulator = {\n      ports: ports,\n      result: []\n    };\n    util.toArray(groupPortTransformations).reduce(function (res, portTransformation, index) {\n      var port = res.ports[index];\n      res.result.push({\n        portId: port.id,\n        portTransformation: portTransformation,\n        labelTransformation: this._getPortLabelLayout(port, Point(portTransformation), elBBox),\n        portAttrs: port.attrs,\n        portSize: port.size,\n        labelSize: port.label.size\n      });\n      return res;\n    }.bind(this), accumulator);\n    return accumulator.result;\n  },\n  _getPortLabelLayout: function (port, portPosition, elBBox) {\n    var namespace = this.portLabelLayoutNamespace;\n    var labelPosition = port.label.position.name || 'left';\n\n    if (namespace[labelPosition]) {\n      return namespace[labelPosition](portPosition, elBBox, port.label.position.args);\n    }\n\n    return null;\n  },\n  _init: function (data) {\n    // prepare groups\n    if (util.isObject(data.groups)) {\n      var groups = Object.keys(data.groups);\n\n      for (var i = 0, n = groups.length; i < n; i++) {\n        var key = groups[i];\n        this.groups[key] = this._evaluateGroup(data.groups[key]);\n      }\n    } // prepare ports\n\n\n    var ports = util.toArray(data.items);\n\n    for (var j = 0, m = ports.length; j < m; j++) {\n      this.ports.push(this._evaluatePort(ports[j]));\n    }\n  },\n  _evaluateGroup: function (group) {\n    return util.merge(group, {\n      position: this._getPosition(group.position, true),\n      label: this._getLabel(group, true)\n    });\n  },\n  _evaluatePort: function (port) {\n    var evaluated = util.assign({}, port);\n    var group = this.getGroup(port.group);\n    evaluated.markup = evaluated.markup || group.markup;\n    evaluated.attrs = util.merge({}, group.attrs, evaluated.attrs);\n    evaluated.position = this._createPositionNode(group, evaluated);\n    evaluated.label = util.merge({}, group.label, this._getLabel(evaluated));\n    evaluated.z = this._getZIndex(group, evaluated);\n    evaluated.size = util.assign({}, group.size, evaluated.size);\n    return evaluated;\n  },\n  _getZIndex: function (group, port) {\n    if (util.isNumber(port.z)) {\n      return port.z;\n    }\n\n    if (util.isNumber(group.z) || group.z === 'auto') {\n      return group.z;\n    }\n\n    return 'auto';\n  },\n  _createPositionNode: function (group, port) {\n    return util.merge({\n      name: 'left',\n      args: {}\n    }, group.position, {\n      args: port.args\n    });\n  },\n  _getPosition: function (position, setDefault) {\n    var args = {};\n    var positionName;\n\n    if (util.isFunction(position)) {\n      positionName = 'fn';\n      args.fn = position;\n    } else if (util.isString(position)) {\n      positionName = position;\n    } else if (position === undefined) {\n      positionName = setDefault ? 'left' : null;\n    } else if (Array.isArray(position)) {\n      positionName = 'absolute';\n      args.x = position[0];\n      args.y = position[1];\n    } else if (util.isObject(position)) {\n      positionName = position.name;\n      util.assign(args, position.args);\n    }\n\n    var result = {\n      args: args\n    };\n\n    if (positionName) {\n      result.name = positionName;\n    }\n\n    return result;\n  },\n  _getLabel: function (item, setDefaults) {\n    var label = item.label || {};\n    var ret = label;\n    ret.position = this._getPosition(label.position, setDefaults);\n    return ret;\n  }\n};\nexport const elementPortPrototype = {\n  _initializePorts: function () {\n    this._createPortData();\n\n    this.on('change:ports', function () {\n      this._processRemovedPort();\n\n      this._createPortData();\n    }, this);\n  },\n\n  /**\n   * remove links tied wiht just removed element\n   * @private\n   */\n  _processRemovedPort: function () {\n    var current = this.get('ports') || {};\n    var currentItemsMap = {};\n    util.toArray(current.items).forEach(function (item) {\n      currentItemsMap[item.id] = true;\n    });\n    var previous = this.previous('ports') || {};\n    var removed = {};\n    util.toArray(previous.items).forEach(function (item) {\n      if (!currentItemsMap[item.id]) {\n        removed[item.id] = true;\n      }\n    });\n    var graph = this.graph;\n\n    if (graph && !util.isEmpty(removed)) {\n      var inboundLinks = graph.getConnectedLinks(this, {\n        inbound: true\n      });\n      inboundLinks.forEach(function (link) {\n        if (removed[link.get('target').port]) link.remove();\n      });\n      var outboundLinks = graph.getConnectedLinks(this, {\n        outbound: true\n      });\n      outboundLinks.forEach(function (link) {\n        if (removed[link.get('source').port]) link.remove();\n      });\n    }\n  },\n\n  /**\n   * @returns {boolean}\n   */\n  hasPorts: function () {\n    var ports = this.prop('ports/items');\n    return Array.isArray(ports) && ports.length > 0;\n  },\n\n  /**\n   * @param {string} id\n   * @returns {boolean}\n   */\n  hasPort: function (id) {\n    return this.getPortIndex(id) !== -1;\n  },\n\n  /**\n   * @returns {Array<object>}\n   */\n  getPorts: function () {\n    return util.cloneDeep(this.prop('ports/items')) || [];\n  },\n\n  /**\n   * @returns {Array<object>}\n   */\n  getGroupPorts: function (groupName) {\n    const groupPorts = util.toArray(this.prop(['ports', 'items'])).filter(port => port.group === groupName);\n    return util.cloneDeep(groupPorts);\n  },\n\n  /**\n   * @param {string} id\n   * @returns {object}\n   */\n  getPort: function (id) {\n    return util.cloneDeep(util.toArray(this.prop('ports/items')).find(function (port) {\n      return port.id && port.id === id;\n    }));\n  },\n\n  /**\n   * @param {string} groupName\n   * @returns {Object<portId, {x: number, y: number, angle: number}>}\n   */\n  getPortsPositions: function (groupName) {\n    var portsMetrics = this._portSettingsData.getGroupPortsMetrics(groupName, Rect(this.size()));\n\n    return portsMetrics.reduce(function (positions, metrics) {\n      var transformation = metrics.portTransformation;\n      positions[metrics.portId] = {\n        x: transformation.x,\n        y: transformation.y,\n        angle: transformation.angle\n      };\n      return positions;\n    }, {});\n  },\n\n  /**\n   * @param {string|Port} port port id or port\n   * @returns {number} port index\n   */\n  getPortIndex: function (port) {\n    var id = util.isObject(port) ? port.id : port;\n\n    if (!this._isValidPortId(id)) {\n      return -1;\n    }\n\n    return util.toArray(this.prop('ports/items')).findIndex(function (item) {\n      return item.id === id;\n    });\n  },\n\n  /**\n   * @param {object} port\n   * @param {object} [opt]\n   * @returns {joint.dia.Element}\n   */\n  addPort: function (port, opt) {\n    if (!util.isObject(port) || Array.isArray(port)) {\n      throw new Error('Element: addPort requires an object.');\n    }\n\n    var ports = util.assign([], this.prop('ports/items'));\n    ports.push(port);\n    this.prop('ports/items', ports, opt);\n    return this;\n  },\n\n  /**\n   * @param {string|Port|number} before\n   * @param {object} port\n   * @param {object} [opt]\n   * @returns {joint.dia.Element}\n   */\n  insertPort: function (before, port, opt) {\n    const index = typeof before === 'number' ? before : this.getPortIndex(before);\n\n    if (!util.isObject(port) || Array.isArray(port)) {\n      throw new Error('dia.Element: insertPort requires an object.');\n    }\n\n    const ports = util.assign([], this.prop('ports/items'));\n    ports.splice(index, 0, port);\n    this.prop('ports/items', ports, opt);\n    return this;\n  },\n\n  /**\n   * @param {string} portId\n   * @param {string|object=} path\n   * @param {*=} value\n   * @param {object=} opt\n   * @returns {joint.dia.Element}\n   */\n  portProp: function (portId, path, value, opt) {\n    var index = this.getPortIndex(portId);\n\n    if (index === -1) {\n      throw new Error('Element: unable to find port with id ' + portId);\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if (Array.isArray(path)) {\n      args[0] = ['ports', 'items', index].concat(path);\n    } else if (util.isString(path)) {\n      // Get/set an attribute by a special path syntax that delimits\n      // nested objects by the colon character.\n      args[0] = ['ports/items/', index, '/', path].join('');\n    } else {\n      args = ['ports/items/' + index];\n\n      if (util.isPlainObject(path)) {\n        args.push(path);\n        args.push(value);\n      }\n    }\n\n    return this.prop.apply(this, args);\n  },\n  _validatePorts: function () {\n    var portsAttr = this.get('ports') || {};\n    var errorMessages = [];\n    portsAttr = portsAttr || {};\n    var ports = util.toArray(portsAttr.items);\n    ports.forEach(function (p) {\n      if (typeof p !== 'object') {\n        errorMessages.push('Element: invalid port ', p);\n      }\n\n      if (!this._isValidPortId(p.id)) {\n        p.id = this.generatePortId();\n      }\n    }, this);\n\n    if (util.uniq(ports, 'id').length !== ports.length) {\n      errorMessages.push('Element: found id duplicities in ports.');\n    }\n\n    return errorMessages;\n  },\n  generatePortId: function () {\n    return this.generateId();\n  },\n\n  /**\n   * @param {string} id port id\n   * @returns {boolean}\n   * @private\n   */\n  _isValidPortId: function (id) {\n    return id !== null && id !== undefined && !util.isObject(id);\n  },\n  addPorts: function (ports, opt) {\n    if (ports.length) {\n      this.prop('ports/items', util.assign([], this.prop('ports/items')).concat(ports), opt);\n    }\n\n    return this;\n  },\n  removePort: function (port, opt) {\n    const options = opt || {};\n    const index = this.getPortIndex(port);\n\n    if (index !== -1) {\n      const ports = util.assign([], this.prop(['ports', 'items']));\n      ports.splice(index, 1);\n      options.rewrite = true;\n      this.startBatch('port-remove');\n      this.prop(['ports', 'items'], ports, options);\n      this.stopBatch('port-remove');\n    }\n\n    return this;\n  },\n  removePorts: function (portsForRemoval, opt) {\n    let options, newPorts;\n\n    if (Array.isArray(portsForRemoval)) {\n      options = opt || {};\n      if (portsForRemoval.length === 0) return this.this;\n      const currentPorts = util.assign([], this.prop(['ports', 'items']));\n      newPorts = currentPorts.filter(function (cp) {\n        return !portsForRemoval.some(function (rp) {\n          const rpId = util.isObject(rp) ? rp.id : rp;\n          return cp.id === rpId;\n        });\n      });\n    } else {\n      options = portsForRemoval || {};\n      newPorts = [];\n    }\n\n    this.startBatch('port-remove');\n    options.rewrite = true;\n    this.prop(['ports', 'items'], newPorts, options);\n    this.stopBatch('port-remove');\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  _createPortData: function () {\n    var err = this._validatePorts();\n\n    if (err.length > 0) {\n      this.set('ports', this.previous('ports'));\n      throw new Error(err.join(' '));\n    }\n\n    var prevPortData;\n\n    if (this._portSettingsData) {\n      prevPortData = this._portSettingsData.getPorts();\n    }\n\n    this._portSettingsData = new PortData(this.get('ports'));\n\n    var curPortData = this._portSettingsData.getPorts();\n\n    if (prevPortData) {\n      var added = curPortData.filter(function (item) {\n        if (!prevPortData.find(function (prevPort) {\n          return prevPort.id === item.id;\n        })) {\n          return item;\n        }\n      });\n      var removed = prevPortData.filter(function (item) {\n        if (!curPortData.find(function (curPort) {\n          return curPort.id === item.id;\n        })) {\n          return item;\n        }\n      });\n\n      if (removed.length > 0) {\n        this.trigger('ports:remove', this, removed);\n      }\n\n      if (added.length > 0) {\n        this.trigger('ports:add', this, added);\n      }\n    }\n  }\n};\nexport const elementViewPortPrototype = {\n  portContainerMarkup: 'g',\n  portMarkup: [{\n    tagName: 'circle',\n    selector: 'circle',\n    attributes: {\n      'r': 10,\n      'fill': '#FFFFFF',\n      'stroke': '#000000'\n    }\n  }],\n  portLabelMarkup: [{\n    tagName: 'text',\n    selector: 'text',\n    attributes: {\n      'fill': '#000000'\n    }\n  }],\n\n  /** @type {Object<string, {portElement: Vectorizer, portLabelElement: Vectorizer}>} */\n  _portElementsCache: null,\n\n  /**\n   * @private\n   */\n  _initializePorts: function () {\n    this._cleanPortsCache();\n  },\n\n  /**\n   * @typedef {Object} Port\n   *\n   * @property {string} id\n   * @property {Object} position\n   * @property {Object} label\n   * @property {Object} attrs\n   * @property {string} markup\n   * @property {string} group\n   */\n\n  /**\n   * @private\n   */\n  _refreshPorts: function () {\n    this._removePorts();\n\n    this._cleanPortsCache();\n\n    this._renderPorts();\n  },\n  _cleanPortsCache: function () {\n    this._portElementsCache = {};\n  },\n\n  /**\n   * @private\n   */\n  _renderPorts: function () {\n    // references to rendered elements without z-index\n    var elementReferences = [];\n\n    var elem = this._getContainerElement();\n\n    for (var i = 0, count = elem.node.childNodes.length; i < count; i++) {\n      elementReferences.push(elem.node.childNodes[i]);\n    }\n\n    var portsGropsByZ = util.groupBy(this.model._portSettingsData.getPorts(), 'z');\n    var withoutZKey = 'auto'; // render non-z first\n\n    util.toArray(portsGropsByZ[withoutZKey]).forEach(function (port) {\n      var portElement = this._getPortElement(port);\n\n      elem.append(portElement);\n      elementReferences.push(portElement);\n    }, this);\n    var groupNames = Object.keys(portsGropsByZ);\n\n    for (var k = 0; k < groupNames.length; k++) {\n      var groupName = groupNames[k];\n\n      if (groupName !== withoutZKey) {\n        var z = parseInt(groupName, 10);\n\n        this._appendPorts(portsGropsByZ[groupName], z, elementReferences);\n      }\n    }\n\n    this._updatePorts();\n  },\n\n  /**\n   * @returns {V}\n   * @private\n   */\n  _getContainerElement: function () {\n    return this.rotatableNode || this.vel;\n  },\n\n  /**\n   * @param {Array<Port>}ports\n   * @param {number} z\n   * @param refs\n   * @private\n   */\n  _appendPorts: function (ports, z, refs) {\n    var containerElement = this._getContainerElement();\n\n    var portElements = util.toArray(ports).map(this._getPortElement, this);\n\n    if (refs[z] || z < 0) {\n      V(refs[Math.max(z, 0)]).before(portElements);\n    } else {\n      containerElement.append(portElements);\n    }\n  },\n\n  /**\n   * Try to get element from cache,\n   * @param port\n   * @returns {*}\n   * @private\n   */\n  _getPortElement: function (port) {\n    if (this._portElementsCache[port.id]) {\n      return this._portElementsCache[port.id].portElement;\n    }\n\n    return this._createPortElement(port);\n  },\n  findPortNode: function (portId, selector) {\n    const portCache = this._portElementsCache[portId];\n    if (!portCache) return null;\n    const portRoot = portCache.portContentElement.node;\n    const portSelectors = portCache.portContentSelectors;\n    const [node = null] = this.findBySelector(selector, portRoot, portSelectors);\n    return node;\n  },\n\n  /**\n   * @private\n   */\n  _updatePorts: function () {\n    // layout ports without group\n    this._updatePortGroup(undefined); // layout ports with explicit group\n\n\n    var groupsNames = Object.keys(this.model._portSettingsData.groups);\n    groupsNames.forEach(this._updatePortGroup, this);\n  },\n\n  /**\n   * @private\n   */\n  _removePorts: function () {\n    util.invoke(this._portElementsCache, 'portElement.remove');\n  },\n\n  /**\n   * @param {Port} port\n   * @returns {V}\n   * @private\n   */\n  _createPortElement: function (port) {\n    let portElement;\n    let labelElement;\n    let labelSelectors;\n    let portSelectors;\n    var portContainerElement = V(this.portContainerMarkup).addClass('joint-port');\n\n    var portMarkup = this._getPortMarkup(port);\n\n    if (Array.isArray(portMarkup)) {\n      var portDoc = this.parseDOMJSON(portMarkup, portContainerElement.node);\n      var portFragment = portDoc.fragment;\n\n      if (portFragment.childNodes.length > 1) {\n        portElement = V('g').append(portFragment);\n      } else {\n        portElement = V(portFragment.firstChild);\n      }\n\n      portSelectors = portDoc.selectors;\n    } else {\n      portElement = V(portMarkup);\n\n      if (Array.isArray(portElement)) {\n        portElement = V('g').append(portElement);\n      }\n    }\n\n    if (!portElement) {\n      throw new Error('ElementView: Invalid port markup.');\n    }\n\n    portElement.attr({\n      'port': port.id,\n      'port-group': port.group\n    });\n\n    const labelMarkupDef = this._getPortLabelMarkup(port.label);\n\n    if (Array.isArray(labelMarkupDef)) {\n      // JSON Markup\n      const {\n        fragment,\n        selectors\n      } = this.parseDOMJSON(labelMarkupDef, portContainerElement.node);\n      const childCount = fragment.childNodes.length;\n\n      if (childCount > 0) {\n        labelSelectors = selectors;\n        labelElement = childCount === 1 ? V(fragment.firstChild) : V('g').append(fragment);\n      }\n    } else {\n      // String Markup\n      labelElement = V(labelMarkupDef);\n\n      if (Array.isArray(labelElement)) {\n        labelElement = V('g').append(labelElement);\n      }\n    }\n\n    var portContainerSelectors;\n\n    if (portSelectors && labelSelectors) {\n      for (var key in labelSelectors) {\n        if (portSelectors[key] && key !== this.selector) throw new Error('ElementView: selectors within port must be unique.');\n      }\n\n      portContainerSelectors = util.assign({}, portSelectors, labelSelectors);\n    } else {\n      portContainerSelectors = portSelectors || labelSelectors;\n    }\n\n    portContainerElement.append(portElement.addClass('joint-port-body'));\n\n    if (labelElement) {\n      portContainerElement.append(labelElement.addClass('joint-port-label'));\n    }\n\n    this._portElementsCache[port.id] = {\n      portElement: portContainerElement,\n      portLabelElement: labelElement,\n      portSelectors: portContainerSelectors,\n      portLabelSelectors: labelSelectors,\n      portContentElement: portElement,\n      portContentSelectors: portSelectors\n    };\n    return portContainerElement;\n  },\n\n  /**\n   * @param {string=} groupName\n   * @private\n   */\n  _updatePortGroup: function (groupName) {\n    var elementBBox = Rect(this.model.size());\n\n    var portsMetrics = this.model._portSettingsData.getGroupPortsMetrics(groupName, elementBBox);\n\n    for (var i = 0, n = portsMetrics.length; i < n; i++) {\n      var metrics = portsMetrics[i];\n      var portId = metrics.portId;\n      var cached = this._portElementsCache[portId] || {};\n      var portTransformation = metrics.portTransformation;\n      this.applyPortTransform(cached.portElement, portTransformation);\n      this.updateDOMSubtreeAttributes(cached.portElement.node, metrics.portAttrs, {\n        rootBBox: new Rect(metrics.portSize),\n        selectors: cached.portSelectors\n      });\n      var labelTransformation = metrics.labelTransformation;\n\n      if (labelTransformation && cached.portLabelElement) {\n        this.applyPortTransform(cached.portLabelElement, labelTransformation, -portTransformation.angle || 0);\n        this.updateDOMSubtreeAttributes(cached.portLabelElement.node, labelTransformation.attrs, {\n          rootBBox: new Rect(metrics.labelSize),\n          selectors: cached.portLabelSelectors\n        });\n      }\n    }\n  },\n\n  /**\n   * @param {Vectorizer} element\n   * @param {{dx:number, dy:number, angle: number, attrs: Object, x:number: y:number}} transformData\n   * @param {number=} initialAngle\n   * @constructor\n   */\n  applyPortTransform: function (element, transformData, initialAngle) {\n    var matrix = V.createSVGMatrix().rotate(initialAngle || 0).translate(transformData.x || 0, transformData.y || 0).rotate(transformData.angle || 0);\n    element.transform(matrix, {\n      absolute: true\n    });\n  },\n\n  /**\n   * @param {Port} port\n   * @returns {string}\n   * @private\n   */\n  _getPortMarkup: function (port) {\n    return port.markup || this.model.get('portMarkup') || this.model.portMarkup || this.portMarkup;\n  },\n\n  /**\n   * @param {Object} label\n   * @returns {string}\n   * @private\n   */\n  _getPortLabelMarkup: function (label) {\n    return label.markup || this.model.get('portLabelMarkup') || this.model.portLabelMarkup || this.portLabelMarkup;\n  }\n};","map":{"version":3,"names":["util","V","Rect","Point","Port","PortLabel","PortData","data","clonedData","cloneDeep","ports","groups","portLayoutNamespace","portLabelLayoutNamespace","_init","prototype","getPorts","getGroup","name","getPortsByGroup","groupName","filter","port","group","getGroupPortsMetrics","elBBox","groupPosition","position","groupPositionName","namespace","groupArgs","args","portsArgs","map","groupPortTransformations","accumulator","result","toArray","reduce","res","portTransformation","index","push","portId","id","labelTransformation","_getPortLabelLayout","portAttrs","attrs","portSize","size","labelSize","label","bind","portPosition","labelPosition","isObject","Object","keys","i","n","length","key","_evaluateGroup","items","j","m","_evaluatePort","merge","_getPosition","_getLabel","evaluated","assign","markup","_createPositionNode","z","_getZIndex","isNumber","setDefault","positionName","isFunction","fn","isString","undefined","Array","isArray","x","y","item","setDefaults","ret","elementPortPrototype","_initializePorts","_createPortData","on","_processRemovedPort","current","get","currentItemsMap","forEach","previous","removed","graph","isEmpty","inboundLinks","getConnectedLinks","inbound","link","remove","outboundLinks","outbound","hasPorts","prop","hasPort","getPortIndex","getGroupPorts","groupPorts","getPort","find","getPortsPositions","portsMetrics","_portSettingsData","positions","metrics","transformation","angle","_isValidPortId","findIndex","addPort","opt","Error","insertPort","before","splice","portProp","path","value","slice","call","arguments","concat","join","isPlainObject","apply","_validatePorts","portsAttr","errorMessages","p","generatePortId","uniq","generateId","addPorts","removePort","options","rewrite","startBatch","stopBatch","removePorts","portsForRemoval","newPorts","this","currentPorts","cp","some","rp","rpId","err","set","prevPortData","curPortData","added","prevPort","curPort","trigger","elementViewPortPrototype","portContainerMarkup","portMarkup","tagName","selector","attributes","portLabelMarkup","_portElementsCache","_cleanPortsCache","_refreshPorts","_removePorts","_renderPorts","elementReferences","elem","_getContainerElement","count","node","childNodes","portsGropsByZ","groupBy","model","withoutZKey","portElement","_getPortElement","append","groupNames","k","parseInt","_appendPorts","_updatePorts","rotatableNode","vel","refs","containerElement","portElements","Math","max","_createPortElement","findPortNode","portCache","portRoot","portContentElement","portSelectors","portContentSelectors","findBySelector","_updatePortGroup","groupsNames","invoke","labelElement","labelSelectors","portContainerElement","addClass","_getPortMarkup","portDoc","parseDOMJSON","portFragment","fragment","firstChild","selectors","attr","labelMarkupDef","_getPortLabelMarkup","childCount","portContainerSelectors","portLabelElement","portLabelSelectors","elementBBox","cached","applyPortTransform","updateDOMSubtreeAttributes","rootBBox","element","transformData","initialAngle","matrix","createSVGMatrix","rotate","translate","transform","absolute"],"sources":["C:/Users/Admin/dataflow-test/node_modules/jointjs/src/dia/ports.mjs"],"sourcesContent":["import * as util from '../util/index.mjs';\nimport V from '../V/index.mjs';\nimport { Rect, Point } from '../g/index.mjs';\nimport * as Port from '../layout/ports/port.mjs';\nimport * as PortLabel from '../layout/ports/portLabel.mjs';\n\nvar PortData = function(data) {\n\n    var clonedData = util.cloneDeep(data) || {};\n    this.ports = [];\n    this.groups = {};\n    this.portLayoutNamespace = Port;\n    this.portLabelLayoutNamespace = PortLabel;\n\n    this._init(clonedData);\n};\n\nPortData.prototype = {\n\n    getPorts: function() {\n        return this.ports;\n    },\n\n    getGroup: function(name) {\n        return this.groups[name] || {};\n    },\n\n    getPortsByGroup: function(groupName) {\n\n        return this.ports.filter(function(port) {\n            return port.group === groupName;\n        });\n    },\n\n    getGroupPortsMetrics: function(groupName, elBBox) {\n\n        var group = this.getGroup(groupName);\n        var ports = this.getPortsByGroup(groupName);\n\n        var groupPosition = group.position || {};\n        var groupPositionName = groupPosition.name;\n        var namespace = this.portLayoutNamespace;\n        if (!namespace[groupPositionName]) {\n            groupPositionName = 'left';\n        }\n\n        var groupArgs = groupPosition.args || {};\n        var portsArgs = ports.map(function(port) {\n            return port && port.position && port.position.args;\n        });\n        var groupPortTransformations = namespace[groupPositionName](portsArgs, elBBox, groupArgs);\n\n        var accumulator = {\n            ports: ports,\n            result: []\n        };\n\n        util.toArray(groupPortTransformations).reduce(function(res, portTransformation, index) {\n            var port = res.ports[index];\n            res.result.push({\n                portId: port.id,\n                portTransformation: portTransformation,\n                labelTransformation: this._getPortLabelLayout(port, Point(portTransformation), elBBox),\n                portAttrs: port.attrs,\n                portSize: port.size,\n                labelSize: port.label.size\n            });\n            return res;\n        }.bind(this), accumulator);\n\n        return accumulator.result;\n    },\n\n    _getPortLabelLayout: function(port, portPosition, elBBox) {\n\n        var namespace = this.portLabelLayoutNamespace;\n        var labelPosition = port.label.position.name || 'left';\n\n        if (namespace[labelPosition]) {\n            return namespace[labelPosition](portPosition, elBBox, port.label.position.args);\n        }\n\n        return null;\n    },\n\n    _init: function(data) {\n\n        // prepare groups\n        if (util.isObject(data.groups)) {\n            var groups = Object.keys(data.groups);\n            for (var i = 0, n = groups.length; i < n; i++) {\n                var key = groups[i];\n                this.groups[key] = this._evaluateGroup(data.groups[key]);\n            }\n        }\n\n        // prepare ports\n        var ports = util.toArray(data.items);\n        for (var j = 0, m = ports.length; j < m; j++) {\n            this.ports.push(this._evaluatePort(ports[j]));\n        }\n    },\n\n    _evaluateGroup: function(group) {\n\n        return util.merge(group, {\n            position: this._getPosition(group.position, true),\n            label: this._getLabel(group, true)\n        });\n    },\n\n    _evaluatePort: function(port) {\n\n        var evaluated = util.assign({}, port);\n\n        var group = this.getGroup(port.group);\n\n        evaluated.markup = evaluated.markup || group.markup;\n        evaluated.attrs = util.merge({}, group.attrs, evaluated.attrs);\n        evaluated.position = this._createPositionNode(group, evaluated);\n        evaluated.label = util.merge({}, group.label, this._getLabel(evaluated));\n        evaluated.z = this._getZIndex(group, evaluated);\n        evaluated.size = util.assign({}, group.size, evaluated.size);\n\n        return evaluated;\n    },\n\n    _getZIndex: function(group, port) {\n\n        if (util.isNumber(port.z)) {\n            return port.z;\n        }\n        if (util.isNumber(group.z) || group.z === 'auto') {\n            return group.z;\n        }\n        return 'auto';\n    },\n\n    _createPositionNode: function(group, port) {\n\n        return util.merge({\n            name: 'left',\n            args: {}\n        }, group.position, { args: port.args });\n    },\n\n    _getPosition: function(position, setDefault) {\n\n        var args = {};\n        var positionName;\n\n        if (util.isFunction(position)) {\n            positionName = 'fn';\n            args.fn = position;\n        } else if (util.isString(position)) {\n            positionName = position;\n        } else if (position === undefined) {\n            positionName = setDefault ? 'left' : null;\n        } else if (Array.isArray(position)) {\n            positionName = 'absolute';\n            args.x = position[0];\n            args.y = position[1];\n        } else if (util.isObject(position)) {\n            positionName = position.name;\n            util.assign(args, position.args);\n        }\n\n        var result = { args: args };\n\n        if (positionName) {\n            result.name = positionName;\n        }\n        return result;\n    },\n\n    _getLabel: function(item, setDefaults) {\n\n        var label = item.label || {};\n\n        var ret = label;\n        ret.position = this._getPosition(label.position, setDefaults);\n\n        return ret;\n    }\n};\n\nexport const elementPortPrototype = {\n\n    _initializePorts: function() {\n\n        this._createPortData();\n        this.on('change:ports', function() {\n\n            this._processRemovedPort();\n            this._createPortData();\n        }, this);\n    },\n\n    /**\n     * remove links tied wiht just removed element\n     * @private\n     */\n    _processRemovedPort: function() {\n\n        var current = this.get('ports') || {};\n        var currentItemsMap = {};\n\n        util.toArray(current.items).forEach(function(item) {\n            currentItemsMap[item.id] = true;\n        });\n\n        var previous = this.previous('ports') || {};\n        var removed = {};\n\n        util.toArray(previous.items).forEach(function(item) {\n            if (!currentItemsMap[item.id]) {\n                removed[item.id] = true;\n            }\n        });\n\n        var graph = this.graph;\n        if (graph && !util.isEmpty(removed)) {\n\n            var inboundLinks = graph.getConnectedLinks(this, { inbound: true });\n            inboundLinks.forEach(function(link) {\n\n                if (removed[link.get('target').port]) link.remove();\n            });\n\n            var outboundLinks = graph.getConnectedLinks(this, { outbound: true });\n            outboundLinks.forEach(function(link) {\n\n                if (removed[link.get('source').port]) link.remove();\n            });\n        }\n    },\n\n    /**\n     * @returns {boolean}\n     */\n    hasPorts: function() {\n\n        var ports = this.prop('ports/items');\n        return Array.isArray(ports) && ports.length > 0;\n    },\n\n    /**\n     * @param {string} id\n     * @returns {boolean}\n     */\n    hasPort: function(id) {\n\n        return this.getPortIndex(id) !== -1;\n    },\n\n    /**\n     * @returns {Array<object>}\n     */\n    getPorts: function() {\n\n        return util.cloneDeep(this.prop('ports/items')) || [];\n    },\n\n    /**\n     * @returns {Array<object>}\n     */\n    getGroupPorts: function(groupName) {\n        const groupPorts = util.toArray(this.prop(['ports','items'])).filter(port => port.group === groupName);\n        return util.cloneDeep(groupPorts);\n    },\n\n    /**\n     * @param {string} id\n     * @returns {object}\n     */\n    getPort: function(id) {\n\n        return util.cloneDeep(util.toArray(this.prop('ports/items')).find(function(port) {\n            return port.id && port.id === id;\n        }));\n    },\n\n    /**\n     * @param {string} groupName\n     * @returns {Object<portId, {x: number, y: number, angle: number}>}\n     */\n    getPortsPositions: function(groupName) {\n\n        var portsMetrics = this._portSettingsData.getGroupPortsMetrics(groupName, Rect(this.size()));\n\n        return portsMetrics.reduce(function(positions, metrics) {\n            var transformation = metrics.portTransformation;\n            positions[metrics.portId] = {\n                x: transformation.x,\n                y: transformation.y,\n                angle: transformation.angle\n            };\n            return positions;\n        }, {});\n    },\n\n    /**\n     * @param {string|Port} port port id or port\n     * @returns {number} port index\n     */\n    getPortIndex: function(port) {\n\n        var id = util.isObject(port) ? port.id : port;\n\n        if (!this._isValidPortId(id)) {\n            return -1;\n        }\n\n        return util.toArray(this.prop('ports/items')).findIndex(function(item) {\n            return item.id === id;\n        });\n    },\n\n    /**\n     * @param {object} port\n     * @param {object} [opt]\n     * @returns {joint.dia.Element}\n     */\n    addPort: function(port, opt) {\n\n        if (!util.isObject(port) || Array.isArray(port)) {\n            throw new Error('Element: addPort requires an object.');\n        }\n\n        var ports = util.assign([], this.prop('ports/items'));\n        ports.push(port);\n        this.prop('ports/items', ports, opt);\n\n        return this;\n    },\n\n    /**\n     * @param {string|Port|number} before\n     * @param {object} port\n     * @param {object} [opt]\n     * @returns {joint.dia.Element}\n     */\n    insertPort: function(before, port, opt) {\n        const index = (typeof before === 'number') ? before : this.getPortIndex(before);\n\n        if (!util.isObject(port) || Array.isArray(port)) {\n            throw new Error('dia.Element: insertPort requires an object.');\n        }\n\n        const ports = util.assign([], this.prop('ports/items'));\n        ports.splice(index, 0, port);\n        this.prop('ports/items', ports, opt);\n\n        return this;\n    },\n\n    /**\n     * @param {string} portId\n     * @param {string|object=} path\n     * @param {*=} value\n     * @param {object=} opt\n     * @returns {joint.dia.Element}\n     */\n    portProp: function(portId, path, value, opt) {\n\n        var index = this.getPortIndex(portId);\n\n        if (index === -1) {\n            throw new Error('Element: unable to find port with id ' + portId);\n        }\n\n        var args = Array.prototype.slice.call(arguments, 1);\n        if (Array.isArray(path)) {\n            args[0] = ['ports', 'items', index].concat(path);\n        } else if (util.isString(path)) {\n\n            // Get/set an attribute by a special path syntax that delimits\n            // nested objects by the colon character.\n            args[0] = ['ports/items/', index, '/', path].join('');\n\n        } else {\n\n            args = ['ports/items/' + index];\n            if (util.isPlainObject(path)) {\n                args.push(path);\n                args.push(value);\n            }\n        }\n\n        return this.prop.apply(this, args);\n    },\n\n    _validatePorts: function() {\n\n        var portsAttr = this.get('ports') || {};\n\n        var errorMessages = [];\n        portsAttr = portsAttr || {};\n        var ports = util.toArray(portsAttr.items);\n\n        ports.forEach(function(p) {\n\n            if (typeof p !== 'object') {\n                errorMessages.push('Element: invalid port ', p);\n            }\n\n            if (!this._isValidPortId(p.id)) {\n                p.id = this.generatePortId();\n            }\n        }, this);\n\n        if (util.uniq(ports, 'id').length !== ports.length) {\n            errorMessages.push('Element: found id duplicities in ports.');\n        }\n\n        return errorMessages;\n    },\n\n    generatePortId: function() {\n        return this.generateId();\n    },\n\n    /**\n     * @param {string} id port id\n     * @returns {boolean}\n     * @private\n     */\n    _isValidPortId: function(id) {\n\n        return id !== null && id !== undefined && !util.isObject(id);\n    },\n\n    addPorts: function(ports, opt) {\n\n        if (ports.length) {\n            this.prop('ports/items', util.assign([], this.prop('ports/items')).concat(ports), opt);\n        }\n\n        return this;\n    },\n\n    removePort: function(port, opt) {\n        const options = opt || {};\n        const index = this.getPortIndex(port);\n        if (index !== -1) {\n            const ports = util.assign([], this.prop(['ports', 'items']));\n            ports.splice(index, 1);\n            options.rewrite = true;\n            this.startBatch('port-remove');\n            this.prop(['ports', 'items'], ports, options);\n            this.stopBatch('port-remove');\n        }\n        return this;\n    },\n\n    removePorts: function(portsForRemoval, opt) {\n        let options, newPorts;\n        if (Array.isArray(portsForRemoval)) {\n            options = opt || {};\n            if (portsForRemoval.length === 0) return this.this;\n            const currentPorts = util.assign([], this.prop(['ports', 'items']));\n            newPorts = currentPorts.filter(function(cp) {\n                return !portsForRemoval.some(function(rp) {\n                    const rpId = util.isObject(rp) ? rp.id : rp;\n                    return cp.id === rpId;\n                });\n            });\n        } else {\n            options = portsForRemoval || {};\n            newPorts = [];\n        }\n        this.startBatch('port-remove');\n        options.rewrite = true;\n        this.prop(['ports', 'items'], newPorts, options);\n        this.stopBatch('port-remove');\n        return this;\n    },\n\n    /**\n     * @private\n     */\n    _createPortData: function() {\n\n        var err = this._validatePorts();\n\n        if (err.length > 0) {\n            this.set('ports', this.previous('ports'));\n            throw new Error(err.join(' '));\n        }\n\n        var prevPortData;\n\n        if (this._portSettingsData) {\n\n            prevPortData = this._portSettingsData.getPorts();\n        }\n\n        this._portSettingsData = new PortData(this.get('ports'));\n\n        var curPortData = this._portSettingsData.getPorts();\n\n        if (prevPortData) {\n\n            var added = curPortData.filter(function(item) {\n                if (!prevPortData.find(function(prevPort) {\n                    return prevPort.id === item.id;\n                })) {\n                    return item;\n                }\n            });\n\n            var removed = prevPortData.filter(function(item) {\n                if (!curPortData.find(function(curPort) {\n                    return curPort.id === item.id;\n                })) {\n                    return item;\n                }\n            });\n\n            if (removed.length > 0) {\n                this.trigger('ports:remove', this, removed);\n            }\n\n            if (added.length > 0) {\n                this.trigger('ports:add', this, added);\n            }\n        }\n    }\n};\n\nexport const elementViewPortPrototype = {\n\n    portContainerMarkup: 'g',\n    portMarkup: [{\n        tagName: 'circle',\n        selector: 'circle',\n        attributes: {\n            'r': 10,\n            'fill': '#FFFFFF',\n            'stroke': '#000000'\n        }\n    }],\n    portLabelMarkup: [{\n        tagName: 'text',\n        selector: 'text',\n        attributes: {\n            'fill': '#000000'\n        }\n    }],\n    /** @type {Object<string, {portElement: Vectorizer, portLabelElement: Vectorizer}>} */\n    _portElementsCache: null,\n\n    /**\n     * @private\n     */\n    _initializePorts: function() {\n        this._cleanPortsCache();\n    },\n\n    /**\n     * @typedef {Object} Port\n     *\n     * @property {string} id\n     * @property {Object} position\n     * @property {Object} label\n     * @property {Object} attrs\n     * @property {string} markup\n     * @property {string} group\n     */\n\n    /**\n     * @private\n     */\n    _refreshPorts: function() {\n\n        this._removePorts();\n        this._cleanPortsCache();\n        this._renderPorts();\n    },\n\n    _cleanPortsCache: function() {\n        this._portElementsCache = {};\n    },\n\n    /**\n     * @private\n     */\n    _renderPorts: function() {\n\n        // references to rendered elements without z-index\n        var elementReferences = [];\n        var elem = this._getContainerElement();\n\n        for (var i = 0, count = elem.node.childNodes.length; i < count; i++) {\n            elementReferences.push(elem.node.childNodes[i]);\n        }\n\n        var portsGropsByZ = util.groupBy(this.model._portSettingsData.getPorts(), 'z');\n        var withoutZKey = 'auto';\n\n        // render non-z first\n        util.toArray(portsGropsByZ[withoutZKey]).forEach(function(port) {\n            var portElement = this._getPortElement(port);\n            elem.append(portElement);\n            elementReferences.push(portElement);\n        }, this);\n\n        var groupNames = Object.keys(portsGropsByZ);\n        for (var k = 0; k < groupNames.length; k++) {\n            var groupName = groupNames[k];\n            if (groupName !== withoutZKey) {\n                var z = parseInt(groupName, 10);\n                this._appendPorts(portsGropsByZ[groupName], z, elementReferences);\n            }\n        }\n\n        this._updatePorts();\n    },\n\n    /**\n     * @returns {V}\n     * @private\n     */\n    _getContainerElement: function() {\n\n        return this.rotatableNode || this.vel;\n    },\n\n    /**\n     * @param {Array<Port>}ports\n     * @param {number} z\n     * @param refs\n     * @private\n     */\n    _appendPorts: function(ports, z, refs) {\n\n        var containerElement = this._getContainerElement();\n        var portElements = util.toArray(ports).map(this._getPortElement, this);\n\n        if (refs[z] || z < 0) {\n            V(refs[Math.max(z, 0)]).before(portElements);\n        } else {\n            containerElement.append(portElements);\n        }\n    },\n\n    /**\n     * Try to get element from cache,\n     * @param port\n     * @returns {*}\n     * @private\n     */\n    _getPortElement: function(port) {\n\n        if (this._portElementsCache[port.id]) {\n            return this._portElementsCache[port.id].portElement;\n        }\n        return this._createPortElement(port);\n    },\n\n    findPortNode: function(portId, selector) {\n        const portCache = this._portElementsCache[portId];\n        if (!portCache) return null;\n        const portRoot = portCache.portContentElement.node;\n        const portSelectors = portCache.portContentSelectors;\n        const [node = null] = this.findBySelector(selector, portRoot, portSelectors);\n        return node;\n    },\n\n    /**\n     * @private\n     */\n    _updatePorts: function() {\n\n        // layout ports without group\n        this._updatePortGroup(undefined);\n        // layout ports with explicit group\n        var groupsNames = Object.keys(this.model._portSettingsData.groups);\n        groupsNames.forEach(this._updatePortGroup, this);\n    },\n\n    /**\n     * @private\n     */\n    _removePorts: function() {\n        util.invoke(this._portElementsCache, 'portElement.remove');\n    },\n\n    /**\n     * @param {Port} port\n     * @returns {V}\n     * @private\n     */\n    _createPortElement: function(port) {\n\n        let portElement;\n        let labelElement;\n        let labelSelectors;\n        let portSelectors;\n\n        var portContainerElement = V(this.portContainerMarkup).addClass('joint-port');\n\n        var portMarkup = this._getPortMarkup(port);\n        if (Array.isArray(portMarkup)) {\n            var portDoc = this.parseDOMJSON(portMarkup, portContainerElement.node);\n            var portFragment = portDoc.fragment;\n            if (portFragment.childNodes.length > 1) {\n                portElement = V('g').append(portFragment);\n            } else {\n                portElement = V(portFragment.firstChild);\n            }\n            portSelectors = portDoc.selectors;\n        } else {\n            portElement = V(portMarkup);\n            if (Array.isArray(portElement)) {\n                portElement = V('g').append(portElement);\n            }\n        }\n\n        if (!portElement) {\n            throw new Error('ElementView: Invalid port markup.');\n        }\n\n        portElement.attr({\n            'port': port.id,\n            'port-group': port.group\n        });\n\n        const labelMarkupDef = this._getPortLabelMarkup(port.label);\n        if (Array.isArray(labelMarkupDef)) {\n            // JSON Markup\n            const { fragment, selectors } = this.parseDOMJSON(labelMarkupDef, portContainerElement.node);\n            const childCount = fragment.childNodes.length;\n            if (childCount > 0) {\n                labelSelectors = selectors;\n                labelElement = (childCount === 1) ? V(fragment.firstChild) : V('g').append(fragment);\n            }\n        } else {\n            // String Markup\n            labelElement = V(labelMarkupDef);\n            if (Array.isArray(labelElement)) {\n                labelElement = V('g').append(labelElement);\n            }\n        }\n\n        var portContainerSelectors;\n        if (portSelectors && labelSelectors) {\n            for (var key in labelSelectors) {\n                if (portSelectors[key] && key !== this.selector) throw new Error('ElementView: selectors within port must be unique.');\n            }\n            portContainerSelectors = util.assign({}, portSelectors, labelSelectors);\n        } else {\n            portContainerSelectors = portSelectors || labelSelectors;\n        }\n\n        portContainerElement.append(portElement.addClass('joint-port-body'));\n        if (labelElement) {\n            portContainerElement.append(labelElement.addClass('joint-port-label'));\n        }\n\n        this._portElementsCache[port.id] = {\n            portElement: portContainerElement,\n            portLabelElement: labelElement,\n            portSelectors: portContainerSelectors,\n            portLabelSelectors: labelSelectors,\n            portContentElement: portElement,\n            portContentSelectors: portSelectors\n        };\n\n        return portContainerElement;\n    },\n\n    /**\n     * @param {string=} groupName\n     * @private\n     */\n    _updatePortGroup: function(groupName) {\n\n        var elementBBox = Rect(this.model.size());\n        var portsMetrics = this.model._portSettingsData.getGroupPortsMetrics(groupName, elementBBox);\n\n        for (var i = 0, n = portsMetrics.length; i < n; i++) {\n            var metrics = portsMetrics[i];\n            var portId = metrics.portId;\n            var cached = this._portElementsCache[portId] || {};\n            var portTransformation = metrics.portTransformation;\n            this.applyPortTransform(cached.portElement, portTransformation);\n            this.updateDOMSubtreeAttributes(cached.portElement.node, metrics.portAttrs, {\n                rootBBox: new Rect(metrics.portSize),\n                selectors: cached.portSelectors\n            });\n\n            var labelTransformation = metrics.labelTransformation;\n            if (labelTransformation && cached.portLabelElement) {\n                this.applyPortTransform(cached.portLabelElement, labelTransformation, (-portTransformation.angle || 0));\n                this.updateDOMSubtreeAttributes(cached.portLabelElement.node, labelTransformation.attrs, {\n                    rootBBox: new Rect(metrics.labelSize),\n                    selectors: cached.portLabelSelectors\n                });\n            }\n        }\n    },\n\n    /**\n     * @param {Vectorizer} element\n     * @param {{dx:number, dy:number, angle: number, attrs: Object, x:number: y:number}} transformData\n     * @param {number=} initialAngle\n     * @constructor\n     */\n    applyPortTransform: function(element, transformData, initialAngle) {\n\n        var matrix = V.createSVGMatrix()\n            .rotate(initialAngle || 0)\n            .translate(transformData.x || 0, transformData.y || 0)\n            .rotate(transformData.angle || 0);\n\n        element.transform(matrix, { absolute: true });\n    },\n\n    /**\n     * @param {Port} port\n     * @returns {string}\n     * @private\n     */\n    _getPortMarkup: function(port) {\n\n        return port.markup || this.model.get('portMarkup') || this.model.portMarkup || this.portMarkup;\n    },\n\n    /**\n     * @param {Object} label\n     * @returns {string}\n     * @private\n     */\n    _getPortLabelMarkup: function(label) {\n\n        return label.markup || this.model.get('portLabelMarkup') || this.model.portLabelMarkup || this.portLabelMarkup;\n    }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}