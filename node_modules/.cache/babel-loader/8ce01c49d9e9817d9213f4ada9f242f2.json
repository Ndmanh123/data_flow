{"ast":null,"code":"// import '@/../public/vendor/jointJS/js/lib/backbone.js'\n// import '@/../public/vendor/jointJS/js/lib/jquery.min.js'\n// import '@/../public/vendor/jointJS/js/lib/lodash.min.js'\n// import '@/../public/vendor/jointJS/js/lib/rappid.js'\n// import '@/../public/vendor/jointJS/js/lib/backbone.min.js'\nrequire('@/../public/vendor/jointJS/js/lib/rappid.js'); // import { Options, Vue } from 'vue-class-component';\n\n\nexport default {\n  mounted() {\n    var rectangle = new joint.shapes.standard.Rectangle({\n      z: 1,\n      size: {\n        width: 60,\n        height: 60\n      },\n      removable: false,\n      attrs: {\n        root: {\n          magnet: false\n        },\n        body: {\n          fill: '#FFFFFF',\n          stroke: '#A0A0A0'\n        }\n      },\n      ports: {\n        items: [{\n          id: 'out-port',\n          group: 'out'\n        }],\n        groups: {\n          out: {\n            markup: [{\n              tagName: 'circle',\n              selector: 'portBody'\n            }],\n            position: {\n              name: 'right'\n            },\n            attrs: {\n              portBody: {\n                r: 10,\n                magnet: 'active',\n                fill: '#187BD3',\n                stroke: '#187BD3'\n              }\n            }\n          }\n        }\n      }\n    });\n    var stencilShapes = [rectangle.position(20, 10)];\n    let graph = new joint.dia.Graph();\n    var paper = new joint.dia.Paper({\n      el: document.getElementById('paper'),\n      width: 800,\n      height: 600,\n      model: graph,\n      async: true,\n      sorting: joint.dia.Paper.sorting.APPROX,\n      linkPinning: false,\n      background: {\n        color: '#F3F7F6'\n      },\n      defaultConnectionPoint: {\n        name: 'boundary'\n      },\n      validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        return view1 !== view2;\n      },\n      highlighting: {\n        'default': {\n          name: 'stroke',\n          options: {\n            padding: 8,\n            attrs: {\n              'stroke': '#187BD3',\n              'stroke-width': 3\n            }\n          }\n        }\n      },\n      defaultLink: function () {\n        return new joint.shapes.standard.Link({\n          attrs: {\n            line: {\n              stroke: '#707070'\n            }\n          }\n        });\n      }\n    });\n    let rect = new joint.shapes.basic.Rect({\n      position: {\n        x: 100,\n        y: 30\n      },\n      size: {\n        width: 100,\n        height: 30\n      },\n      attrs: {\n        rect: {\n          fill: 'blue'\n        },\n        text: {\n          text: 'my box',\n          fill: 'white'\n        }\n      }\n    });\n    let rect2 = rect.clone();\n    rect2.translate(300);\n    let link = new joint.dia.Link({\n      source: {\n        id: rect.id\n      },\n      target: {\n        id: rect2.id\n      }\n    });\n    graph.addCells([rect, rect2, link]);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["require","mounted","rectangle","joint","shapes","standard","Rectangle","z","size","width","height","removable","attrs","root","magnet","body","fill","stroke","ports","items","id","group","groups","out","markup","tagName","selector","position","name","portBody","r","stencilShapes","graph","dia","Graph","paper","Paper","el","document","getElementById","model","async","sorting","APPROX","linkPinning","background","color","defaultConnectionPoint","validateConnection","view1","_magnet1","view2","_magnet2","highlighting","options","padding","defaultLink","Link","line","rect","basic","Rect","x","y","text","rect2","clone","translate","link","source","target","addCells"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\App.vue"],"sourcesContent":["\n<template>\n<h1>Home</h1>\n  <div class=\"canvas\" ref=\"canvas\"></div>\n  \n  <div id=\"app\">\n    <div class=\"btn_contain\">\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\n        <button id=\"btn-center\" class=\"btn\">center</button>\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\n    </div>\n    <div id=\"stencil\"></div>\n    \n    <div id=\"paper\"></div>\n    <div id=\"navigator\"></div>\n    \n    \n        </div>\n</template>\n\n<script>\n\n// import '@/../public/vendor/jointJS/js/lib/backbone.js'\n// import '@/../public/vendor/jointJS/js/lib/jquery.min.js'\n// import '@/../public/vendor/jointJS/js/lib/lodash.min.js'\n// import '@/../public/vendor/jointJS/js/lib/rappid.js'\n// import '@/../public/vendor/jointJS/js/lib/backbone.min.js'\n\nrequire('@/../public/vendor/jointJS/js/lib/rappid.js');\n\n\n// import { Options, Vue } from 'vue-class-component';\nexport default {\n  mounted() {\n      var rectangle = new joint.shapes.standard.Rectangle({\n        z: 1,\n        size: {\n            width: 60,\n            height: 60\n        },\n        removable: false,\n        attrs: {\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0'\n            }\n        },\n        ports: {\n            items: [{\n                id: 'out-port',\n                group: 'out'\n            }],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 10,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n                        }\n                    }\n                }\n            }\n        }\n    });var stencilShapes = [\n        rectangle.position(20, 10),\n        \n    ];\n            let graph = new joint.dia.Graph;\n\n            var paper = new joint.dia.Paper({\n        el: document.getElementById('paper'),\n        width: 800,\n        height: 600,\n        model: graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        linkPinning: false,\n        background: { color: '#F3F7F6' },\n        defaultConnectionPoint: { name: 'boundary' },\n        validateConnection: function(view1, _magnet1, view2, _magnet2) {\n            // Do not allow loop links (Element to Link, Element A to Element B is valid).\n            return view1 !== view2;\n        },\n        highlighting: {\n            'default': {\n                name: 'stroke',\n                options: {\n                    padding: 8,\n                    attrs: {\n                        'stroke': '#187BD3',\n                        'stroke-width': 3\n                    }\n                }\n            }\n        },\n        defaultLink: function() {\n            return new joint.shapes.standard.Link({\n                attrs: {\n                    line: {\n                        stroke: '#707070'\n                    }\n                }\n            });\n        }\n    });\n\n\n            let rect = new joint.shapes.basic.Rect({\n                position: { x: 100, y: 30 },\n                size: { width: 100, height: 30 },\n                attrs: { rect: { fill: 'blue' }, text: { text: 'my box', fill: 'white' } }\n            });\n\n            let rect2 = rect.clone();\n            rect2.translate(300);\n\n            let link = new joint.dia.Link({\n                source: { id: rect.id },\n                target: { id: rect2.id }\n            });\n\n            graph.addCells([rect, rect2, link]);\n        }\n  }\n\n  \n\n</script>\n\n<style >\n@import \"@/../public/vendor/jointJS/build/package/rappid.css\";\n@import \"@/css/data_flow.css\";\n@import \"@/css/lib/rappid.min.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}