{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"main\"\n};\nconst _hoisted_2 = {\n  ref: \"Toolbar\",\n  id: \"Toolbar\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"btn-zoomout\",\n  class: \"btn\"\n}, \"zoom out\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"btn-zoomin\",\n  class: \"btn\"\n}, \"zoom in\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"btn-center\",\n  class: \"btn\"\n}, \"center\", -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"btn-center-content\",\n  class: \"btn\"\n}, \"center content\", -1\n/* HOISTED */\n);\n\nconst _hoisted_7 = [_hoisted_3, _hoisted_4, _hoisted_5, _hoisted_6];\nconst _hoisted_8 = {\n  ref: \"nodeStencile\",\n  id: \"stencil\"\n};\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"paper\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"navigator\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, _hoisted_7, 512\n  /* NEED_PATCH */\n  ), _createElementVNode(\"div\", _hoisted_8, null, 512\n  /* NEED_PATCH */\n  ), _hoisted_9, _hoisted_10]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;;;EACDC,GAAG,EAAC;EAAUD,EAAE,EAAC;;;gCACpBE,oBAAsD,QAAtD,EAAsD;EAA9CF,EAAE,EAAC,aAA2C;EAA7BG,KAAK,EAAC;AAAuB,CAAtD,EAAqC,UAArC,EAA6C;AAAA;AAA7C;;gCACAD,oBAAoD,QAApD,EAAoD;EAA5CF,EAAE,EAAC,YAAyC;EAA5BG,KAAK,EAAC;AAAsB,CAApD,EAAoC,SAApC,EAA2C;AAAA;AAA3C;;gCACAD,oBAAmD,QAAnD,EAAmD;EAA3CF,EAAE,EAAC,YAAwC;EAA3BG,KAAK,EAAC;AAAqB,CAAnD,EAAoC,QAApC,EAA0C;AAAA;AAA1C;;gCACAD,oBAAmE,QAAnE,EAAmE;EAA3DF,EAAE,EAAC,oBAAwD;EAAnCG,KAAK,EAAC;AAA6B,CAAnE,EAA4C,gBAA5C,EAA0D;AAAA;AAA1D;;oBAHAC,YACAC,YACAC,YACAC;;EAEGN,GAAG,EAAC;EAAeD,EAAE,EAAC;;;gCAE3BE,oBAAsB,KAAtB,EAAsB;EAAjBF,EAAE,EAAC;AAAc,CAAtB,EAAe,IAAf,EAAe;AAAA;AAAf;;iCACAE,oBAA0B,KAA1B,EAA0B;EAArBF,EAAE,EAAC;AAAkB,CAA1B,EAAmB,IAAnB,EAAmB;AAAA;AAAnB;;;uBAVFQ,oBAWM,KAXN,cAWM,CAVJN,oBAKM,KALN,cAKMO,UALN,EAKM;EAAA;EALN,CAUI,EAJJP,oBAA2C,KAA3C,cAA2C,IAA3C,EAA2C;EAAA;EAA3C,CAII,EAFJQ,UAEI,EADJC,WACI,CAXN","names":["id","ref","_createElementVNode","class","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_createElementBlock","_hoisted_7","_hoisted_9","_hoisted_10"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\components\\dataflow.vue"],"sourcesContent":["<template>\r\n  <div id=\"main\">\r\n    <div ref=\"Toolbar\" id=\"Toolbar\">\r\n      <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\r\n      <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\r\n      <button id=\"btn-center\" class=\"btn\">center</button>\r\n      <button id=\"btn-center-content\" class=\"btn\">center content</button>\r\n    </div>\r\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\r\n\r\n    <div id=\"paper\"></div>\r\n    <div id=\"navigator\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"DataFlow\",\r\n  props: {\r\n    width: {\r\n      type: [String, Number],\r\n      default: 800,\r\n    },\r\n    height: {\r\n      type: [String, Number],\r\n      default: 250,\r\n    },\r\n    gridSize: {\r\n      type: Number,\r\n      default: 10,\r\n    },\r\n    drawGrid: {\r\n      type: [Object, Boolean],\r\n      default: true,\r\n    },\r\n\r\n    highLightLinks: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    nodes: {\r\n      type: [Object, Boolean],\r\n      default: [\r\n        {\r\n          id: \"j_18\",\r\n          name: \"load\",\r\n          position: { x: 250, y: 250 },\r\n          type: \"Rectangle\",\r\n        },\r\n        {\r\n          id: \"j_19\",\r\n          name: \"filter\",\r\n          position: { x: 550, y: 250 },\r\n          type: \"Rectangle\",\r\n        },\r\n      ],\r\n    },\r\n    links: {\r\n      type: [Object, Boolean],\r\n      default:\r\n        // false,\r\n        {\r\n          source: \"j_18\",\r\n          target: \"j_19\",\r\n        },\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      stencilShapes: [],\r\n      selectionNode: null,\r\n      selectedElement: null,\r\n      selectedLink: null,\r\n\r\n      //check ctrl shift\r\n      ctrlDown: false,\r\n      shiftDown: false,\r\n      color: \"rgb(255 136 0)\",\r\n      arr: [\r\n        \"filter\",\r\n        \"formula\",\r\n        \"join\",\r\n        \"load\",\r\n        \"pivot\",\r\n        \"sample\",\r\n        \"script\",\r\n        \"select\",\r\n        \"sort\",\r\n        \"summarize\",\r\n        \"transposeTable\",\r\n        \"union\",\r\n        \"weightAvg\",\r\n      ],\r\n    };\r\n  },\r\n  created() {\r\n    this.graph = new joint.dia.Graph();\r\n  },\r\n  mounted() {\r\n    this.initPaper();\r\n  },\r\n  methods: {\r\n    center() {\r\n      _.bind(self.paperScroller.centerContent, self.paperScroller);\r\n    },\r\n    initPaper() {\r\n      let graph = this.graph;\r\n      this.commandManager = new joint.dia.CommandManager({\r\n        graph: graph,\r\n        cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\r\n          return !options.ignoreCommandManager;\r\n        },\r\n      });\r\n      this.paper = new joint.dia.Paper({\r\n        width: this.width,\r\n        height: this.height,\r\n        model: this.graph,\r\n        async: true,\r\n        sorting: joint.dia.Paper.sorting.APPROX,\r\n        gridSize: this.gridSize,\r\n        drawGrid: this.drawGrid,\r\n        restrictTranslate: true,\r\n        stopDelegation: false,\r\n\r\n        interactive: { vertexAdd: false },\r\n        // background: { color: '#F3F7F6' },\r\n        // defaultConnectionPoint: { name: 'boundary' },\r\n        // defaultConnector: {\r\n        //     name: \"rounded\"\r\n        //   },\r\n        //   defaultRouter: {\r\n        //     name: \"manhattan\",\r\n        //     args: {\r\n        //       step: 10,\r\n        //       endDirections: [\"bottom\"],\r\n        //       startDirections: [\"top\"],\r\n        //       padding: { bottom: 20 }\r\n        //     }\r\n        //   },\r\n        snapLinks: {\r\n          radius: 75,\r\n        },\r\n        linkPinning: false,\r\n        multiLinks: false,\r\n        defaultRouter: { name: \"manhattan\", args: { padding: 10 } },\r\n        defaultConnector: { name: \"rounded\" },\r\n        validateConnection: function (\r\n          cellViewS,\r\n          magnetS,\r\n          cellViewT,\r\n          magnetT,\r\n          end,\r\n          linkView\r\n        ) {\r\n          // Prevent linking from input ports.\r\n          if (magnetS && magnetS.getAttribute(\"port-group\") === \"in\")\r\n            return false;\r\n          // Prevent linking from output ports to input ports within one element.\r\n          if (cellViewS === cellViewT) return false;\r\n          // Prevent linking to input ports.\r\n          return (\r\n            (magnetT && magnetT.getAttribute(\"port-group\") === \"in\") ||\r\n            (cellViewS.model.get(\"type\") === \"qad.Question\" &&\r\n              cellViewT.model.get(\"type\") === \"qad.Answer\")\r\n          );\r\n        },\r\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\r\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\r\n        //     return view1 !== view2;\r\n        // },\r\n        interactive: {\r\n          linkMove: true,\r\n          labelMove: true,\r\n          arrowheadMove: true,\r\n          vertexMove: false,\r\n          vertexAdd: false,\r\n          vertexRemove: false,\r\n          useLinkTools: false,\r\n        },\r\n        defaultLink: function () {\r\n          return new joint.shapes.standard.Link({\r\n            attrs: {\r\n              z: 1,\r\n              line: {\r\n                connection: true,\r\n                stroke: \"#707070\",\r\n                strokeLinejoin: \"round\",\r\n              },\r\n              wrapper: {\r\n                connection: true,\r\n                strokeWidth: 10,\r\n                strokeLinejoin: \"round\",\r\n              },\r\n            },\r\n\r\n            markup: [\r\n              {\r\n                tagName: \"path\",\r\n                selector: \"wrapper\",\r\n                attributes: {\r\n                  fill: \"none\",\r\n\r\n                  stroke: \"transparent\",\r\n                },\r\n              },\r\n              {\r\n                tagName: \"path\",\r\n                selector: \"line\",\r\n                attributes: {\r\n                  fill: \"none\",\r\n                },\r\n              },\r\n            ],\r\n          });\r\n        },\r\n      });\r\n      var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\r\n      this.toolsView = new joint.dia.ToolsView({\r\n        tools: [\r\n          // verticesTool, segmentsTool,\r\n          // sourceArrowheadTool,\r\n          targetArrowheadTool,\r\n          // sourceAnchorTool, targetAnchorTool,\r\n          // boundaryTool, removeButton\r\n        ],\r\n      });\r\n      // var linkView = this.link.findView(this.paper);\r\n      // linkView.addTools(this.toolsView);\r\n      this.paperScroller = new joint.ui.PaperScroller({\r\n        paper: this.paper,\r\n        autoResizePaper: true,\r\n        scrollWhileDragging: true,\r\n        cursor: \"grab\",\r\n      });\r\n      this.selection = new joint.ui.Selection({\r\n        theme: \"material\",\r\n        paper: this.paper,\r\n        useModelGeometry: true,\r\n        allowTranslate: true,\r\n      });\r\n      this.toolbar = new joint.ui.Toolbar({\r\n        // initialize tools with default settings\r\n        tools: [\"zoomIn\", \"zoomOut\", \"zoomToFit\", \"zoomSlider\", \"undo\", \"redo\"],\r\n        references: {\r\n          paperScroller: this.paperScroller,\r\n          commandManager: this.commandManager,\r\n        },\r\n      });\r\n      document.getElementById(\"Toolbar\").appendChild(this.toolbar.render().el);\r\n\r\n      this.snaplines = new joint.ui.Snaplines({ paper: this.paper });\r\n      this.snaplines.startListening();\r\n      //render paper\r\n      document\r\n        .getElementById(\"paper\")\r\n        .appendChild(this.paperScroller.render().el);\r\n      //render paperScroller\r\n      this.highlighters = joint.highlighters;\r\n      this.paperScroller.$el\r\n        .css({ width: 900, height: 600 })\r\n        .appendTo(\"#paper\");\r\n\r\n      this.addStencil();\r\n      this.handlePaperEvents();\r\n      this.btnHandler();\r\n      this.selection.collection.reset(graph.getElements());\r\n      this.render();\r\n      this.paperScroller.center({ padding: 200 });\r\n      // this.paperScroller.centerContent();\r\n      // this.paperScroller.adjustPaper();\r\n      // this.paperScroller.zoomToFit({ padding: 200 });\r\n    },\r\n    jsUcfirst(string) {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n    },\r\n    stencilRenderHandler(\r\n      positionX,\r\n      positionY,\r\n      arr,\r\n      elNoInPorts = \"\",\r\n      spaceBetweenElToX = 0,\r\n      spaceBetweenElToY = 0\r\n    ) {\r\n      this.customEl = joint.dia.Element.define(\"standard.Rectangle\", {\r\n        z: 1,\r\n        size: {\r\n          width: 44,\r\n          height: 35,\r\n        },\r\n        removable: false,\r\n        attrs: {\r\n          image: {\r\n            x: 5,\r\n            y: 5,\r\n            width: \"calc(w-10)\",\r\n            height: \"calc(h-10 )\",\r\n          },\r\n          root: {\r\n            magnet: false,\r\n          },\r\n          body: {\r\n            fill: \"#FFFFFF\",\r\n            stroke: \"#A0A0A0\",\r\n            width: \"calc(w)\",\r\n            height: \"calc(h)\",\r\n            strokeWidth: 2,\r\n            rx: 5,\r\n            ry: 5,\r\n          },\r\n        },\r\n        ports: {\r\n          items: [\r\n            {\r\n              id: \"out-port\",\r\n              group: \"out\",\r\n            },\r\n            {\r\n              id: \"in-port\",\r\n              group: \"in\",\r\n            },\r\n          ],\r\n          groups: {\r\n            out: {\r\n              markup: [\r\n                {\r\n                  tagName: \"circle\",\r\n                  selector: \"portBody\",\r\n                },\r\n              ],\r\n              position: {\r\n                name: \"right\",\r\n              },\r\n              attrs: {\r\n                portBody: {\r\n                  r: 5,\r\n                  magnet: \"active\",\r\n                  fill: \"#187BD3\",\r\n                  stroke: \"#187BD3\",\r\n                },\r\n              },\r\n            },\r\n            in: {\r\n              markup: [\r\n                {\r\n                  tagName: \"circle\",\r\n                  selector: \"portBody\",\r\n                },\r\n              ],\r\n              position: {\r\n                name: \"left\",\r\n              },\r\n              attrs: {\r\n                portBody: {\r\n                  r: 5,\r\n                  magnet: \"passive\",\r\n                  fill: \"#FFFFFF\",\r\n                  stroke: \"#187BD3\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        markup: [\r\n          {\r\n            tagName: \"rect\",\r\n            selector: \"body\",\r\n          },\r\n          {\r\n            tagName: \"image\",\r\n            selector: \"image\",\r\n          },\r\n          {\r\n            tagName: \"ports\",\r\n            selector: \"ports\",\r\n          },\r\n        ],\r\n      });\r\n      this.customElNoInPorts = joint.dia.Element.define(\"standard.Rectangle\", {\r\n        z: 1,\r\n        theme: \"material\",\r\n        size: {\r\n          width: 44,\r\n          height: 35,\r\n        },\r\n        removable: false,\r\n        attrs: {\r\n          image: {\r\n            x: 5,\r\n            y: 5,\r\n            width: \"calc(w-10)\",\r\n            height: \"calc(h-10 )\",\r\n          },\r\n          root: {\r\n            magnet: false,\r\n          },\r\n          body: {\r\n            fill: \"#FFFFFF\",\r\n            stroke: \"#A0A0A0\",\r\n            width: \"calc(w)\",\r\n            height: \"calc(h)\",\r\n            strokeWidth: 2,\r\n          },\r\n          line: {\r\n            connection: true,\r\n            stroke: \"#333333\",\r\n            strokeWidth: 2,\r\n            strokeLinejoin: \"round\",\r\n            targetMarker: {\r\n              type: \"path\",\r\n              d: \"M 10 -5 0 0 10 5 z\",\r\n            },\r\n          },\r\n        },\r\n        ports: {\r\n          items: [\r\n            {\r\n              id: \"out-port\",\r\n              group: \"out\",\r\n            },\r\n          ],\r\n          groups: {\r\n            out: {\r\n              markup: [\r\n                {\r\n                  tagName: \"circle\",\r\n                  selector: \"portBody\",\r\n                },\r\n              ],\r\n              position: {\r\n                name: \"right\",\r\n              },\r\n              attrs: {\r\n                portBody: {\r\n                  r: 5,\r\n                  magnet: \"active\",\r\n                  fill: \"#187BD3\",\r\n                  stroke: \"#187BD3\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        markup: [\r\n          {\r\n            tagName: \"rect\",\r\n            selector: \"body\",\r\n          },\r\n          {\r\n            tagName: \"image\",\r\n            selector: \"image\",\r\n          },\r\n          {\r\n            tagName: \"ports\",\r\n            selector: \"ports\",\r\n          },\r\n        ],\r\n      });\r\n      arr.forEach((element) => {\r\n        //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\r\n        let elementName = this.jsUcfirst(element);\r\n        if (elementName === this.jsUcfirst(elNoInPorts)) {\r\n          element = new this.customElNoInPorts();\r\n        } else {\r\n          element = new this.customEl();\r\n        }\r\n        element.prop(\r\n          \"attrs/image/xlinkHref\",\r\n          require(`../assets/${elementName}.svg`)\r\n        );\r\n        this.stencilShapes.push(element.position(positionX, positionY));\r\n        if (spaceBetweenElToX > 0) {\r\n          positionX += element.attributes.size.width + spaceBetweenElToX;\r\n        }\r\n        if (spaceBetweenElToY > 0) {\r\n          positionY += element.attributes.size.height + spaceBetweenElToY;\r\n        }\r\n      });\r\n    },\r\n\r\n    addStencil() {\r\n      let graph = this.graph;\r\n      let paper = this.paper;\r\n      var stencil = new joint.ui.Stencil({\r\n        paper: this.paperScroller,\r\n        width: 900,\r\n        height: 60,\r\n        dropAnimation: { duration: 200, easing: \"swing\" },\r\n      });\r\n\r\n      this.stencilRenderHandler(20, 20, this.arr, \"load\", 16);\r\n      document.getElementById(\"stencil\").appendChild(stencil.render().el);\r\n      stencil.load(this.stencilShapes);\r\n    },\r\n    getElementPredecessorLinks(el) {\r\n      let graph = this.graph;\r\n\r\n      return graph\r\n        .getSubgraph([el, ...graph.getPredecessors(el)])\r\n        .filter((cell) => cell.isLink());\r\n    },\r\n    highlightCell(cell) {\r\n      let self = this;\r\n      if (cell) {\r\n        self.highlighters.addClass.add(\r\n          cell.findView(self.paper),\r\n          cell.isElement() ? \"body\" : \"line\",\r\n          \"selection\",\r\n          { className: \"selection\" }\r\n        );\r\n      } else {\r\n        return;\r\n      }\r\n    },\r\n    unhighlightCell(cell) {\r\n      let self = this;\r\n      if (cell) {\r\n        self.highlighters.addClass.remove(\r\n          cell.findView(self.paper),\r\n          \"selection\"\r\n        );\r\n      } else {\r\n        return;\r\n      }\r\n    },\r\n    selectElement(el) {\r\n      let self = this;\r\n      let graph = self.graph;\r\n      if (self.selectionNode === el) return;\r\n      if (self.selectionNode) {\r\n        self.unhighlightCell(self.selectionNode);\r\n        graph.getLinks().forEach((link) => self.unhighlightCell(link));\r\n      }\r\n      if (el) {\r\n        self.highlightCell(el);\r\n        self.getElementPredecessorLinks(el).forEach((link) => {\r\n          self.highlightCell(link);\r\n          link.toFront({ ignoreCommandManager: true });\r\n        });\r\n        self.selectionNode = el;\r\n      } else {\r\n        self.selectionNode = null;\r\n      }\r\n    },\r\n    addHalo(cellView) {\r\n      var halo = new joint.ui.Halo({\r\n        cellView: cellView,\r\n        type: \"toolbar\",\r\n        boxContent: false, // bang phia duoi cell cho biet tọa độ height width và angle\r\n      });\r\n      halo.removeHandle(\"resize\");\r\n      halo.removeHandle(\"rotate\");\r\n      halo.removeHandle(\"direction\");\r\n      halo.render();\r\n    },\r\n\r\n    handlePaperEvents() {\r\n      let self = this;\r\n      let paper = self.paper;\r\n      let graph = self.graph;\r\n      //nếu bấm thì =true\r\n      document.addEventListener(\"keydown\", function (evt) {\r\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n          self.ctrlDown = true;\r\n        }\r\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n          self.shiftDown = true;\r\n        }\r\n      });\r\n      document.addEventListener(\"keyup\", function (evt) {\r\n        if (!self.selectedElement && !self.selection) return;\r\n        if (evt.code === \"Backspace\" || evt.code === \"Delete\") {\r\n          //xóa 1 el\r\n\r\n          console.log(self.selectedElement);\r\n          //xóa toàn bộ  el đã chọn\r\n          if (self.selection) {\r\n            // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\r\n            console.log(self.selection.model.models);\r\n            let deleteArrId = [];\r\n            self.selection.model.models.forEach((element) => {\r\n              console.log(element.id);\r\n              console.log(self.getNodeAttr(element.id));\r\n              deleteArrId.push(element.id);\r\n              self.getNodeAttr(element.id);\r\n            });\r\n            self.$emit(\"node-delete\", deleteArrId);\r\n            paper.removeTools({ ignoreCommandManager: true });\r\n            evt.preventDefault();\r\n            graph.removeCells(self.selection.collection.toArray());\r\n            self.selectionNode = null;\r\n          } else if (self.selectedElement) {\r\n            console.log(self.selectedElement.id);\r\n            if (\r\n              self.selectedElement.model.attributes.type === \"standard.Link\"\r\n            ) {\r\n              self.$emit(\"link-delete\", self.selectedElement);\r\n            } else {\r\n              self.$emit(\"node-delete\", self.selectedElement.id);\r\n            }\r\n            self.selectedElement.remove();\r\n            self.selectedElement = null;\r\n            self.selectionNode = null;\r\n            //emit node delete\r\n          }\r\n        }\r\n      });\r\n      //nếu thả nút thì =false\r\n      document.addEventListener(\"keyup\", function (evt) {\r\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n          self.shiftDown = false;\r\n        }\r\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n          self.ctrlDown = false;\r\n        }\r\n      });\r\n      paper.on(\"cell:pointerup\", function (cellView) {\r\n        self.addHalo(cellView);\r\n\r\n        if (cellView.model.attributes[\"type\"] === \"standard.Link\") {\r\n          self.$emit(\"select-link\", { id: cellView.model.id });\r\n        } else {\r\n          self.$emit(\"select-cell\", { id: cellView.model.id });\r\n        }\r\n\r\n        self.selectedElement = cellView;\r\n        self.selectedElement.model.toFront({ ignoreCommandManager: true });\r\n        // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\r\n        // console.log(graph.getLinks())\r\n      });\r\n      graph.on(\"add\", (cell, collection, opt) => {\r\n        let type = cell.attributes.type;\r\n        // console.log(type.split('.')[1])\r\n        if (type == \"standard.Link\") {\r\n          // self.addLinkTools(cell, paper);\r\n          // console.log(cell.attributes.source)\r\n          self.$emit(\"link-added\", {\r\n            source: cell.attributes.source,\r\n            target: cell.attributes.target,\r\n          });\r\n        } else {\r\n          type = type.split(\".\")[1];\r\n          self.$emit(\"node-added\", {\r\n            id: cell.id,\r\n            type: type,\r\n          });\r\n        }\r\n      });\r\n      paper.on({\r\n        //xử lý khi các sự kiện\r\n        \"cell:mouseenter\": (cellView) => {\r\n          cellView.model.toFront({ ignoreCommandManager: true });\r\n        },\r\n        \"cell:mouseleave\": (cellView) => {\r\n          cellView.model.toBack({ ignoreCommandManager: true });\r\n          if (self.selectionNode) {\r\n            self\r\n              .getElementPredecessorLinks(self.selectionNode)\r\n              .forEach((link) => {\r\n                link.toFront({ ignoreCommandManager: true });\r\n              });\r\n          }\r\n        },\r\n\r\n        \"element:pointerclick\": (cellView) => {\r\n          //chỉ đổi màu khi ko bấm ctrl\r\n          if (self.ctrlDown === false) {\r\n            self.selectElement(cellView.model);\r\n          }\r\n        },\r\n        \"link:pointerclick\": (cellView) => {\r\n          self.selectElement(cellView.model);\r\n          //chon vao link thi mo cho phep doi node\r\n          cellView.addTools(this.toolsView);\r\n          console.log(cellView);\r\n        },\r\n\r\n        //chuyển lại màu cũ khi bấm ra ngoài\r\n        \"blank:pointerclick\": () => {\r\n          console.log(1);\r\n          self.selectElement(null);\r\n          paper.removeTools({ ignoreCommandManager: true });\r\n        },\r\n\r\n        \"element:pointerup\": function (cellView, evt) {\r\n          if (evt.ctrlKey || evt.metaKey) {\r\n            console.log(self.selection);\r\n            self.selection.collection.add(cellView.model);\r\n            //loop to all the element in selection and set it to front\r\n            self.selection.collection.models.forEach((element) => {\r\n              element.toFront({ ignoreCommandManager: true });\r\n            });\r\n          }\r\n        },\r\n        //chuyển màu khi bấm vào link và cho nó lên trc\r\n        \"link:pointerup\": function (cellView) {\r\n          self.selectedLink = cellView.model;\r\n          self.selectedLink.toFront({ ignoreCommandManager: true });\r\n        },\r\n\r\n        // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\r\n        \"blank:pointerdown\": function (evt, x, y) {\r\n          if (self.shiftDown === true) {\r\n            self.selectElement(null);\r\n\r\n            self.paperScroller.setCursor(\"crosshair\");\r\n            self.selection.startSelecting(evt);\r\n          } else {\r\n            self.selection.collection.reset([]);\r\n            self.paperScroller.startPanning(evt, x, y);\r\n            paper.removeTools();\r\n            self.paperScroller.setCursor(\"grab\");\r\n          }\r\n        },\r\n      });\r\n      //xóa el nếu chọn lại lần 2 khi bấm ctrl\r\n      self.selection.on(\"selection-box:pointerdown\", function (cellView, evt) {\r\n        if (evt.ctrlKey || evt.metaKey) {\r\n          self.selection.collection.remove(cellView.model);\r\n        }\r\n      });\r\n      //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\r\n      document.addEventListener(\"keydown\", function (evt) {\r\n        self.clipboard = new joint.ui.Clipboard();\r\n\r\n        if (evt.code === \"NumpadAdd\" && self.shiftDown === true) {\r\n          // console.log(evt.code)\r\n          self.paperScroller.zoom(0.2, { max: 4 });\r\n        }\r\n        if (evt.code === \"NumpadSubtract\" && self.shiftDown === true) {\r\n          self.paperScroller.zoom(-0.2, { min: 0.2 });\r\n          // console.log(evt.code)\r\n        }\r\n        //check+ A\r\n        if (evt.code === \"KeyA\" && self.ctrlDown === true) {\r\n          self.selection.collection.reset(graph.getElements());\r\n          evt.preventDefault();\r\n        } //check ctrl + Z\r\n        if (evt.code === \"KeyZ\" && self.ctrlDown === true) {\r\n          self.commandManager.undo();\r\n          // console.log(selectionNode)\r\n\r\n          self.unhighlightCell(self.selectionNode);\r\n          graph.getLinks().forEach((link) => self.unhighlightCell(link));\r\n\r\n          // console.log(selectionNode)\r\n          self.selectionNode = null;\r\n        }\r\n        //check ctrl + Y\r\n        if (evt.code === \"KeyY\" && self.ctrlDown === true) {\r\n          self.commandManager.redo();\r\n          self.selectElement(null);\r\n        }\r\n        //check ctrl + V ,ctrl + C, ctrl+X\r\n        if (evt.code === \"KeyX\" && self.ctrlDown === true) {\r\n          self.clipboard.cutElements(self.selection.collection, paper.model);\r\n        }\r\n        if (evt.code === \"KeyC\" && self.ctrlDown === true) {\r\n          self.clipboard.copyElements(self.selection.collection, graph);\r\n        }\r\n        if (evt.code === \"KeyV\" && self.ctrlDown === true) {\r\n          var pastedCells = self.clipboard.pasteCells(graph, {\r\n            translate: { dx: 40, dy: 40 },\r\n            useLocalStorage: true,\r\n          });\r\n\r\n          var elements = _.filter(pastedCells, function (cell) {\r\n            return cell.isElement();\r\n          });\r\n          // Make sure pasted elements get selected immediately. This makes the UX better as\r\n          // the user can immediately manipulate the pasted elements.\r\n          self.selection.collection.reset(elements);\r\n        }\r\n      });\r\n    },\r\n    btnHandler() {\r\n      let self = this;\r\n      $(\"#btn-zoomin\").on(\"click\", function () {\r\n        self.paperScroller.zoom(0.2, { max: 4 });\r\n      });\r\n      $(\"#btn-zoomout\").on(\"click\", function () {\r\n        self.paperScroller.zoom(-0.2, { min: 0.2 });\r\n      });\r\n      $(\"#btn-center\").on(\r\n        \"click\",\r\n        _.bind(self.paperScroller.center, self.paperScroller)\r\n      );\r\n      $(\"#btn-center-content\").on(\r\n        \"click\",\r\n        _.bind(self.paperScroller.centerContent, self.paperScroller)\r\n      );\r\n    },\r\n    getAllLinks() {\r\n      return this.graph.getLinks();\r\n    },\r\n    getAllNodes() {\r\n      return this.graph.getCells();\r\n    },\r\n    clearAll() {\r\n      return this.graph.clear();\r\n    },\r\n    getNodeAttr(id) {\r\n      let node = this.graph.getCell(id);\r\n      if (node) {\r\n        return node.attributes;\r\n      } else {\r\n        return {};\r\n      }\r\n    },\r\n    render() {\r\n      let nodeInfos = this.nodes;\r\n      let linkInfo = this.links;\r\n      nodeInfos.forEach((nodeInfo) => {\r\n        let nodeType = nodeInfo.type;\r\n        let elementName = this.jsUcfirst(nodeInfo.name);\r\n        //checknode\r\n        if (nodeType === \"Rectangle\") {\r\n          if (elementName === \"Load\") {\r\n            let cell = new this.customElNoInPorts({\r\n              position: nodeInfo.position,\r\n              id: nodeInfo.id,\r\n            });\r\n            cell.prop(\r\n              \"attrs/image/xlinkHref\",\r\n              require(`../assets/${elementName}.svg`)\r\n            );\r\n            this.graph.addCell(cell);\r\n            //   console.log(cell)\r\n            //   linkInfo.source=cell\r\n          } else {\r\n            let cell = new this.customEl({\r\n              position: nodeInfo.position,\r\n              id: nodeInfo.id,\r\n            });\r\n            cell.prop(\r\n              \"attrs/image/xlinkHref\",\r\n              require(`../assets/${elementName}.svg`)\r\n            );\r\n            this.graph.addCell(cell);\r\n            //   linkInfo.target=cell\r\n          }\r\n        } else {\r\n          console.error(\"Node type '\" + nodeType + \"' is not defined\");\r\n        }\r\n      });\r\n      console.log(linkInfo);\r\n      console.log(this.getNodeAttr(linkInfo.source));\r\n      console.log(this.getNodeAttr(linkInfo.target));\r\n      if (linkInfo) {\r\n        let link = new joint.shapes.standard.Link();\r\n        link.source(this.getNodeAttr(linkInfo.source));\r\n        link.target(this.getNodeAttr(linkInfo.target));\r\n        link.addTo(this.graph);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.joint-element .selection {\r\n  stroke: rgb(255 136 0);\r\n}\r\n.joint-link .selection {\r\n  stroke: rgb(255 136 0);\r\n  /* fill: rgb(255 136 0); */\r\n}\r\n.joint-paper-scroller.joint-theme-default {\r\n  width: 800px !important;\r\n  height: 600px;\r\n}\r\n.joint-toolbar.joint-theme-default {\r\n  width: 800px !important;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}