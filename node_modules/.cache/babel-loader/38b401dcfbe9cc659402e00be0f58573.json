{"ast":null,"code":"import V from '../V/index.mjs';\nimport { Element } from '../dia/Element.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { isPercentage, assign } from '../util/index.mjs';\nimport { attributes } from '../dia/attributes/index.mjs';\nimport { env } from '../env/index.mjs'; // ELEMENTS\n\nexport const Rectangle = Element.define('standard.Rectangle', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Circle = Element.define('standard.Circle', {\n  attrs: {\n    body: {\n      refCx: '50%',\n      refCy: '50%',\n      refR: '50%',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'circle',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Ellipse = Element.define('standard.Ellipse', {\n  attrs: {\n    body: {\n      refCx: '50%',\n      refCy: '50%',\n      refRx: '50%',\n      refRy: '50%',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'ellipse',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Path = Element.define('standard.Path', {\n  attrs: {\n    body: {\n      refD: 'M 0 0 L 10 0 10 10 0 10 Z',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Polygon = Element.define('standard.Polygon', {\n  attrs: {\n    body: {\n      refPoints: '0 0 10 0 10 10 0 10',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'polygon',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Polyline = Element.define('standard.Polyline', {\n  attrs: {\n    body: {\n      refPoints: '0 0 10 0 10 10 0 10 0 0',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'polyline',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Image = Element.define('standard.Image', {\n  attrs: {\n    image: {\n      refWidth: '100%',\n      refHeight: '100%' // xlinkHref: '[URL]'\n\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const BorderedImage = Element.define('standard.BorderedImage', {\n  attrs: {\n    border: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    background: {\n      refWidth: -1,\n      refHeight: -1,\n      x: 0.5,\n      y: 0.5,\n      fill: '#FFFFFF'\n    },\n    image: {\n      // xlinkHref: '[URL]'\n      refWidth: -1,\n      refHeight: -1,\n      x: 0.5,\n      y: 0.5\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'background',\n    attributes: {\n      'stroke': 'none'\n    }\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'rect',\n    selector: 'border',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const EmbeddedImage = Element.define('standard.EmbeddedImage', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      fill: '#FFFFFF',\n      strokeWidth: 2\n    },\n    image: {\n      // xlinkHref: '[URL]'\n      refWidth: '30%',\n      refHeight: -20,\n      x: 10,\n      y: 10,\n      preserveAspectRatio: 'xMidYMin'\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'left',\n      refX: '30%',\n      refX2: 20,\n      // 10 + 10\n      refY: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const InscribedImage = Element.define('standard.InscribedImage', {\n  attrs: {\n    border: {\n      refRx: '50%',\n      refRy: '50%',\n      refCx: '50%',\n      refCy: '50%',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    background: {\n      refRx: '50%',\n      refRy: '50%',\n      refCx: '50%',\n      refCy: '50%',\n      fill: '#FFFFFF'\n    },\n    image: {\n      // The image corners touch the border when its size is Math.sqrt(2) / 2 = 0.707.. ~= 70%\n      refWidth: '68%',\n      refHeight: '68%',\n      // The image offset is calculated as (100% - 68%) / 2\n      refX: '16%',\n      refY: '16%',\n      preserveAspectRatio: 'xMidYMid' // xlinkHref: '[URL]'\n\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'ellipse',\n    selector: 'background'\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'ellipse',\n    selector: 'border',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const HeaderedRectangle = Element.define('standard.HeaderedRectangle', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    header: {\n      refWidth: '100%',\n      height: 30,\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    headerText: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: 15,\n      fontSize: 16,\n      fill: '#333333'\n    },\n    bodyText: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      refY2: 15,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'rect',\n    selector: 'header'\n  }, {\n    tagName: 'text',\n    selector: 'headerText'\n  }, {\n    tagName: 'text',\n    selector: 'bodyText'\n  }]\n});\nvar CYLINDER_TILT = 10;\nexport const Cylinder = Element.define('standard.Cylinder', {\n  attrs: {\n    body: {\n      lateralArea: CYLINDER_TILT,\n      fill: '#FFFFFF',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    top: {\n      refCx: '50%',\n      cy: CYLINDER_TILT,\n      refRx: '50%',\n      ry: CYLINDER_TILT,\n      fill: '#FFFFFF',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 15,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'ellipse',\n    selector: 'top'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }],\n  topRy: function (t, opt) {\n    // getter\n    if (t === undefined) return this.attr('body/lateralArea'); // setter\n\n    var isPercentageSetter = isPercentage(t);\n    var bodyAttrs = {\n      lateralArea: t\n    };\n    var topAttrs = isPercentageSetter ? {\n      refCy: t,\n      refRy: t,\n      cy: null,\n      ry: null\n    } : {\n      refCy: null,\n      refRy: null,\n      cy: t,\n      ry: t\n    };\n    return this.attr({\n      body: bodyAttrs,\n      top: topAttrs\n    }, opt);\n  }\n}, {\n  attributes: {\n    lateralArea: {\n      set: function (t, refBBox) {\n        var isPercentageSetter = isPercentage(t);\n        if (isPercentageSetter) t = parseFloat(t) / 100;\n        var x = refBBox.x;\n        var y = refBBox.y;\n        var w = refBBox.width;\n        var h = refBBox.height; // curve control point variables\n\n        var rx = w / 2;\n        var ry = isPercentageSetter ? h * t : t;\n        var kappa = V.KAPPA;\n        var cx = kappa * rx;\n        var cy = kappa * (isPercentageSetter ? h * t : t); // shape variables\n\n        var xLeft = x;\n        var xCenter = x + w / 2;\n        var xRight = x + w;\n        var ySideTop = y + ry;\n        var yCurveTop = ySideTop - ry;\n        var ySideBottom = y + h - ry;\n        var yCurveBottom = y + h; // return calculated shape\n\n        var data = ['M', xLeft, ySideTop, 'L', xLeft, ySideBottom, 'C', x, ySideBottom + cy, xCenter - cx, yCurveBottom, xCenter, yCurveBottom, 'C', xCenter + cx, yCurveBottom, xRight, ySideBottom + cy, xRight, ySideBottom, 'L', xRight, ySideTop, 'C', xRight, ySideTop - cy, xCenter + cx, yCurveTop, xCenter, yCurveTop, 'C', xCenter - cx, yCurveTop, xLeft, ySideTop - cy, xLeft, ySideTop, 'Z'];\n        return {\n          d: data.join(' ')\n        };\n      }\n    }\n  }\n});\nvar foLabelMarkup = {\n  tagName: 'foreignObject',\n  selector: 'foreignObject',\n  attributes: {\n    'overflow': 'hidden'\n  },\n  children: [{\n    tagName: 'div',\n    namespaceURI: 'http://www.w3.org/1999/xhtml',\n    selector: 'label',\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'static',\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      margin: 0,\n      padding: '0px 5px',\n      boxSizing: 'border-box',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }]\n};\nvar svgLabelMarkup = {\n  tagName: 'text',\n  selector: 'label',\n  attributes: {\n    'text-anchor': 'middle'\n  }\n};\nvar labelMarkup = env.test('svgforeignobject') ? foLabelMarkup : svgLabelMarkup;\nexport const TextBlock = Element.define('standard.TextBlock', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      fill: '#ffffff',\n      strokeWidth: 2\n    },\n    foreignObject: {\n      refWidth: '100%',\n      refHeight: '100%'\n    },\n    label: {\n      style: {\n        fontSize: 14\n      }\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, labelMarkup]\n}, {\n  attributes: {\n    text: {\n      set: function (text, refBBox, node, attrs) {\n        if (node instanceof HTMLElement) {\n          node.textContent = text;\n        } else {\n          // No foreign object\n          var style = attrs.style || {};\n          var wrapValue = {\n            text: text,\n            width: -5,\n            height: '100%'\n          };\n          var wrapAttrs = assign({\n            textVerticalAnchor: 'middle'\n          }, style);\n          attributes.textWrap.set.call(this, wrapValue, refBBox, node, wrapAttrs);\n          return {\n            fill: style.color || null\n          };\n        }\n      },\n      position: function (text, refBBox, node) {\n        // No foreign object\n        if (node instanceof SVGElement) return refBBox.center();\n      }\n    }\n  }\n}); // LINKS\n\nexport const Link = LinkBase.define('standard.Link', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#333333',\n      strokeWidth: 2,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'd': 'M 10 -5 0 0 10 5 z'\n      }\n    },\n    wrapper: {\n      connection: true,\n      strokeWidth: 10,\n      strokeLinejoin: 'round'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'wrapper',\n    attributes: {\n      'fill': 'none',\n      'cursor': 'pointer',\n      'stroke': 'transparent',\n      'stroke-linecap': 'round'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none',\n      'pointer-events': 'none'\n    }\n  }]\n});\nexport const DoubleLink = LinkBase.define('standard.DoubleLink', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#DDDDDD',\n      strokeWidth: 4,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        type: 'path',\n        stroke: '#000000',\n        d: 'M 10 -3 10 -10 -2 0 10 10 10 3'\n      }\n    },\n    outline: {\n      connection: true,\n      stroke: '#000000',\n      strokeWidth: 6,\n      strokeLinejoin: 'round'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'outline',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none'\n    }\n  }]\n});\nexport const ShadowLink = LinkBase.define('standard.ShadowLink', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#FF0000',\n      strokeWidth: 20,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M 0 -10 -10 0 0 10 z'\n      },\n      sourceMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n      }\n    },\n    shadow: {\n      connection: true,\n      refX: 3,\n      refY: 6,\n      stroke: '#000000',\n      strokeOpacity: 0.2,\n      strokeWidth: 20,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'd': 'M 0 -10 -10 0 0 10 z',\n        'stroke': 'none'\n      },\n      sourceMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n      }\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'shadow',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none'\n    }\n  }]\n});","map":{"version":3,"names":["V","Element","Link","LinkBase","isPercentage","assign","attributes","env","Rectangle","define","attrs","body","refWidth","refHeight","strokeWidth","stroke","fill","label","textVerticalAnchor","textAnchor","refX","refY","fontSize","markup","tagName","selector","Circle","refCx","refCy","refR","Ellipse","refRx","refRy","Path","refD","Polygon","refPoints","Polyline","Image","image","refY2","BorderedImage","border","background","x","y","EmbeddedImage","preserveAspectRatio","refX2","InscribedImage","HeaderedRectangle","header","height","headerText","bodyText","CYLINDER_TILT","Cylinder","lateralArea","top","cy","ry","topRy","t","opt","undefined","attr","isPercentageSetter","bodyAttrs","topAttrs","set","refBBox","parseFloat","w","width","h","rx","kappa","KAPPA","cx","xLeft","xCenter","xRight","ySideTop","yCurveTop","ySideBottom","yCurveBottom","data","d","join","foLabelMarkup","children","namespaceURI","style","position","backgroundColor","textAlign","margin","padding","boxSizing","display","alignItems","justifyContent","svgLabelMarkup","labelMarkup","test","TextBlock","foreignObject","text","node","HTMLElement","textContent","wrapValue","wrapAttrs","textWrap","call","color","SVGElement","center","line","connection","strokeLinejoin","targetMarker","wrapper","DoubleLink","type","outline","ShadowLink","sourceMarker","shadow","strokeOpacity"],"sources":["C:/Users/Admin/dataflow-test/node_modules/jointjs/src/shapes/standard.mjs"],"sourcesContent":["import V from '../V/index.mjs';\nimport { Element } from '../dia/Element.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { isPercentage, assign } from '../util/index.mjs';\nimport { attributes } from '../dia/attributes/index.mjs';\nimport { env } from '../env/index.mjs';\n\n\n// ELEMENTS\n\nexport const Rectangle = Element.define('standard.Rectangle', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body',\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Circle = Element.define('standard.Circle', {\n    attrs: {\n        body: {\n            refCx: '50%',\n            refCy: '50%',\n            refR: '50%',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'circle',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Ellipse = Element.define('standard.Ellipse', {\n    attrs: {\n        body: {\n            refCx: '50%',\n            refCy: '50%',\n            refRx: '50%',\n            refRy: '50%',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'ellipse',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Path = Element.define('standard.Path', {\n    attrs: {\n        body: {\n            refD: 'M 0 0 L 10 0 10 10 0 10 Z',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Polygon = Element.define('standard.Polygon', {\n    attrs: {\n        body: {\n            refPoints: '0 0 10 0 10 10 0 10',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'polygon',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Polyline = Element.define('standard.Polyline', {\n    attrs: {\n        body: {\n            refPoints: '0 0 10 0 10 10 0 10 0 0',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'polyline',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Image = Element.define('standard.Image', {\n    attrs: {\n        image: {\n            refWidth: '100%',\n            refHeight: '100%',\n            // xlinkHref: '[URL]'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const BorderedImage = Element.define('standard.BorderedImage', {\n    attrs: {\n        border: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        background: {\n            refWidth: -1,\n            refHeight: -1,\n            x: 0.5,\n            y: 0.5,\n            fill: '#FFFFFF'\n        },\n        image: {\n            // xlinkHref: '[URL]'\n            refWidth: -1,\n            refHeight: -1,\n            x: 0.5,\n            y: 0.5\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'background',\n        attributes: {\n            'stroke': 'none'\n        }\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'rect',\n        selector: 'border',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const EmbeddedImage = Element.define('standard.EmbeddedImage', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            fill: '#FFFFFF',\n            strokeWidth: 2\n        },\n        image: {\n            // xlinkHref: '[URL]'\n            refWidth: '30%',\n            refHeight: -20,\n            x: 10,\n            y: 10,\n            preserveAspectRatio: 'xMidYMin'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'left',\n            refX: '30%',\n            refX2: 20, // 10 + 10\n            refY: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const InscribedImage = Element.define('standard.InscribedImage', {\n    attrs: {\n        border: {\n            refRx: '50%',\n            refRy: '50%',\n            refCx: '50%',\n            refCy: '50%',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        background: {\n            refRx: '50%',\n            refRy: '50%',\n            refCx: '50%',\n            refCy: '50%',\n            fill: '#FFFFFF'\n        },\n        image: {\n            // The image corners touch the border when its size is Math.sqrt(2) / 2 = 0.707.. ~= 70%\n            refWidth: '68%',\n            refHeight: '68%',\n            // The image offset is calculated as (100% - 68%) / 2\n            refX: '16%',\n            refY: '16%',\n            preserveAspectRatio: 'xMidYMid'\n            // xlinkHref: '[URL]'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'ellipse',\n        selector: 'background'\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'ellipse',\n        selector: 'border',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const HeaderedRectangle = Element.define('standard.HeaderedRectangle', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        header: {\n            refWidth: '100%',\n            height: 30,\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        headerText: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: 15,\n            fontSize: 16,\n            fill: '#333333'\n        },\n        bodyText: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            refY2: 15,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, {\n        tagName: 'rect',\n        selector: 'header'\n    }, {\n        tagName: 'text',\n        selector: 'headerText'\n    }, {\n        tagName: 'text',\n        selector: 'bodyText'\n    }]\n});\n\nvar CYLINDER_TILT = 10;\n\nexport const Cylinder = Element.define('standard.Cylinder', {\n    attrs: {\n        body: {\n            lateralArea: CYLINDER_TILT,\n            fill: '#FFFFFF',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        top: {\n            refCx: '50%',\n            cy: CYLINDER_TILT,\n            refRx: '50%',\n            ry: CYLINDER_TILT,\n            fill: '#FFFFFF',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 15,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'body'\n    }, {\n        tagName: 'ellipse',\n        selector: 'top'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }],\n\n    topRy: function(t, opt) {\n        // getter\n        if (t === undefined) return this.attr('body/lateralArea');\n\n        // setter\n        var isPercentageSetter = isPercentage(t);\n\n        var bodyAttrs = { lateralArea: t };\n        var topAttrs = isPercentageSetter\n            ? { refCy: t, refRy: t, cy: null, ry: null }\n            : { refCy: null, refRy: null, cy: t, ry: t };\n\n        return this.attr({ body: bodyAttrs, top: topAttrs }, opt);\n    }\n\n}, {\n    attributes: {\n        lateralArea: {\n            set: function(t, refBBox) {\n                var isPercentageSetter = isPercentage(t);\n                if (isPercentageSetter) t = parseFloat(t) / 100;\n\n                var x = refBBox.x;\n                var y = refBBox.y;\n                var w = refBBox.width;\n                var h = refBBox.height;\n\n                // curve control point variables\n                var rx = w / 2;\n                var ry = isPercentageSetter ? (h * t) : t;\n\n                var kappa = V.KAPPA;\n                var cx = kappa * rx;\n                var cy = kappa * (isPercentageSetter ? (h * t) : t);\n\n                // shape variables\n                var xLeft = x;\n                var xCenter = x + (w / 2);\n                var xRight = x + w;\n\n                var ySideTop = y + ry;\n                var yCurveTop = ySideTop - ry;\n                var ySideBottom = y + h - ry;\n                var yCurveBottom = y + h;\n\n                // return calculated shape\n                var data = [\n                    'M', xLeft, ySideTop,\n                    'L', xLeft, ySideBottom,\n                    'C', x, (ySideBottom + cy), (xCenter - cx), yCurveBottom, xCenter, yCurveBottom,\n                    'C', (xCenter + cx), yCurveBottom, xRight, (ySideBottom + cy), xRight, ySideBottom,\n                    'L', xRight, ySideTop,\n                    'C', xRight, (ySideTop - cy), (xCenter + cx), yCurveTop, xCenter, yCurveTop,\n                    'C', (xCenter - cx), yCurveTop, xLeft, (ySideTop - cy), xLeft, ySideTop,\n                    'Z'\n                ];\n                return { d: data.join(' ') };\n            }\n        }\n    }\n});\n\nvar foLabelMarkup = {\n    tagName: 'foreignObject',\n    selector: 'foreignObject',\n    attributes: {\n        'overflow': 'hidden'\n    },\n    children: [{\n        tagName: 'div',\n        namespaceURI: 'http://www.w3.org/1999/xhtml',\n        selector: 'label',\n        style: {\n            width: '100%',\n            height: '100%',\n            position: 'static',\n            backgroundColor: 'transparent',\n            textAlign: 'center',\n            margin: 0,\n            padding: '0px 5px',\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }\n    }]\n};\n\nvar svgLabelMarkup = {\n    tagName: 'text',\n    selector: 'label',\n    attributes: {\n        'text-anchor': 'middle'\n    }\n};\n\nvar labelMarkup = (env.test('svgforeignobject')) ? foLabelMarkup : svgLabelMarkup;\n\nexport const TextBlock = Element.define('standard.TextBlock', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            fill: '#ffffff',\n            strokeWidth: 2\n        },\n        foreignObject: {\n            refWidth: '100%',\n            refHeight: '100%'\n        },\n        label: {\n            style: {\n                fontSize: 14\n            }\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, labelMarkup]\n}, {\n    attributes: {\n        text: {\n            set: function(text, refBBox, node, attrs) {\n                if (node instanceof HTMLElement) {\n                    node.textContent = text;\n                } else {\n                    // No foreign object\n                    var style = attrs.style || {};\n                    var wrapValue = { text: text, width: -5, height: '100%' };\n                    var wrapAttrs = assign({ textVerticalAnchor: 'middle' }, style);\n                    attributes.textWrap.set.call(this, wrapValue, refBBox, node, wrapAttrs);\n                    return { fill: style.color || null };\n                }\n            },\n            position: function(text, refBBox, node) {\n                // No foreign object\n                if (node instanceof SVGElement) return refBBox.center();\n            }\n        }\n    }\n});\n\n// LINKS\n\nexport const Link = LinkBase.define('standard.Link', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#333333',\n            strokeWidth: 2,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'd': 'M 10 -5 0 0 10 5 z'\n            }\n        },\n        wrapper: {\n            connection: true,\n            strokeWidth: 10,\n            strokeLinejoin: 'round'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'wrapper',\n        attributes: {\n            'fill': 'none',\n            'cursor': 'pointer',\n            'stroke': 'transparent',\n            'stroke-linecap': 'round'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none',\n            'pointer-events': 'none'\n        }\n    }]\n});\n\nexport const DoubleLink = LinkBase.define('standard.DoubleLink', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#DDDDDD',\n            strokeWidth: 4,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                type: 'path',\n                stroke: '#000000',\n                d: 'M 10 -3 10 -10 -2 0 10 10 10 3'\n            }\n        },\n        outline: {\n            connection: true,\n            stroke: '#000000',\n            strokeWidth: 6,\n            strokeLinejoin: 'round'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'outline',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none'\n        }\n    }]\n});\n\nexport const ShadowLink = LinkBase.define('standard.ShadowLink', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#FF0000',\n            strokeWidth: 20,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M 0 -10 -10 0 0 10 z'\n            },\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n            }\n        },\n        shadow: {\n            connection: true,\n            refX: 3,\n            refY: 6,\n            stroke: '#000000',\n            strokeOpacity: 0.2,\n            strokeWidth: 20,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'd': 'M 0 -10 -10 0 0 10 z',\n                'stroke': 'none'\n            },\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n            }\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'shadow',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none'\n        }\n    }]\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}