{"ast":null,"code":"export default {\n  name: 'DataFlow',\n  props: {\n    instanceKey: {\n      defaul: ''\n    },\n    action: {\n      defaul: 'view'\n    },\n    width: {\n      type: [String, Number],\n      default: 800\n    },\n    height: {\n      type: [String, Number],\n      default: 250\n    },\n    gridSize: {\n      type: Number,\n      default: 1\n    },\n    drawGrid: {\n      type: [Object, Boolean],\n      default: false\n    },\n    background: {\n      type: [Object, Boolean],\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    highLightLinks: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    }\n  },\n\n  created() {\n    this.graph = new joint.dia.Graph();\n  },\n\n  mounted() {\n    this.initPaper();\n  },\n\n  methods: {\n    initPaper() {\n      let graph = this.graph;\n      var commandManager = new joint.dia.CommandManager({\n        graph: graph,\n        cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\n          return !options.ignoreCommandManager;\n        }\n      });\n      this.paper = new joint.dia.Paper({\n        width: 800,\n        height: 600,\n        model: this.graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        interactive: {\n          vertexAdd: false\n        },\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n          radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: {\n          name: 'manhattan',\n          args: {\n            padding: 10\n          }\n        },\n        defaultConnector: {\n          name: 'rounded'\n        },\n        validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n          // Prevent linking from input ports.\n          if (magnetS && magnetS.getAttribute('port-group') === 'in') return false; // Prevent linking from output ports to input ports within one element.\n\n          if (cellViewS === cellViewT) return false; // Prevent linking to input ports.\n\n          return magnetT && magnetT.getAttribute('port-group') === 'in' || cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer';\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n          linkMove: true,\n          labelMove: true,\n          arrowheadMove: true,\n          vertexMove: false,\n          vertexAdd: false,\n          vertexRemove: false,\n          useLinkTools: false\n        },\n        defaultLink: function () {\n          return new joint.shapes.standard.Link({\n            attrs: {\n              z: 1,\n              line: {\n                connection: true,\n                stroke: '#707070',\n                strokeLinejoin: 'round'\n              },\n              wrapper: {\n                connection: true,\n                strokeWidth: 10,\n                strokeLinejoin: 'round'\n              }\n            },\n            markup: [{\n              tagName: 'path',\n              selector: 'wrapper',\n              attributes: {\n                'fill': 'none',\n                'stroke': 'transparent'\n              }\n            }, {\n              tagName: 'path',\n              selector: 'line',\n              attributes: {\n                'fill': 'none'\n              }\n            }]\n          });\n        }\n      });\n      this.paperScroller = new joint.ui.PaperScroller({\n        paper: this.paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: 'grab'\n      }); //render paper\n\n      document.getElementById('paper').appendChild(this.paperScroller.render().el); //render paperScroller\n\n      this.paper.on('blank:pointerdown', this.paperScroller.startPanning);\n      this.paperScroller.$el.css({\n        width: 900,\n        height: 600\n      }).appendTo('#paper');\n      this.paperScroller.center();\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","instanceKey","defaul","action","width","type","String","Number","default","height","gridSize","drawGrid","Object","Boolean","background","readonly","highLightLinks","Array","created","graph","joint","dia","Graph","mounted","initPaper","methods","commandManager","CommandManager","cmdBeforeAdd","cmdName","cell","options","ignoreCommandManager","paper","Paper","model","async","sorting","APPROX","restrictTranslate","stopDelegation","interactive","vertexAdd","snapLinks","radius","linkPinning","multiLinks","defaultRouter","args","padding","defaultConnector","validateConnection","cellViewS","magnetS","cellViewT","magnetT","end","linkView","getAttribute","get","linkMove","labelMove","arrowheadMove","vertexMove","vertexRemove","useLinkTools","defaultLink","shapes","standard","Link","attrs","z","line","connection","stroke","strokeLinejoin","wrapper","strokeWidth","markup","tagName","selector","attributes","paperScroller","ui","PaperScroller","autoResizePaper","scrollWhileDragging","cursor","document","getElementById","appendChild","render","el","on","startPanning","$el","css","appendTo","center"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\components\\dataflow.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <div class=\"btn_contain\">\r\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\r\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\r\n        <button id=\"btn-center\" class=\"btn\">center</button>\r\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\r\n    </div>\r\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\r\n    \r\n    <div id=\"paper\"></div>\r\n    <div id=\"navigator\"></div>\r\n    \r\n    \r\n        </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name:'DataFlow',\r\n    props: {\r\n        instanceKey: {\r\n            defaul: ''\r\n        },\r\n        action: {\r\n            defaul: 'view'\r\n        },\r\n\t\twidth: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 800\r\n\t\t},\r\n\t\theight: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 250\r\n\t\t},\r\n\t\tgridSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\tdrawGrid: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tbackground: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\treadonly: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n        highLightLinks:{\r\n            type: Array,\r\n            default(){\r\n                return []\r\n            }\r\n        }\r\n\t},\r\n    created() {\r\n        this.graph = new joint.dia.Graph;\r\n    },\r\n    mounted() {\r\n        this.initPaper()\r\n    },\r\n    methods: {\r\n        initPaper(){\r\n            let graph = this.graph;\r\n            var commandManager = new joint.dia.CommandManager({\r\n                graph: graph,\r\n                cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\r\n                    return !options.ignoreCommandManager;\r\n                }\r\n            });\r\n            this.paper = new joint.dia.Paper({  \r\n                \r\n                width: 800,\r\n                height: 600,\r\n                model: this.graph,\r\n                async: true,\r\n                sorting: joint.dia.Paper.sorting.APPROX,\r\n                gridSize: 10,\r\n                drawGrid: true,\r\n                restrictTranslate: true,\r\n                stopDelegation: false,\r\n                \r\n                interactive: { vertexAdd: false } ,\r\n                // background: { color: '#F3F7F6' },\r\n                // defaultConnectionPoint: { name: 'boundary' },\r\n                // defaultConnector: {\r\n                //     name: \"rounded\"\r\n                //   },\r\n                //   defaultRouter: {\r\n                //     name: \"manhattan\",\r\n                //     args: {\r\n                //       step: 10,\r\n                //       endDirections: [\"bottom\"],\r\n                //       startDirections: [\"top\"],\r\n                //       padding: { bottom: 20 }\r\n                //     }\r\n                //   },\r\n                snapLinks: {\r\n                    radius: 75\r\n                },\r\n                linkPinning: false,\r\n                multiLinks: false,\r\n                defaultRouter: { name: 'manhattan', args: { padding: 10 }},\r\n                defaultConnector: { name: 'rounded' },\r\n                validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\r\n                    // Prevent linking from input ports.\r\n                    if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\r\n                    // Prevent linking from output ports to input ports within one element.\r\n                    if (cellViewS === cellViewT) return false;\r\n                    // Prevent linking to input ports.\r\n                    return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\r\n                },\r\n                // validateConnection: function (view1, _magnet1, view2, _magnet2) {\r\n                //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\r\n                //     return view1 !== view2;\r\n                // },\r\n                interactive: {\r\n                    linkMove: true,\r\n                    labelMove: true,\r\n                    arrowheadMove: true,\r\n                    vertexMove: false,\r\n                    vertexAdd: false,\r\n                    vertexRemove: false,\r\n                    useLinkTools: false,\r\n                },\r\n                defaultLink: function () {\r\n                    return new joint.shapes.standard.Link({\r\n                        attrs: {\r\n                            z:1,\r\n                            line: {\r\n                                connection: true,\r\n                                stroke: '#707070',\r\n                                strokeLinejoin: 'round',\r\n                            },\r\n                            wrapper: {\r\n                                connection: true,\r\n                                strokeWidth: 10,\r\n                                strokeLinejoin: 'round'\r\n                            },\r\n                            \r\n                        },\r\n                        \r\n                        markup: [{\r\n                            tagName: 'path',\r\n                            selector: 'wrapper',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                                'stroke': 'transparent'\r\n                            }\r\n                        }, {\r\n                            tagName: 'path',\r\n                            selector: 'line',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                            }\r\n                        }]\r\n                    });\r\n                }\r\n            });\r\n            this.paperScroller = new joint.ui.PaperScroller({\r\n                paper: this.paper,\r\n                autoResizePaper: true,\r\n                scrollWhileDragging: true,\r\n                cursor: 'grab'\r\n                \r\n            });\r\n            //render paper\r\n            document.getElementById('paper').appendChild(this.paperScroller.render().el);\r\n            //render paperScroller\r\n            this.paper.on('blank:pointerdown', this.paperScroller.startPanning);\r\n            this.paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\r\n            this.paperScroller.center();\r\n            \r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}