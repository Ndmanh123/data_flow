{"ast":null,"code":"// import '@/../public/vendor/jointJS/js/lib/backbone.js'\n// import '@/../public/vendor/jointJS/js/lib/jquery.min.js'\n// import '@/../public/vendor/jointJS/js/lib/lodash.min.js'\n// import '@/../public/vendor/jointJS/js/lib/rappid.js'\n// import '@/../public/vendor/jointJS/js/lib/backbone.min.js'\nimport DataFlow from './components/dataflow.vue'; // import { Options, Vue } from 'vue-class-component';\n\nexport default {\n  components: {\n    DataFlow\n  },\n\n  mounted() {\n    this.initPaper();\n  },\n\n  methods: {\n    initPaper() {\n      var highlighters = joint.highlighters;\n      var mask = joint.highlighters.mask;\n      let selectionNode = null;\n      let selectedElement = null;\n      let selectedLink = null;\n      var ctrlDown = false;\n      var shiftDown = false;\n      const color = \"rgb(255 136 0)\";\n      var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2,\n            rx: 5,\n            ry: 5\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }, {\n            id: 'in-port',\n            group: 'in'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            },\n            in: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'left'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'passive',\n                  fill: '#FFFFFF',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      });\n      var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2\n          },\n          line: {\n            connection: true,\n            stroke: '#333333',\n            strokeWidth: 2,\n            strokeLinejoin: 'round',\n            targetMarker: {\n              'type': 'path',\n              'd': 'M 10 -5 0 0 10 5 z'\n            }\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      }); //create link tool\n      //     var verticesTool = new joint.linkTools.Vertices();\n      // var segmentsTool = new joint.linkTools.Segments();\n      // var sourceArrowheadTool = new joint.linkTools.SourceArrowhead();\n\n      var targetArrowheadTool = new joint.linkTools.TargetArrowhead(); // var sourceAnchorTool = new joint.linkTools.SourceAnchor();\n      // var targetAnchorTool = new joint.linkTools.TargetAnchor();\n      // var boundaryTool = new joint.linkTools.Boundary();\n      // var removeButton = new joint.linkTools.Remove();\n\n      var toolsView = new joint.dia.ToolsView({\n        tools: [// verticesTool, segmentsTool,\n        // sourceArrowheadTool, \n        targetArrowheadTool // sourceAnchorTool, targetAnchorTool,\n        // boundaryTool, removeButton\n        ]\n      }); //hàm viết hoa chữ đầu\n\n      function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      } //hàm render stencil\n\n\n      function stencilRenderHandler(positionX, positionY, arr, elNoInPorts = \"\", spaceBetweenElToX = 0, spaceBetweenElToY = 0) {\n        arr.forEach(element => {\n          //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n          let elementName = jsUcfirst(element);\n\n          if (elementName === jsUcfirst(elNoInPorts)) {\n            element = new customElNoInPorts();\n          } else {\n            element = new customEl();\n          }\n\n          console.log(`@/assets/${elementName}.svg`);\n          element.prop('attrs/image/xlinkHref', require(`./assets/${elementName}.svg`));\n          stencilShapes.push(element.position(positionX, positionY));\n\n          if (spaceBetweenElToX > 0) {\n            positionX += element.attributes.size.width + spaceBetweenElToX;\n          }\n\n          if (spaceBetweenElToY > 0) {\n            positionY += element.attributes.size.height + spaceBetweenElToY;\n          }\n        });\n      }\n\n      var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n      var stencilShapes = [];\n      stencilRenderHandler(20, 20, arr, \"load\", 16);\n      let graph = new joint.dia.Graph();\n      var paper = new joint.dia.Paper({\n        el: document.getElementById('paper'),\n        width: 800,\n        height: 600,\n        model: graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        interactive: {\n          vertexAdd: false\n        },\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n          radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: {\n          name: 'manhattan',\n          args: {\n            padding: 10\n          }\n        },\n        defaultConnector: {\n          name: 'rounded'\n        },\n        validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n          // Prevent linking from input ports.\n          if (magnetS && magnetS.getAttribute('port-group') === 'in') return false; // Prevent linking from output ports to input ports within one element.\n\n          if (cellViewS === cellViewT) return false; // Prevent linking to input ports.\n\n          return magnetT && magnetT.getAttribute('port-group') === 'in' || cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer';\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n          linkMove: true,\n          labelMove: true,\n          arrowheadMove: true,\n          vertexMove: false,\n          vertexAdd: false,\n          vertexRemove: false,\n          useLinkTools: false\n        },\n        defaultLink: function () {\n          return new joint.shapes.standard.Link({\n            attrs: {\n              z: 1,\n              line: {\n                connection: true,\n                stroke: '#707070',\n                strokeLinejoin: 'round'\n              },\n              wrapper: {\n                connection: true,\n                strokeWidth: 10,\n                strokeLinejoin: 'round'\n              }\n            },\n            markup: [{\n              tagName: 'path',\n              selector: 'wrapper',\n              attributes: {\n                'fill': 'none',\n                'stroke': 'transparent'\n              }\n            }, {\n              tagName: 'path',\n              selector: 'line',\n              attributes: {\n                'fill': 'none'\n              }\n            }]\n          });\n        }\n      });\n      var stencil = new joint.ui.Stencil({\n        paper: paper,\n        width: 200,\n        height: 100,\n        dropAnimation: {\n          duration: 200,\n          easing: 'swing'\n        }\n      });\n      document.getElementById('stencil').appendChild(stencil.render().el);\n      stencil.load(stencilShapes);\n      var selection = new joint.ui.Selection({\n        theme: 'material',\n        paper: paper,\n        useModelGeometry: true\n      }); //halo cấu hình\n\n      paper.on('cell:pointerup', function (cellView) {\n        var halo = new joint.ui.Halo({\n          cellView: cellView,\n          type: 'toolbar',\n          boxContent: false // bang phia duoi cell cho biet tọa độ height width và angle\n\n        });\n        halo.removeHandle('resize');\n        halo.removeHandle('rotate');\n        halo.removeHandle('direction');\n        halo.render(); //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n\n        selectedElement = cellView.model;\n        selectedElement.toFront({\n          ignoreCommandManager: true\n        }); // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\n        // console.log(graph.getLinks())\n      }); //  //cấu hình các cell dc chọn\n      // paper.svg.prepend(\n      // `\n      //         .joint-element .selection {\n      //             stroke: ${color};\n      //         }\n      //         .joint-link .selection {\n      //             stroke: ${color}; \n      //             'fill': ${color},\n      //         }\n      //     `\n      // );\n      // //lấy tất cả link ở trc node\n      // function getElementPredecessorLinks(el) {\n      //     return graph\n      //       .getSubgraph([el, ...graph.getPredecessors(el)])\n      //       .filter((cell) => cell.isLink());\n      //   }\n      //   //đổi màu cell\n      //   function highlightCell(cell) {\n      //     if(cell){\n      //     highlighters.addClass.add(\n      //       cell.findView(paper),\n      //       cell.isElement() ? \"body\" : \"line\",\n      //       \"selection\",\n      //       { className: \"selection\" }\n      //     );\n      //     }else{return}\n      //   }\n      //   //chuyển màu cell lại như cũ\n      //   function unhighlightCell(cell) {\n      //     if(cell){\n      //     highlighters.addClass.remove(cell.findView(paper), \"selection\");\n      //     }\n      //     else{return}\n      //   }\n      //   //function xử lý hành dộng chọn el\n      //   function selectElement(el) {     \n      //     if (selectionNode === el) return;\n      //     if (selectionNode) {\n      //       unhighlightCell(selectionNode);\n      //       graph.getLinks().forEach((link) => unhighlightCell(link));\n      //     }\n      //     if (el) {\n      //       highlightCell(el);\n      //       getElementPredecessorLinks(el).forEach((link) => {\n      //           highlightCell(link)\n      //           link.toFront({ ignoreCommandManager: true })\n      //         //   link.attributes.z+=1\n      //         });\n      //       selectionNode = el;\n      //     } else {\n      //         selectionNode = null;\n      //     }\n      //   }   \n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["DataFlow","components","mounted","initPaper","methods","highlighters","joint","mask","selectionNode","selectedElement","selectedLink","ctrlDown","shiftDown","color","customEl","dia","Element","define","z","size","width","height","removable","attrs","image","x","y","root","magnet","body","fill","stroke","strokeWidth","rx","ry","ports","items","id","group","groups","out","markup","tagName","selector","position","name","portBody","r","in","customElNoInPorts","theme","line","connection","strokeLinejoin","targetMarker","targetArrowheadTool","linkTools","TargetArrowhead","toolsView","ToolsView","tools","jsUcfirst","string","charAt","toUpperCase","slice","stencilRenderHandler","positionX","positionY","arr","elNoInPorts","spaceBetweenElToX","spaceBetweenElToY","forEach","element","elementName","console","log","prop","require","stencilShapes","push","attributes","graph","Graph","paper","Paper","el","document","getElementById","model","async","sorting","APPROX","gridSize","drawGrid","restrictTranslate","stopDelegation","interactive","vertexAdd","snapLinks","radius","linkPinning","multiLinks","defaultRouter","args","padding","defaultConnector","validateConnection","cellViewS","magnetS","cellViewT","magnetT","end","linkView","getAttribute","get","linkMove","labelMove","arrowheadMove","vertexMove","vertexRemove","useLinkTools","defaultLink","shapes","standard","Link","wrapper","stencil","ui","Stencil","dropAnimation","duration","easing","appendChild","render","load","selection","Selection","useModelGeometry","on","cellView","halo","Halo","type","boxContent","removeHandle","toFront","ignoreCommandManager"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\App.vue"],"sourcesContent":["\n<template>\n<h1>Home</h1>\n  <!-- <DataFlow\n  \n  ></DataFlow> -->\n  <div id=\"app\">\n    <div class=\"btn_contain\">\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\n        <button id=\"btn-center\" class=\"btn\">center</button>\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\n    </div>\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\n    \n    <div id=\"paper\"></div>\n    <div id=\"navigator\"></div>\n    \n    \n        </div>\n  \n</template>\n\n<script>\n\n// import '@/../public/vendor/jointJS/js/lib/backbone.js'\n// import '@/../public/vendor/jointJS/js/lib/jquery.min.js'\n// import '@/../public/vendor/jointJS/js/lib/lodash.min.js'\n// import '@/../public/vendor/jointJS/js/lib/rappid.js'\n// import '@/../public/vendor/jointJS/js/lib/backbone.min.js'\n\n\n\nimport DataFlow from './components/dataflow.vue'\n// import { Options, Vue } from 'vue-class-component';\nexport default {\n    components: {\n    DataFlow\n  },\n  mounted() {\n      this.initPaper()\n  },\n  methods:{\n      initPaper(){\n          var highlighters=joint.highlighters;\n    var mask = joint.highlighters.mask;\n    let selectionNode = null;\n    let selectedElement = null;\n    let selectedLink = null\n    var ctrlDown = false;\n    var shiftDown = false;\n    const color = \"rgb(255 136 0)\";\n      var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n                rx: 5,\n                ry: 5,\n\n            }\n        },\n        ports: {\n            items: [{\n                id: 'out-port',\n                group: 'out',\n\n            },\n            {\n                id: 'in-port',\n                group: 'in'\n            }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n\n                        }\n                    }\n                },\n                in: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'left'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'passive',\n                            fill: '#FFFFFF',\n                            stroke: '#187BD3',\n\n                        }\n                    }\n                }\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            },\n            {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n            },\n            line: {\n                connection: true,\n                stroke: '#333333',\n                strokeWidth: 2,\n                strokeLinejoin: 'round',\n                targetMarker: {\n                    'type': 'path',\n                    'd': 'M 10 -5 0 0 10 5 z'\n                }\n            },\n        },\n        ports: {\n            items: [\n                {\n                    id: 'out-port',\n                    group: 'out'\n                }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n                        }\n                    }\n                },\n\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            }, {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    //create link tool\n//     var verticesTool = new joint.linkTools.Vertices();\n// var segmentsTool = new joint.linkTools.Segments();\n// var sourceArrowheadTool = new joint.linkTools.SourceArrowhead();\nvar targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n// var sourceAnchorTool = new joint.linkTools.SourceAnchor();\n// var targetAnchorTool = new joint.linkTools.TargetAnchor();\n// var boundaryTool = new joint.linkTools.Boundary();\n// var removeButton = new joint.linkTools.Remove();\n\nvar toolsView = new joint.dia.ToolsView({\n    tools: [\n        // verticesTool, segmentsTool,\n        // sourceArrowheadTool, \n        targetArrowheadTool,\n        // sourceAnchorTool, targetAnchorTool,\n        // boundaryTool, removeButton\n    ]\n});\n      \n    //hàm viết hoa chữ đầu\n    function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    //hàm render stencil\n    function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n        arr.forEach(element => {\n            //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n            let elementName = jsUcfirst(element)\n            if (elementName === jsUcfirst(elNoInPorts)) {\n                element = new customElNoInPorts();\n            }\n            else {\n                element = new customEl();\n            }\n            console.log(`@/assets/${elementName}.svg`)\n            element.prop('attrs/image/xlinkHref', require(`./assets/${elementName}.svg`))\n            stencilShapes.push(element.position(positionX, positionY))\n            if(spaceBetweenElToX>0){\n                positionX += element.attributes.size.width+spaceBetweenElToX;\n            }\n            if(spaceBetweenElToY>0){\n                positionY += element.attributes.size.height+spaceBetweenElToY;\n            }\n        });\n    }\n    var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n\n    var stencilShapes = [\n        \n        \n    ];\n    stencilRenderHandler(20,20,arr,\"load\",16)\n            let graph = new joint.dia.Graph;\n\n             var paper = new joint.dia.Paper({  \n        el: document.getElementById('paper'),\n        width: 800,\n        height: 600,\n        model: graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        \n        interactive: { vertexAdd: false } ,\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n            radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n        defaultConnector: { name: 'rounded' },\n        validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n            // Prevent linking from input ports.\n            if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n            // Prevent linking from output ports to input ports within one element.\n            if (cellViewS === cellViewT) return false;\n            // Prevent linking to input ports.\n            return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n            linkMove: true,\n            labelMove: true,\n            arrowheadMove: true,\n            vertexMove: false,\n            vertexAdd: false,\n            vertexRemove: false,\n            useLinkTools: false,\n        },\n        defaultLink: function () {\n            return new joint.shapes.standard.Link({\n                attrs: {\n                    z:1,\n                    line: {\n                        connection: true,\n                        stroke: '#707070',\n                        strokeLinejoin: 'round',\n                    },\n                    wrapper: {\n                        connection: true,\n                        strokeWidth: 10,\n                        strokeLinejoin: 'round'\n                    },\n                    \n                },\n                \n                markup: [{\n                    tagName: 'path',\n                    selector: 'wrapper',\n                    attributes: {\n                        'fill': 'none',\n                        \n                        'stroke': 'transparent'\n                    }\n                }, {\n                    tagName: 'path',\n                    selector: 'line',\n                    attributes: {\n                        'fill': 'none',\n                        \n                    }\n                }]\n            });\n        }\n    });\nvar stencil = new joint.ui.Stencil({\n        paper: paper,\n        width: 200,\n        height: 100,\n        dropAnimation: { duration: 200, easing: 'swing' },\n        \n    });document.getElementById('stencil').appendChild(stencil.render().el);\n    stencil.load(stencilShapes);\n    var selection = new joint.ui.Selection({\n        theme: 'material',\n        paper: paper,\n        useModelGeometry: true,\n       \n    });\n     //halo cấu hình\n       paper.on('cell:pointerup',function (cellView) {\n        var halo = new joint.ui.Halo({\n            cellView: cellView,\n            type: 'toolbar',\n            boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n        });\n        halo.removeHandle('resize');\n        halo.removeHandle('rotate');\n        halo.removeHandle('direction');\n        halo.render();\n        //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n        selectedElement = cellView.model;\n        selectedElement.toFront({ ignoreCommandManager: true })\n        // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\n        // console.log(graph.getLinks())\n    }) \n    //  //cấu hình các cell dc chọn\n    // paper.svg.prepend(\n    // `\n    //         .joint-element .selection {\n    //             stroke: ${color};\n    //         }\n    //         .joint-link .selection {\n    //             stroke: ${color}; \n    //             'fill': ${color},\n    //         }\n            \n    //     `\n    // );\n    \n    // //lấy tất cả link ở trc node\n    // function getElementPredecessorLinks(el) {\n    //     return graph\n    //       .getSubgraph([el, ...graph.getPredecessors(el)])\n    //       .filter((cell) => cell.isLink());\n    //   }\n    //   //đổi màu cell\n    //   function highlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.add(\n    //       cell.findView(paper),\n    //       cell.isElement() ? \"body\" : \"line\",\n    //       \"selection\",\n    //       { className: \"selection\" }\n    //     );\n    //     }else{return}\n    //   }\n    //   //chuyển màu cell lại như cũ\n    //   function unhighlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.remove(cell.findView(paper), \"selection\");\n    //     }\n    //     else{return}\n    //   }\n    //   //function xử lý hành dộng chọn el\n    //   function selectElement(el) {     \n    //     if (selectionNode === el) return;\n    //     if (selectionNode) {\n            \n    //       unhighlightCell(selectionNode);\n    //       graph.getLinks().forEach((link) => unhighlightCell(link));\n    //     }\n    //     if (el) {\n            \n    //       highlightCell(el);\n    //       getElementPredecessorLinks(el).forEach((link) => {\n    //           highlightCell(link)\n    //           link.toFront({ ignoreCommandManager: true })\n              \n    //         //   link.attributes.z+=1\n            \n              \n    //         });\n    //       selectionNode = el;\n    //     } else {\n    //         selectionNode = null;\n    //     }\n    //   }   \n    }\n      \n  }\n  }\n\n  \n\n</script>\n\n<style >\n@import \"@/../public/vendor/jointJS/build/package/rappid.css\";\n@import \"@/css/data_flow.css\";\n@import \"@/css/lib/rappid.min.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.elements.joint-paper.joint-theme-default{\n    width:100% !important;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}