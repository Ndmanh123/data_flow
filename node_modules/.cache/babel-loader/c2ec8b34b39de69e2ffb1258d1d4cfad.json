{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"canvas\",\n  ref: \"canvas\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div id=\\\"app\\\"><div class=\\\"btn_contain\\\"><button id=\\\"btn-zoomout\\\" class=\\\"btn\\\">zoom out</button><button id=\\\"btn-zoomin\\\" class=\\\"btn\\\">zoom in</button><button id=\\\"btn-center\\\" class=\\\"btn\\\">center</button><button id=\\\"btn-center-content\\\" class=\\\"btn\\\">center content</button></div><div id=\\\"stencil\\\"></div><div id=\\\"paper\\\"></div><div id=\\\"navigator\\\"></div></div>\", 1);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, null, 512\n  /* NEED_PATCH */\n  ), _hoisted_2], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;EAASC,GAAG,EAAC;;;;;;6DAAxBC,oBAAuC,KAAvC,cAAuC,IAAvC,EAAuC;EAAA;EAAvC,GACAC","names":["class","ref","_createElementVNode","_hoisted_2"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"canvas\" ref=\"canvas\"></div>\n  <div id=\"app\">\n    <div class=\"btn_contain\">\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\n        <button id=\"btn-center\" class=\"btn\">center</button>\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\n    </div>\n    <div id=\"stencil\"></div>\n    \n    <div id=\"paper\"></div>\n    <div id=\"navigator\"></div>\n    \n    \n        </div>\n</template>\n\n<script>\nimport '@/../public/vendor/node_modules/jquery/dist/jquery.js'\nimport '@/../public/vendor/js/lib/jquery.min.js'\nimport '@/../public/vendor/js/lib/lodash.min.js'\nimport '@/../public/vendor/js/lib/backbone.min.js'\nimport '@/../public/vendor/js/lib/rappid.min.js'\nimport '@/../public/vendor/node_modules/lodash/lodash.js'\nimport '@/../public/vendor/node_modules/backbone/backbone.js'\nimport '@/../public/vendor/build/package/rappid.js'\n// import { Options, Vue } from 'vue-class-component';\nexport default {\n  mounted() {\n    var highlighters=joint.highlighters;\n    var mask = joint.highlighters.mask;\n    let selectionNode = null;\n    let selectedElement = null;\n    let selectedLink = null\n    //check ctrl shift\n    var ctrlDown = false;\n    var shiftDown = false;\n    const color = \"rgb(255 136 0)\";\n    var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n                rx: 5,\n                ry: 5,\n\n            }\n        },\n        ports: {\n            items: [{\n                id: 'out-port',\n                group: 'out',\n\n            },\n            {\n                id: 'in-port',\n                group: 'in'\n            }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n\n                        }\n                    }\n                },\n                in: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'left'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'passive',\n                            fill: '#FFFFFF',\n                            stroke: '#187BD3',\n\n                        }\n                    }\n                }\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            },\n            {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n            },\n            line: {\n                connection: true,\n                stroke: '#333333',\n                strokeWidth: 2,\n                strokeLinejoin: 'round',\n                targetMarker: {\n                    'type': 'path',\n                    'd': 'M 10 -5 0 0 10 5 z'\n                }\n            },\n        },\n        ports: {\n            items: [\n                {\n                    id: 'out-port',\n                    group: 'out'\n                }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n                        }\n                    }\n                },\n\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            }, {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n    var toolsView = new joint.dia.ToolsView({\n    tools: [\n        targetArrowheadTool,\n    ]\n    });\n    var CustomLinkView = joint.dia.LinkView.extend({\n        // custom interactions:\n        pointerdblclick: function(evt, x, y) {\n            this.addVertex(x, y);\n        },\n        contextmenu: function(evt, x, y) {\n            this.addLabel(x, y);\n        },\n    \n        // custom options:\n        options: joint.util.defaults({\n            doubleLinkTools: true,\n        }, joint.dia.LinkView.prototype.options)\n    });\n    var graph = new joint.dia.Graph;\n    //ctrl+z\n    var commandManager = new joint.dia.CommandManager({ graph: graph });\n    \n    //cấu hình paper\n    var paper = new joint.dia.Paper({  \n        el:$('#paper'),\n        width: 800,\n        height: 600,\n        model: graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        linkView: CustomLinkView,\n        interactive: { vertexAdd: false } ,\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n            radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n        defaultConnector: { name: 'rounded' },\n        validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n            // Prevent linking from input ports.\n            if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n            // Prevent linking from output ports to input ports within one element.\n            if (cellViewS === cellViewT) return false;\n            // Prevent linking to input ports.\n            return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n            linkMove: true,\n            labelMove: true,\n            arrowheadMove: true,\n            vertexMove: false,\n            vertexAdd: false,\n            vertexRemove: false,\n            useLinkTools: false,\n        },\n        defaultLink: function () {\n            return new joint.shapes.standard.Link({\n                attrs: {\n                    line: {\n                        connection: true,\n                        stroke: '#707070',\n                        strokeLinejoin: 'round',\n                    },\n                    wrapper: {\n                        connection: true,\n                        strokeWidth: 10,\n                        strokeLinejoin: 'round'\n                    },\n                    \n                },\n                \n                markup: [{\n                    tagName: 'path',\n                    selector: 'wrapper',\n                    attributes: {\n                        'fill': 'none',\n                        \n                        'stroke': 'transparent'\n                    }\n                }, {\n                    tagName: 'path',\n                    selector: 'line',\n                    attributes: {\n                        'fill': 'none',\n                        \n                    }\n                }]\n            });\n        }\n    });\n    //paperScroller\n    var paperScroller = new joint.ui.PaperScroller({\n        paper: paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: 'grab'\n        \n    });\n    // cấu hình snaplines\n    var snaplines = new joint.ui.Snaplines({ paper: paper })\n    snaplines.startListening()\n    // cấu hình Stencil \n    var stencil = new joint.ui.Stencil({\n        paper: paperScroller,\n        width: 900,\n        height: 60,\n        dropAnimation: { duration: 200, easing: 'swing' },\n        \n    });\n    // cấu hình Selection\n    var selection = new joint.ui.Selection({\n        theme: 'material',\n        paper: paper,\n        useModelGeometry: true,\n        allowTranslate: true,\n    });\n    //hàm viết hoa chữ đầu\n    function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    //hàm render stencil\n    function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n        arr.forEach(element => {\n            //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n            let elementName = jsUcfirst(element)\n            if (elementName === jsUcfirst(elNoInPorts)) {\n                element = new customElNoInPorts();\n            }\n            else {\n                element = new customEl();\n            }\n            element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`)\n            stencilShapes.push(element.position(positionX, positionY))\n            if(spaceBetweenElToX>0){\n                positionX += element.attributes.size.width+spaceBetweenElToX;\n            }\n            if(spaceBetweenElToY>0){\n                positionY += element.attributes.size.height+spaceBetweenElToY;\n            }\n        });\n    }\n    var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n    //mảng chứa các vị trí của stencil Shape để sau đó render\n    var stencilShapes = []\n    stencilRenderHandler(20,20,arr,\"load\",16)\n    paper.svg.prepend(\n    V.createSVGStyle(`\n            .joint-element .selection {\n                stroke: ${color};\n            }\n            .joint-link .selection {\n                stroke: ${color}; \n                'fill': ${color},\n            }\n            \n        `)\n    );\n  }\n\n  \n}\n</script>\n\n<style >\n@import \"@/../public/vendor/build/package/rappid.css\";\n@import \"@/css/data_flow.css\";\n@import \"@/css/lib/rappid.min.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}