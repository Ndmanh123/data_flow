{"ast":null,"code":"import '@/../public/vendor/node_modules/backbone/backbone.js';\nimport '@/../public/vendor/jointJS/node_modules/jquery/dist/jquery.js';\nimport '@/../public/vendor/jointJS/node_modules/lodash/lodash.js';\nimport '@/../public/vendor/jointJS/js/lib/backbone.min.js';\n\nconst joint = require('jointjs');\n\nwindow.$ = require('jquery'); // import { Options, Vue } from 'vue-class-component';\n\nexport default {\n  mounted() {\n    // var highlighters=joint.highlighters;\n    // let selectionNode = null;\n    // let selectedElement = null;\n    // let selectedLink = null\n    // //check ctrl shift\n    // var ctrlDown = false;\n    // var shiftDown = false;\n    // const color = \"rgb(255 136 0)\";\n    // var customEl = joint.dia.Element.define('standard.Rectangle', {\n    //     z: 1,\n    //     size: {\n    //         width: 44,\n    //         height: 35\n    //     },\n    //     removable: false,\n    //     attrs: {\n    //         image: {\n    //             x: 5,\n    //             y: 5,\n    //             width: 'calc(w-10)',\n    //             height: 'calc(h-10 )'\n    //         },\n    //         root: {\n    //             magnet: false\n    //         },\n    //         body: {\n    //             fill: '#FFFFFF',\n    //             stroke: '#A0A0A0',\n    //             width: 'calc(w)',\n    //             height: 'calc(h)',\n    //             strokeWidth: 2,\n    //             rx: 5,\n    //             ry: 5,\n    //         }\n    //     },\n    //     ports: {\n    //         items: [{\n    //             id: 'out-port',\n    //             group: 'out',\n    //         },\n    //         {\n    //             id: 'in-port',\n    //             group: 'in'\n    //         }\n    //         ],\n    //         groups: {\n    //             out: {\n    //                 markup: [{\n    //                     tagName: 'circle',\n    //                     selector: 'portBody'\n    //                 }],\n    //                 position: {\n    //                     name: 'right'\n    //                 },\n    //                 attrs: {\n    //                     portBody: {\n    //                         r: 5,\n    //                         magnet: 'active',\n    //                         fill: '#187BD3',\n    //                         stroke: '#187BD3'\n    //                     }\n    //                 }\n    //             },\n    //             in: {\n    //                 markup: [{\n    //                     tagName: 'circle',\n    //                     selector: 'portBody'\n    //                 }],\n    //                 position: {\n    //                     name: 'left'\n    //                 },\n    //                 attrs: {\n    //                     portBody: {\n    //                         r: 5,\n    //                         magnet: 'passive',\n    //                         fill: '#FFFFFF',\n    //                         stroke: '#187BD3',\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     },\n    //     markup: [\n    //         {\n    //             tagName: 'rect',\n    //             selector: 'body',\n    //         },\n    //         {\n    //             tagName: 'image',\n    //             selector: 'image'\n    //         }, {\n    //             tagName: 'ports',\n    //             selector: 'ports'\n    //         }]\n    // })\n    // var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n    //     z: 1,\n    //     theme: 'material',\n    //     size: {\n    //         width: 44,\n    //         height: 35\n    //     },\n    //     removable: false,\n    //     attrs: {\n    //         image: {\n    //             x: 5,\n    //             y: 5,\n    //             width: 'calc(w-10)',\n    //             height: 'calc(h-10 )'\n    //         },\n    //         root: {\n    //             magnet: false\n    //         },\n    //         body: {\n    //             fill: '#FFFFFF',\n    //             stroke: '#A0A0A0',\n    //             width: 'calc(w)',\n    //             height: 'calc(h)',\n    //             strokeWidth: 2,\n    //         },\n    //         line: {\n    //             connection: true,\n    //             stroke: '#333333',\n    //             strokeWidth: 2,\n    //             strokeLinejoin: 'round',\n    //             targetMarker: {\n    //                 'type': 'path',\n    //                 'd': 'M 10 -5 0 0 10 5 z'\n    //             }\n    //         },\n    //     },\n    //     ports: {\n    //         items: [\n    //             {\n    //                 id: 'out-port',\n    //                 group: 'out'\n    //             }\n    //         ],\n    //         groups: {\n    //             out: {\n    //                 markup: [{\n    //                     tagName: 'circle',\n    //                     selector: 'portBody'\n    //                 }],\n    //                 position: {\n    //                     name: 'right'\n    //                 },\n    //                 attrs: {\n    //                     portBody: {\n    //                         r: 5,\n    //                         magnet: 'active',\n    //                         fill: '#187BD3',\n    //                         stroke: '#187BD3'\n    //                     }\n    //                 }\n    //             },\n    //         }\n    //     },\n    //     markup: [\n    //         {\n    //             tagName: 'rect',\n    //             selector: 'body',\n    //         }, {\n    //             tagName: 'image',\n    //             selector: 'image'\n    //         }, {\n    //             tagName: 'ports',\n    //             selector: 'ports'\n    //         }]\n    // })\n    // var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n    // var toolsView = new joint.dia.ToolsView({\n    // tools: [\n    //     targetArrowheadTool,\n    // ]\n    // });\n    // var CustomLinkView = joint.dia.LinkView.extend({\n    //     // custom interactions:\n    //     pointerdblclick: function(evt, x, y) {\n    //         this.addVertex(x, y);\n    //     },\n    //     contextmenu: function(evt, x, y) {\n    //         this.addLabel(x, y);\n    //     },\n    //     // custom options:\n    //     options: joint.util.defaults({\n    //         doubleLinkTools: true,\n    //     }, joint.dia.LinkView.prototype.options)\n    // });\n    // var graph = new joint.dia.Graph;\n    // //ctrl+z\n    // var commandManager = new joint.dia.CommandManager({ graph: graph });\n    // //cấu hình paper\n    // var paper = new joint.dia.Paper({  \n    //     el:$('#paper'),\n    //     width: 800,\n    //     height: 600,\n    //     model: graph,\n    //     async: true,\n    //     sorting: joint.dia.Paper.sorting.APPROX,\n    //     gridSize: 10,\n    //     drawGrid: true,\n    //     restrictTranslate: true,\n    //     stopDelegation: false,\n    //     linkView: CustomLinkView,\n    //     interactive: { vertexAdd: false } ,\n    //     // background: { color: '#F3F7F6' },\n    //     // defaultConnectionPoint: { name: 'boundary' },\n    //     // defaultConnector: {\n    //     //     name: \"rounded\"\n    //     //   },\n    //     //   defaultRouter: {\n    //     //     name: \"manhattan\",\n    //     //     args: {\n    //     //       step: 10,\n    //     //       endDirections: [\"bottom\"],\n    //     //       startDirections: [\"top\"],\n    //     //       padding: { bottom: 20 }\n    //     //     }\n    //     //   },\n    //     snapLinks: {\n    //         radius: 75\n    //     },\n    //     linkPinning: false,\n    //     multiLinks: false,\n    //     defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n    //     defaultConnector: { name: 'rounded' },\n    //     validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n    //         // Prevent linking from input ports.\n    //         if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n    //         // Prevent linking from output ports to input ports within one element.\n    //         if (cellViewS === cellViewT) return false;\n    //         // Prevent linking to input ports.\n    //         return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n    //     },\n    //     // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n    //     //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n    //     //     return view1 !== view2;\n    //     // },\n    //     interactive: {\n    //         linkMove: true,\n    //         labelMove: true,\n    //         arrowheadMove: true,\n    //         vertexMove: false,\n    //         vertexAdd: false,\n    //         vertexRemove: false,\n    //         useLinkTools: false,\n    //     },\n    //     defaultLink: function () {\n    //         return new joint.shapes.standard.Link({\n    //             attrs: {\n    //                 line: {\n    //                     connection: true,\n    //                     stroke: '#707070',\n    //                     strokeLinejoin: 'round',\n    //                 },\n    //                 wrapper: {\n    //                     connection: true,\n    //                     strokeWidth: 10,\n    //                     strokeLinejoin: 'round'\n    //                 },\n    //             },\n    //             markup: [{\n    //                 tagName: 'path',\n    //                 selector: 'wrapper',\n    //                 attributes: {\n    //                     'fill': 'none',\n    //                     'stroke': 'transparent'\n    //                 }\n    //             }, {\n    //                 tagName: 'path',\n    //                 selector: 'line',\n    //                 attributes: {\n    //                     'fill': 'none',\n    //                 }\n    //             }]\n    //         });\n    //     }\n    // });\n    // //paperScroller\n    // var paperScroller = new joint.ui.PaperScroller({\n    //     paper: paper,\n    //     autoResizePaper: true,\n    //     scrollWhileDragging: true,\n    //     cursor: 'grab'\n    // });\n    // // cấu hình snaplines\n    // var snaplines = new joint.ui.Snaplines({ paper: paper })\n    // snaplines.startListening()\n    // // cấu hình Stencil \n    // var stencil = new joint.ui.Stencil({\n    //     paper: paperScroller,\n    //     width: 900,\n    //     height: 60,\n    //     dropAnimation: { duration: 200, easing: 'swing' },\n    // });\n    // // cấu hình Selection\n    // var selection = new joint.ui.Selection({\n    //     theme: 'material',\n    //     paper: paper,\n    //     useModelGeometry: true,\n    //     allowTranslate: true,\n    // });\n    // //hàm viết hoa chữ đầu\n    // function jsUcfirst(string) {\n    //     return string.charAt(0).toUpperCase() + string.slice(1);\n    // }\n    // //hàm render stencil\n    // function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n    //     arr.forEach(element => {\n    //         //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n    //         let elementName = jsUcfirst(element)\n    //         if (elementName === jsUcfirst(elNoInPorts)) {\n    //             element = new customElNoInPorts();\n    //         }\n    //         else {\n    //             element = new customEl();\n    //         }\n    //         element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`)\n    //         stencilShapes.push(element.position(positionX, positionY))\n    //         if(spaceBetweenElToX>0){\n    //             positionX += element.attributes.size.width+spaceBetweenElToX;\n    //         }\n    //         if(spaceBetweenElToY>0){\n    //             positionY += element.attributes.size.height+spaceBetweenElToY;\n    //         }\n    //     });\n    // }\n    // var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n    // //mảng chứa các vị trí của stencil Shape để sau đó render\n    // var stencilShapes = []\n    // stencilRenderHandler(20,20,arr,\"load\",16)\n    // paper.svg.prepend(\n    // V.createSVGStyle(`\n    //         .joint-element .selection {\n    //             stroke: ${color};\n    //         }\n    //         .joint-link .selection {\n    //             stroke: ${color}; \n    //             'fill': ${color},\n    //         }\n    //     `)\n    // );\n    // //lấy tất cả link ở trc node\n    // function getElementPredecessorLinks(el) {\n    //     return graph\n    //       .getSubgraph([el, ...graph.getPredecessors(el)])\n    //       .filter((cell) => cell.isLink());\n    //   }\n    //   //đổi màu cell\n    //   function highlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.add(\n    //       cell.findView(paper),\n    //       cell.isElement() ? \"body\" : \"line\",\n    //       \"selection\",\n    //       { className: \"selection\" }\n    //     );\n    //     }else{return}\n    //   }\n    //   //chuyển màu cell lại như cũ\n    //   function unhighlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.remove(cell.findView(paper), \"selection\");\n    //     }\n    //     else{return}\n    //   }\n    //   //function xử lý hành dộng chọn el\n    //   function selectElement(el) {     \n    //     if (selectionNode === el) return;\n    //     if (selectionNode) {\n    //       unhighlightCell(selectionNode);\n    //       graph.getLinks().forEach((link) => unhighlightCell(link));\n    //     }\n    //     if (el) {\n    //       highlightCell(el);\n    //       getElementPredecessorLinks(el).forEach((link) => {\n    //           highlightCell(link)\n    //           link.toFront()\n    //         });\n    //       selectionNode = el;\n    //     } else {\n    //         selectionNode = null;\n    //     }\n    //   }\n    //   //halo cấu hình\n    //    paper.on('cell:pointerup',function (cellView) {\n    //     var halo = new joint.ui.Halo({\n    //         cellView: cellView,\n    //         type: 'toolbar',\n    //         boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n    //     });\n    //     halo.removeHandle('resize');\n    //     halo.removeHandle('rotate');\n    //     halo.removeHandle('direction');\n    //     halo.render();\n    //     //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n    //     selectedElement = cellView.model;\n    //     selectedElement.toFront()\n    //     // console.log(graph.getLinks())\n    // })\n    //   //xử lý khi các sự kiện với paper\n    //   paper.on({\n    //       //xử lý khi các sự kiện \n    //     \"cell:mouseenter\":(cellView)=>{\n    //             cellView.model.toFront()\n    //     },\n    //     \"cell:mouseleave\":(cellView)=>{\n    //         cellView.model.toBack()\n    //         if(selectionNode){\n    //             getElementPredecessorLinks(selectionNode).forEach((link) => {\n    //                 link.toFront()\n    //               });\n    //         }\n    //     },\n    //     \"element:pointerclick\":(cellView) =>{\n    //         //chỉ đổi màu khi ko bấm ctrl\n    //         if(ctrlDown ===false )\n    //             { \n    //                 selectElement(cellView.model)\n    //             }\n    //         },\n    //         \"link:pointerclick\":(cellView) =>\n    //             {selectElement(cellView.model)\n    //                 //chon vao link thi mo cho phep doi node\n    //                 cellView.addTools(toolsView);\n    //             },\n    //             //chuyển lại màu cũ khi bấm ra ngoài\n    //         \"blank:pointerclick\":() => {selectElement(null)\n    //             paper.removeTools();\n    //             },\n    //         'element:pointerup': function (cellView, evt) {\n    //             if (evt.ctrlKey || evt.metaKey) {\n    //                 selection.collection.add(cellView.model);\n    //                 //loop to all the element in selection and set it to front\n    //                 selection.collection.models.forEach(element => {\n    //                     element.toFront()\n    //                 })               \n    //             }\n    //         },\n    //         //chuyển màu khi bấm vào link và cho nó lên trc\n    //         'link:pointerup': function (cellView) {\n    //             selectedLink = cellView.model;\n    //             selectedLink.toFront()\n    //         },\n    //         // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n    //         'blank:pointerdown':function(evt, x, y) {\n    //             if (shiftDown===true) {\n    //                 selectElement(null)\n    //                 paperScroller.setCursor('crosshair')\n    //                 selection.startSelecting(evt);\n    //                 console.log(selection)\n    //             } else {\n    //                 selection.collection.reset([]);\n    //                 paperScroller.startPanning(evt, x, y);\n    //                 paper.removeTools();\n    //                 paperScroller.setCursor('grab');\n    //             }\n    //         },\n    //   })\n    //   //xóa el nếu chọn lại lần 2 khi bấm ctrl\n    //   selection.on('selection-box:pointerdown', function (cellView, evt) {\n    //     if (evt.ctrlKey || evt.metaKey) {\n    //         selection.collection.remove(cellView.model);\n    //     }\n    // });\n    // //xóa bằng nút delete\n    // document.addEventListener('keyup', function (evt) {\n    //     if (!selectedElement && !selection) return;\n    //     if (evt.code === 'Backspace' || evt.code === 'Delete') {\n    //         //xóa 1 el\n    //         if (selectedElement) {\n    //             selectedElement.remove();\n    //             selectedElement = null;\n    //             selectionNode=null;\n    //         }\n    //         //xóa toàn bộ  el đã chọn\n    //         if (selection) {\n    //             // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n    //             evt.preventDefault();\n    //             graph.removeCells(selection.collection.toArray())\n    //             selectionNode=null;\n    //         }\n    //     }\n    // }\n    // );\n    // //nếu bấm thì =true\n    // document.addEventListener('keydown', function (evt) {\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = true;\n    //     }\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = true;\n    //     }\n    // })\n    // //nếu thả nút thì =false\n    // document.addEventListener('keyup', function (evt) {\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = false;\n    //     }\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = false;\n    //     }\n    // })\n    // //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n    // document.addEventListener('keydown', function (evt) {\n    //     var clipboard = new joint.ui.Clipboard();\n    //     if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n    //         console.log(evt.code)\n    //         paperScroller.zoom(0.2, { max: 4 });\n    //     }\n    //     if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n    //         paperScroller.zoom(-0.2, { min: 0.2 });\n    //         console.log(evt.code)\n    //     }\n    //     //check+ A\n    //     if (evt.code === \"KeyA\" && ctrlDown === true) {\n    //         selection.collection.reset(graph.getElements())\n    //         evt.preventDefault();\n    //     }//check ctrl + Z\n    //     if (evt.code === \"KeyZ\" && ctrlDown === true) {\n    //         commandManager.undo();\n    //         unhighlightCell(selectionNode);\n    //         graph.getLinks().forEach((link) => unhighlightCell(link));\n    //         console.log(selectionNode)\n    //         selectionNode=null\n    //     }\n    //     //check ctrl + Y\n    //     if (evt.code === \"KeyY\" && ctrlDown === true) {\n    //         commandManager.redo();\n    //         selectElement(null)\n    //     }\n    //     //check ctrl + V ,ctrl + C, ctrl+X\n    //     if (evt.code === \"KeyX\" && ctrlDown === true) {\n    //         clipboard.cutElements(selection.collection, paper.model)\n    //     }\n    //     if (evt.code === \"KeyC\" && ctrlDown === true) {\n    //         clipboard.copyElements(selection.collection, graph);\n    //     }\n    //     if (evt.code === \"KeyV\" && ctrlDown === true) {\n    //         var pastedCells = clipboard.pasteCells(graph, {\n    //             translate: { dx: 40, dy: 40 },\n    //             useLocalStorage: true\n    //         });\n    //         var elements = _.filter(pastedCells, function (cell) {\n    //             return cell.isElement();\n    //         });\n    //         // Make sure pasted elements get selected immediately. This makes the UX better as\n    //         // the user can immediately manipulate the pasted elements.\n    //         selection.collection.reset(elements);\n    //     }\n    // })\n    // // nut zoomin zoom out can chuyen ve scroll\n    // $('#btn-zoomin').on('click', function() {\n    //     paperScroller.zoom(0.2, { max: 4 });\n    // });\n    // $('#btn-zoomout').on('click', function() {\n    //     paperScroller.zoom(-0.2, { min: 0.2 });\n    // });\n    // $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n    // $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller));\n    // //render paper\n    // document.getElementById('paper').appendChild(paperScroller.render().el);\n    // //render paperScroller\n    // paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\n    // paperScroller.center();\n    //  //render stencil ra màn hình\n    //  document.getElementById('stencil').appendChild(stencil.render().el);\n    //  stencil.load(stencilShapes);\n    //  selection.collection.reset(graph.getElements());\n    // //  var linkView = paper.findViewByModel(link);\n    let graph = new joint.dia.Graph();\n    let paper = new joint.dia.Paper({\n      el: $('#paper'),\n      width: 600,\n      height: 200,\n      model: graph,\n      gridSize: 1\n    });\n    let rect = new joint.shapes.basic.Rect({\n      position: {\n        x: 100,\n        y: 30\n      },\n      size: {\n        width: 100,\n        height: 30\n      },\n      attrs: {\n        rect: {\n          fill: 'blue'\n        },\n        text: {\n          text: 'my box',\n          fill: 'white'\n        }\n      }\n    });\n    let rect2 = rect.clone();\n    rect2.translate(300);\n    let link = new joint.dia.Link({\n      source: {\n        id: rect.id\n      },\n      target: {\n        id: rect2.id\n      }\n    });\n    graph.addCells([rect, rect2, link]);\n  }\n\n};","map":{"version":3,"mappings":"AAqBA,OAAO,sDAAP;AACA,OAAO,+DAAP;AACA,OAAO,0DAAP;AACA,OAAO,mDAAP;;AAEA,MAAMA,KAAI,GAAIC,OAAO,CAAC,SAAD,CAArB;;AACAC,MAAM,CAACC,CAAP,GAAWF,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;AACA,eAAe;EACbG,OAAO,GAAG;IACR;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACC,IAAIC,KAAI,GAAI,IAAIL,KAAK,CAACM,GAAN,CAAUC,KAAd,EAAZ;IAEO,IAAIC,KAAI,GAAI,IAAIR,KAAK,CAACM,GAAN,CAAUG,KAAd,CAAoB;MAC5BC,EAAE,EAAEP,CAAC,CAAC,QAAD,CADuB;MAE5BQ,KAAK,EAAE,GAFqB;MAG5BC,MAAM,EAAE,GAHoB;MAI5BC,KAAK,EAAER,KAJqB;MAK5BS,QAAQ,EAAE;IALkB,CAApB,CAAZ;IAQA,IAAIC,IAAG,GAAI,IAAIf,KAAK,CAACgB,MAAN,CAAaC,KAAb,CAAmBC,IAAvB,CAA4B;MACnCC,QAAQ,EAAE;QAAEC,CAAC,EAAE,GAAL;QAAUC,CAAC,EAAE;MAAb,CADyB;MAEnCC,IAAI,EAAE;QAAEX,KAAK,EAAE,GAAT;QAAcC,MAAM,EAAE;MAAtB,CAF6B;MAGnCW,KAAK,EAAE;QAAER,IAAI,EAAE;UAAES,IAAI,EAAE;QAAR,CAAR;QAA0BC,IAAI,EAAE;UAAEA,IAAI,EAAE,QAAR;UAAkBD,IAAI,EAAE;QAAxB;MAAhC;IAH4B,CAA5B,CAAX;IAMA,IAAIE,KAAI,GAAIX,IAAI,CAACY,KAAL,EAAZ;IACAD,KAAK,CAACE,SAAN,CAAgB,GAAhB;IAEA,IAAIC,IAAG,GAAI,IAAI7B,KAAK,CAACM,GAAN,CAAUwB,IAAd,CAAmB;MAC1BC,MAAM,EAAE;QAAEC,EAAE,EAAEjB,IAAI,CAACiB;MAAX,CADkB;MAE1BC,MAAM,EAAE;QAAED,EAAE,EAAEN,KAAK,CAACM;MAAZ;IAFkB,CAAnB,CAAX;IAKA3B,KAAK,CAAC6B,QAAN,CAAe,CAACnB,IAAD,EAAOW,KAAP,EAAcG,IAAd,CAAf;EACJ;;AA1nBO,CAAf","names":["joint","require","window","$","mounted","graph","dia","Graph","paper","Paper","el","width","height","model","gridSize","rect","shapes","basic","Rect","position","x","y","size","attrs","fill","text","rect2","clone","translate","link","Link","source","id","target","addCells"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\App.vue"],"sourcesContent":["<template>\n<h1>Home</h1>\n  <div class=\"canvas\" ref=\"canvas\"></div>\n  \n  <div id=\"app\">\n    <div class=\"btn_contain\">\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\n        <button id=\"btn-center\" class=\"btn\">center</button>\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\n    </div>\n    <div id=\"stencil\"></div>\n    \n    <div id=\"paper\"></div>\n    <div id=\"navigator\"></div>\n    \n    \n        </div>\n</template>\n\n<script>\nimport '@/../public/vendor/node_modules/backbone/backbone.js'\nimport '@/../public/vendor/jointJS/node_modules/jquery/dist/jquery.js'\nimport '@/../public/vendor/jointJS/node_modules/lodash/lodash.js'\nimport '@/../public/vendor/jointJS/js/lib/backbone.min.js'\n\nconst joint = require('jointjs');\nwindow.$ = require('jquery');\n\n// import { Options, Vue } from 'vue-class-component';\nexport default {\n  mounted() {\n    // var highlighters=joint.highlighters;\n    \n    // let selectionNode = null;\n    // let selectedElement = null;\n    // let selectedLink = null\n    // //check ctrl shift\n    // var ctrlDown = false;\n    // var shiftDown = false;\n    // const color = \"rgb(255 136 0)\";\n    // var customEl = joint.dia.Element.define('standard.Rectangle', {\n    //     z: 1,\n    //     size: {\n    //         width: 44,\n    //         height: 35\n    //     },\n    //     removable: false,\n    //     attrs: {\n    //         image: {\n    //             x: 5,\n    //             y: 5,\n    //             width: 'calc(w-10)',\n    //             height: 'calc(h-10 )'\n    //         },\n    //         root: {\n    //             magnet: false\n    //         },\n    //         body: {\n    //             fill: '#FFFFFF',\n    //             stroke: '#A0A0A0',\n    //             width: 'calc(w)',\n    //             height: 'calc(h)',\n    //             strokeWidth: 2,\n    //             rx: 5,\n    //             ry: 5,\n\n    //         }\n    //     },\n    //     ports: {\n    //         items: [{\n    //             id: 'out-port',\n    //             group: 'out',\n\n    //         },\n    //         {\n    //             id: 'in-port',\n    //             group: 'in'\n    //         }\n    //         ],\n    //         groups: {\n    //             out: {\n    //                 markup: [{\n    //                     tagName: 'circle',\n    //                     selector: 'portBody'\n    //                 }],\n    //                 position: {\n    //                     name: 'right'\n    //                 },\n    //                 attrs: {\n    //                     portBody: {\n    //                         r: 5,\n    //                         magnet: 'active',\n    //                         fill: '#187BD3',\n    //                         stroke: '#187BD3'\n\n    //                     }\n    //                 }\n    //             },\n    //             in: {\n    //                 markup: [{\n    //                     tagName: 'circle',\n    //                     selector: 'portBody'\n    //                 }],\n    //                 position: {\n    //                     name: 'left'\n    //                 },\n    //                 attrs: {\n    //                     portBody: {\n    //                         r: 5,\n    //                         magnet: 'passive',\n    //                         fill: '#FFFFFF',\n    //                         stroke: '#187BD3',\n\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     },\n    //     markup: [\n    //         {\n    //             tagName: 'rect',\n    //             selector: 'body',\n    //         },\n    //         {\n    //             tagName: 'image',\n    //             selector: 'image'\n    //         }, {\n    //             tagName: 'ports',\n    //             selector: 'ports'\n    //         }]\n    // })\n    // var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n    //     z: 1,\n    //     theme: 'material',\n    //     size: {\n    //         width: 44,\n    //         height: 35\n    //     },\n    //     removable: false,\n    //     attrs: {\n    //         image: {\n    //             x: 5,\n    //             y: 5,\n    //             width: 'calc(w-10)',\n    //             height: 'calc(h-10 )'\n    //         },\n    //         root: {\n    //             magnet: false\n    //         },\n    //         body: {\n    //             fill: '#FFFFFF',\n    //             stroke: '#A0A0A0',\n    //             width: 'calc(w)',\n    //             height: 'calc(h)',\n    //             strokeWidth: 2,\n    //         },\n    //         line: {\n    //             connection: true,\n    //             stroke: '#333333',\n    //             strokeWidth: 2,\n    //             strokeLinejoin: 'round',\n    //             targetMarker: {\n    //                 'type': 'path',\n    //                 'd': 'M 10 -5 0 0 10 5 z'\n    //             }\n    //         },\n    //     },\n    //     ports: {\n    //         items: [\n    //             {\n    //                 id: 'out-port',\n    //                 group: 'out'\n    //             }\n    //         ],\n    //         groups: {\n    //             out: {\n    //                 markup: [{\n    //                     tagName: 'circle',\n    //                     selector: 'portBody'\n    //                 }],\n    //                 position: {\n    //                     name: 'right'\n    //                 },\n    //                 attrs: {\n    //                     portBody: {\n    //                         r: 5,\n    //                         magnet: 'active',\n    //                         fill: '#187BD3',\n    //                         stroke: '#187BD3'\n    //                     }\n    //                 }\n    //             },\n\n    //         }\n    //     },\n    //     markup: [\n    //         {\n    //             tagName: 'rect',\n    //             selector: 'body',\n    //         }, {\n    //             tagName: 'image',\n    //             selector: 'image'\n    //         }, {\n    //             tagName: 'ports',\n    //             selector: 'ports'\n    //         }]\n    // })\n    // var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n    // var toolsView = new joint.dia.ToolsView({\n    // tools: [\n    //     targetArrowheadTool,\n    // ]\n    // });\n    // var CustomLinkView = joint.dia.LinkView.extend({\n    //     // custom interactions:\n    //     pointerdblclick: function(evt, x, y) {\n    //         this.addVertex(x, y);\n    //     },\n    //     contextmenu: function(evt, x, y) {\n    //         this.addLabel(x, y);\n    //     },\n    \n    //     // custom options:\n    //     options: joint.util.defaults({\n    //         doubleLinkTools: true,\n    //     }, joint.dia.LinkView.prototype.options)\n    // });\n    // var graph = new joint.dia.Graph;\n    // //ctrl+z\n    // var commandManager = new joint.dia.CommandManager({ graph: graph });\n    \n    // //cấu hình paper\n    // var paper = new joint.dia.Paper({  \n    //     el:$('#paper'),\n    //     width: 800,\n    //     height: 600,\n    //     model: graph,\n    //     async: true,\n    //     sorting: joint.dia.Paper.sorting.APPROX,\n    //     gridSize: 10,\n    //     drawGrid: true,\n    //     restrictTranslate: true,\n    //     stopDelegation: false,\n    //     linkView: CustomLinkView,\n    //     interactive: { vertexAdd: false } ,\n    //     // background: { color: '#F3F7F6' },\n    //     // defaultConnectionPoint: { name: 'boundary' },\n    //     // defaultConnector: {\n    //     //     name: \"rounded\"\n    //     //   },\n    //     //   defaultRouter: {\n    //     //     name: \"manhattan\",\n    //     //     args: {\n    //     //       step: 10,\n    //     //       endDirections: [\"bottom\"],\n    //     //       startDirections: [\"top\"],\n    //     //       padding: { bottom: 20 }\n    //     //     }\n    //     //   },\n    //     snapLinks: {\n    //         radius: 75\n    //     },\n    //     linkPinning: false,\n    //     multiLinks: false,\n    //     defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n    //     defaultConnector: { name: 'rounded' },\n    //     validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n    //         // Prevent linking from input ports.\n    //         if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n    //         // Prevent linking from output ports to input ports within one element.\n    //         if (cellViewS === cellViewT) return false;\n    //         // Prevent linking to input ports.\n    //         return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n    //     },\n    //     // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n    //     //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n    //     //     return view1 !== view2;\n    //     // },\n    //     interactive: {\n    //         linkMove: true,\n    //         labelMove: true,\n    //         arrowheadMove: true,\n    //         vertexMove: false,\n    //         vertexAdd: false,\n    //         vertexRemove: false,\n    //         useLinkTools: false,\n    //     },\n    //     defaultLink: function () {\n    //         return new joint.shapes.standard.Link({\n    //             attrs: {\n    //                 line: {\n    //                     connection: true,\n    //                     stroke: '#707070',\n    //                     strokeLinejoin: 'round',\n    //                 },\n    //                 wrapper: {\n    //                     connection: true,\n    //                     strokeWidth: 10,\n    //                     strokeLinejoin: 'round'\n    //                 },\n                    \n    //             },\n                \n    //             markup: [{\n    //                 tagName: 'path',\n    //                 selector: 'wrapper',\n    //                 attributes: {\n    //                     'fill': 'none',\n                        \n    //                     'stroke': 'transparent'\n    //                 }\n    //             }, {\n    //                 tagName: 'path',\n    //                 selector: 'line',\n    //                 attributes: {\n    //                     'fill': 'none',\n                        \n    //                 }\n    //             }]\n    //         });\n    //     }\n    // });\n    // //paperScroller\n    // var paperScroller = new joint.ui.PaperScroller({\n    //     paper: paper,\n    //     autoResizePaper: true,\n    //     scrollWhileDragging: true,\n    //     cursor: 'grab'\n        \n    // });\n    // // cấu hình snaplines\n    // var snaplines = new joint.ui.Snaplines({ paper: paper })\n    // snaplines.startListening()\n    // // cấu hình Stencil \n    // var stencil = new joint.ui.Stencil({\n    //     paper: paperScroller,\n    //     width: 900,\n    //     height: 60,\n    //     dropAnimation: { duration: 200, easing: 'swing' },\n        \n    // });\n    // // cấu hình Selection\n    // var selection = new joint.ui.Selection({\n    //     theme: 'material',\n    //     paper: paper,\n    //     useModelGeometry: true,\n    //     allowTranslate: true,\n    // });\n    // //hàm viết hoa chữ đầu\n    // function jsUcfirst(string) {\n    //     return string.charAt(0).toUpperCase() + string.slice(1);\n    // }\n    // //hàm render stencil\n    // function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n    //     arr.forEach(element => {\n    //         //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n    //         let elementName = jsUcfirst(element)\n    //         if (elementName === jsUcfirst(elNoInPorts)) {\n    //             element = new customElNoInPorts();\n    //         }\n    //         else {\n    //             element = new customEl();\n    //         }\n    //         element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`)\n    //         stencilShapes.push(element.position(positionX, positionY))\n    //         if(spaceBetweenElToX>0){\n    //             positionX += element.attributes.size.width+spaceBetweenElToX;\n    //         }\n    //         if(spaceBetweenElToY>0){\n    //             positionY += element.attributes.size.height+spaceBetweenElToY;\n    //         }\n    //     });\n    // }\n    // var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n    // //mảng chứa các vị trí của stencil Shape để sau đó render\n    // var stencilShapes = []\n    // stencilRenderHandler(20,20,arr,\"load\",16)\n    // paper.svg.prepend(\n    // V.createSVGStyle(`\n    //         .joint-element .selection {\n    //             stroke: ${color};\n    //         }\n    //         .joint-link .selection {\n    //             stroke: ${color}; \n    //             'fill': ${color},\n    //         }\n            \n    //     `)\n    // );\n    // //lấy tất cả link ở trc node\n    // function getElementPredecessorLinks(el) {\n    //     return graph\n    //       .getSubgraph([el, ...graph.getPredecessors(el)])\n    //       .filter((cell) => cell.isLink());\n    //   }\n    //   //đổi màu cell\n    //   function highlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.add(\n    //       cell.findView(paper),\n    //       cell.isElement() ? \"body\" : \"line\",\n    //       \"selection\",\n    //       { className: \"selection\" }\n    //     );\n    //     }else{return}\n    //   }\n    //   //chuyển màu cell lại như cũ\n    //   function unhighlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.remove(cell.findView(paper), \"selection\");\n    //     }\n    //     else{return}\n    //   }\n    //   //function xử lý hành dộng chọn el\n    //   function selectElement(el) {     \n    //     if (selectionNode === el) return;\n    //     if (selectionNode) {\n            \n    //       unhighlightCell(selectionNode);\n    //       graph.getLinks().forEach((link) => unhighlightCell(link));\n    //     }\n    //     if (el) {\n            \n    //       highlightCell(el);\n    //       getElementPredecessorLinks(el).forEach((link) => {\n    //           highlightCell(link)\n    //           link.toFront()\n    //         });\n    //       selectionNode = el;\n    //     } else {\n    //         selectionNode = null;\n    //     }\n    //   }\n    //   //halo cấu hình\n    //    paper.on('cell:pointerup',function (cellView) {\n    //     var halo = new joint.ui.Halo({\n    //         cellView: cellView,\n    //         type: 'toolbar',\n    //         boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n    //     });\n    //     halo.removeHandle('resize');\n    //     halo.removeHandle('rotate');\n    //     halo.removeHandle('direction');\n    //     halo.render();\n    //     //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n    //     selectedElement = cellView.model;\n    //     selectedElement.toFront()\n    //     // console.log(graph.getLinks())\n    // })\n   \n    //   //xử lý khi các sự kiện với paper\n    //   paper.on({\n    //       //xử lý khi các sự kiện \n    //     \"cell:mouseenter\":(cellView)=>{\n    //             cellView.model.toFront()\n    //     },\n    //     \"cell:mouseleave\":(cellView)=>{\n    //         cellView.model.toBack()\n    //         if(selectionNode){\n    //             getElementPredecessorLinks(selectionNode).forEach((link) => {\n                   \n    //                 link.toFront()\n    //               });\n    //         }\n    //     },\n    \n    //     \"element:pointerclick\":(cellView) =>{\n    //         //chỉ đổi màu khi ko bấm ctrl\n    //         if(ctrlDown ===false )\n    //             { \n    //                 selectElement(cellView.model)\n    //             }\n    //         },\n    //         \"link:pointerclick\":(cellView) =>\n    //             {selectElement(cellView.model)\n    //                 //chon vao link thi mo cho phep doi node\n    //                 cellView.addTools(toolsView);\n                \n    //             },\n                \n    //             //chuyển lại màu cũ khi bấm ra ngoài\n    //         \"blank:pointerclick\":() => {selectElement(null)\n    //             paper.removeTools();\n    //             },\n            \n    //         'element:pointerup': function (cellView, evt) {\n                \n    //             if (evt.ctrlKey || evt.metaKey) {\n    //                 selection.collection.add(cellView.model);\n    //                 //loop to all the element in selection and set it to front\n    //                 selection.collection.models.forEach(element => {\n    //                     element.toFront()\n    //                 })               \n    //             }\n    //         },\n    //         //chuyển màu khi bấm vào link và cho nó lên trc\n    //         'link:pointerup': function (cellView) {\n    //             selectedLink = cellView.model;\n    //             selectedLink.toFront()\n    //         },\n            \n    //         // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n    //         'blank:pointerdown':function(evt, x, y) {\n    //             if (shiftDown===true) {\n    //                 selectElement(null)\n    //                 paperScroller.setCursor('crosshair')\n    //                 selection.startSelecting(evt);\n    //                 console.log(selection)\n    //             } else {\n    //                 selection.collection.reset([]);\n    //                 paperScroller.startPanning(evt, x, y);\n    //                 paper.removeTools();\n    //                 paperScroller.setCursor('grab');\n    //             }\n        \n    //         },\n    //   })\n    //   //xóa el nếu chọn lại lần 2 khi bấm ctrl\n    //   selection.on('selection-box:pointerdown', function (cellView, evt) {\n    //     if (evt.ctrlKey || evt.metaKey) {\n    //         selection.collection.remove(cellView.model);\n    //     }\n    // });\n    // //xóa bằng nút delete\n    // document.addEventListener('keyup', function (evt) {\n        \n    //     if (!selectedElement && !selection) return;\n    //     if (evt.code === 'Backspace' || evt.code === 'Delete') {\n    //         //xóa 1 el\n    //         if (selectedElement) {\n    //             selectedElement.remove();\n    //             selectedElement = null;\n    //             selectionNode=null;\n    //         }\n    //         //xóa toàn bộ  el đã chọn\n    //         if (selection) {\n    //             // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n    //             evt.preventDefault();\n    //             graph.removeCells(selection.collection.toArray())\n    //             selectionNode=null;\n    //         }\n    //     }\n    // }\n    // );\n    // //nếu bấm thì =true\n    // document.addEventListener('keydown', function (evt) {\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = true;\n    //     }\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = true;\n    //     }\n    // })\n    // //nếu thả nút thì =false\n    // document.addEventListener('keyup', function (evt) {\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = false;\n\n    //     }\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = false;\n    //     }\n    // })\n    // //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n    // document.addEventListener('keydown', function (evt) {\n    //     var clipboard = new joint.ui.Clipboard();\n        \n        \n    //     if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n    //         console.log(evt.code)\n    //         paperScroller.zoom(0.2, { max: 4 });\n    //     }\n    //     if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n    //         paperScroller.zoom(-0.2, { min: 0.2 });\n    //         console.log(evt.code)\n    //     }\n    //     //check+ A\n    //     if (evt.code === \"KeyA\" && ctrlDown === true) {\n    //         selection.collection.reset(graph.getElements())\n    //         evt.preventDefault();\n    //     }//check ctrl + Z\n    //     if (evt.code === \"KeyZ\" && ctrlDown === true) {\n    //         commandManager.undo();\n            \n    //         unhighlightCell(selectionNode);\n    //         graph.getLinks().forEach((link) => unhighlightCell(link));\n    //         console.log(selectionNode)\n    //         selectionNode=null\n    //     }\n    //     //check ctrl + Y\n    //     if (evt.code === \"KeyY\" && ctrlDown === true) {\n    //         commandManager.redo();\n    //         selectElement(null)\n    //     }\n    //     //check ctrl + V ,ctrl + C, ctrl+X\n    //     if (evt.code === \"KeyX\" && ctrlDown === true) {\n\n    //         clipboard.cutElements(selection.collection, paper.model)\n    //     }\n    //     if (evt.code === \"KeyC\" && ctrlDown === true) {\n    //         clipboard.copyElements(selection.collection, graph);\n    //     }\n    //     if (evt.code === \"KeyV\" && ctrlDown === true) {\n    //         var pastedCells = clipboard.pasteCells(graph, {\n    //             translate: { dx: 40, dy: 40 },\n    //             useLocalStorage: true\n    //         });\n\n    //         var elements = _.filter(pastedCells, function (cell) {\n    //             return cell.isElement();\n    //         });\n    //         // Make sure pasted elements get selected immediately. This makes the UX better as\n    //         // the user can immediately manipulate the pasted elements.\n    //         selection.collection.reset(elements);\n\n    //     }\n    // })\n   \n    // // nut zoomin zoom out can chuyen ve scroll\n    // $('#btn-zoomin').on('click', function() {\n    //     paperScroller.zoom(0.2, { max: 4 });\n    // });\n    // $('#btn-zoomout').on('click', function() {\n    //     paperScroller.zoom(-0.2, { min: 0.2 });\n    // });\n    // $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n    // $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller));\n\n    // //render paper\n    // document.getElementById('paper').appendChild(paperScroller.render().el);\n    // //render paperScroller\n    // paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\n    // paperScroller.center();\n    //  //render stencil ra màn hình\n    //  document.getElementById('stencil').appendChild(stencil.render().el);\n    //  stencil.load(stencilShapes);\n    //  selection.collection.reset(graph.getElements());\n    // //  var linkView = paper.findViewByModel(link);\n     let graph = new joint.dia.Graph;\n\n            let paper = new joint.dia.Paper({\n                el: $('#paper'),\n                width: 600,\n                height: 200,\n                model: graph,\n                gridSize: 1\n            });\n\n            let rect = new joint.shapes.basic.Rect({\n                position: { x: 100, y: 30 },\n                size: { width: 100, height: 30 },\n                attrs: { rect: { fill: 'blue' }, text: { text: 'my box', fill: 'white' } }\n            });\n\n            let rect2 = rect.clone();\n            rect2.translate(300);\n\n            let link = new joint.dia.Link({\n                source: { id: rect.id },\n                target: { id: rect2.id }\n            });\n\n            graph.addCells([rect, rect2, link]);\n        }\n  }\n\n  \n\n</script>\n\n<style >\n@import \"@/../public/vendor/jointJS/build/package/rappid.css\";\n@import \"@/css/data_flow.css\";\n@import \"@/css/lib/rappid.min.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}