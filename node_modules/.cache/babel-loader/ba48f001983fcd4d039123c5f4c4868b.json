{"ast":null,"code":"import '@/../public/vendor/node_modules/jquery/dist/jquery.js';\nimport '@/../public/vendor/js/lib/jquery.min.js';\nimport '@/../public/vendor/js/lib/lodash.min.js';\nimport '@/../public/vendor/js/lib/backbone.min.js';\nimport '@/../public/vendor/js/lib/rappid.min.js';\nimport '@/../public/vendor/node_modules/lodash/lodash.js';\nimport '@/../public/vendor/node_modules/backbone/backbone.js';\nimport '@/../public/vendor/build/package/rappid.js'; // import { Options, Vue } from 'vue-class-component';\n\nexport default {\n  mounted() {\n    //   var highlighters=joint.highlighters;\n    //   let selectionNode = null;\n    //   let selectedElement = null;\n    //   let selectedLink = null\n    //   //check ctrl shift\n    //   var ctrlDown = false;\n    //   var shiftDown = false;\n    //   const color = \"rgb(255 136 0)\";\n    //   var customEl = joint.dia.Element.define('standard.Rectangle', {\n    //       z: 1,\n    //       size: {\n    //           width: 44,\n    //           height: 35\n    //       },\n    //       removable: false,\n    //       attrs: {\n    //           image: {\n    //               x: 5,\n    //               y: 5,\n    //               width: 'calc(w-10)',\n    //               height: 'calc(h-10 )'\n    //           },\n    //           root: {\n    //               magnet: false\n    //           },\n    //           body: {\n    //               fill: '#FFFFFF',\n    //               stroke: '#A0A0A0',\n    //               width: 'calc(w)',\n    //               height: 'calc(h)',\n    //               strokeWidth: 2,\n    //               rx: 5,\n    //               ry: 5,\n    //           }\n    //       },\n    //       ports: {\n    //           items: [{\n    //               id: 'out-port',\n    //               group: 'out',\n    //           },\n    //           {\n    //               id: 'in-port',\n    //               group: 'in'\n    //           }\n    //           ],\n    //           groups: {\n    //               out: {\n    //                   markup: [{\n    //                       tagName: 'circle',\n    //                       selector: 'portBody'\n    //                   }],\n    //                   position: {\n    //                       name: 'right'\n    //                   },\n    //                   attrs: {\n    //                       portBody: {\n    //                           r: 5,\n    //                           magnet: 'active',\n    //                           fill: '#187BD3',\n    //                           stroke: '#187BD3'\n    //                       }\n    //                   }\n    //               },\n    //               in: {\n    //                   markup: [{\n    //                       tagName: 'circle',\n    //                       selector: 'portBody'\n    //                   }],\n    //                   position: {\n    //                       name: 'left'\n    //                   },\n    //                   attrs: {\n    //                       portBody: {\n    //                           r: 5,\n    //                           magnet: 'passive',\n    //                           fill: '#FFFFFF',\n    //                           stroke: '#187BD3',\n    //                       }\n    //                   }\n    //               }\n    //           }\n    //       },\n    //       markup: [\n    //           {\n    //               tagName: 'rect',\n    //               selector: 'body',\n    //           },\n    //           {\n    //               tagName: 'image',\n    //               selector: 'image'\n    //           }, {\n    //               tagName: 'ports',\n    //               selector: 'ports'\n    //           }]\n    //   })\n    //   var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n    //       z: 1,\n    //       theme: 'material',\n    //       size: {\n    //           width: 44,\n    //           height: 35\n    //       },\n    //       removable: false,\n    //       attrs: {\n    //           image: {\n    //               x: 5,\n    //               y: 5,\n    //               width: 'calc(w-10)',\n    //               height: 'calc(h-10 )'\n    //           },\n    //           root: {\n    //               magnet: false\n    //           },\n    //           body: {\n    //               fill: '#FFFFFF',\n    //               stroke: '#A0A0A0',\n    //               width: 'calc(w)',\n    //               height: 'calc(h)',\n    //               strokeWidth: 2,\n    //           },\n    //           line: {\n    //               connection: true,\n    //               stroke: '#333333',\n    //               strokeWidth: 2,\n    //               strokeLinejoin: 'round',\n    //               targetMarker: {\n    //                   'type': 'path',\n    //                   'd': 'M 10 -5 0 0 10 5 z'\n    //               }\n    //           },\n    //       },\n    //       ports: {\n    //           items: [\n    //               {\n    //                   id: 'out-port',\n    //                   group: 'out'\n    //               }\n    //           ],\n    //           groups: {\n    //               out: {\n    //                   markup: [{\n    //                       tagName: 'circle',\n    //                       selector: 'portBody'\n    //                   }],\n    //                   position: {\n    //                       name: 'right'\n    //                   },\n    //                   attrs: {\n    //                       portBody: {\n    //                           r: 5,\n    //                           magnet: 'active',\n    //                           fill: '#187BD3',\n    //                           stroke: '#187BD3'\n    //                       }\n    //                   }\n    //               },\n    //           }\n    //       },\n    //       markup: [\n    //           {\n    //               tagName: 'rect',\n    //               selector: 'body',\n    //           }, {\n    //               tagName: 'image',\n    //               selector: 'image'\n    //           }, {\n    //               tagName: 'ports',\n    //               selector: 'ports'\n    //           }]\n    //   })\n    //   var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n    //   var toolsView = new joint.dia.ToolsView({\n    //   tools: [\n    //       targetArrowheadTool,\n    //   ]\n    //   });\n    //   var CustomLinkView = joint.dia.LinkView.extend({\n    //       // custom interactions:\n    //       pointerdblclick: function(evt, x, y) {\n    //           this.addVertex(x, y);\n    //       },\n    //       contextmenu: function(evt, x, y) {\n    //           this.addLabel(x, y);\n    //       },\n    //       // custom options:\n    //       options: joint.util.defaults({\n    //           doubleLinkTools: true,\n    //       }, joint.dia.LinkView.prototype.options)\n    //   });\n    //   var graph = new joint.dia.Graph;\n    //   //ctrl+z\n    //   var commandManager = new joint.dia.CommandManager({ graph: graph });\n    //   //cấu hình paper\n    //   var paper = new joint.dia.Paper({  \n    //       el:$('#paper'),\n    //       width: 800,\n    //       height: 600,\n    //       model: graph,\n    //       async: true,\n    //       sorting: joint.dia.Paper.sorting.APPROX,\n    //       gridSize: 10,\n    //       drawGrid: true,\n    //       restrictTranslate: true,\n    //       stopDelegation: false,\n    //       linkView: CustomLinkView,\n    //       interactive: { vertexAdd: false } ,\n    //       // background: { color: '#F3F7F6' },\n    //       // defaultConnectionPoint: { name: 'boundary' },\n    //       // defaultConnector: {\n    //       //     name: \"rounded\"\n    //       //   },\n    //       //   defaultRouter: {\n    //       //     name: \"manhattan\",\n    //       //     args: {\n    //       //       step: 10,\n    //       //       endDirections: [\"bottom\"],\n    //       //       startDirections: [\"top\"],\n    //       //       padding: { bottom: 20 }\n    //       //     }\n    //       //   },\n    //       snapLinks: {\n    //           radius: 75\n    //       },\n    //       linkPinning: false,\n    //       multiLinks: false,\n    //       defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n    //       defaultConnector: { name: 'rounded' },\n    //       validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n    //           // Prevent linking from input ports.\n    //           if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n    //           // Prevent linking from output ports to input ports within one element.\n    //           if (cellViewS === cellViewT) return false;\n    //           // Prevent linking to input ports.\n    //           return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n    //       },\n    //       // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n    //       //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n    //       //     return view1 !== view2;\n    //       // },\n    //       interactive: {\n    //           linkMove: true,\n    //           labelMove: true,\n    //           arrowheadMove: true,\n    //           vertexMove: false,\n    //           vertexAdd: false,\n    //           vertexRemove: false,\n    //           useLinkTools: false,\n    //       },\n    //       defaultLink: function () {\n    //           return new joint.shapes.standard.Link({\n    //               attrs: {\n    //                   line: {\n    //                       connection: true,\n    //                       stroke: '#707070',\n    //                       strokeLinejoin: 'round',\n    //                   },\n    //                   wrapper: {\n    //                       connection: true,\n    //                       strokeWidth: 10,\n    //                       strokeLinejoin: 'round'\n    //                   },\n    //               },\n    //               markup: [{\n    //                   tagName: 'path',\n    //                   selector: 'wrapper',\n    //                   attributes: {\n    //                       'fill': 'none',\n    //                       'stroke': 'transparent'\n    //                   }\n    //               }, {\n    //                   tagName: 'path',\n    //                   selector: 'line',\n    //                   attributes: {\n    //                       'fill': 'none',\n    //                   }\n    //               }]\n    //           });\n    //       }\n    //   });\n    //   //paperScroller\n    //   var paperScroller = new joint.ui.PaperScroller({\n    //       paper: paper,\n    //       autoResizePaper: true,\n    //       scrollWhileDragging: true,\n    //       cursor: 'grab'\n    //   });\n    //   // cấu hình snaplines\n    //   var snaplines = new joint.ui.Snaplines({ paper: paper })\n    //   snaplines.startListening()\n    //   // cấu hình Stencil \n    //   var stencil = new joint.ui.Stencil({\n    //       paper: paperScroller,\n    //       width: 900,\n    //       height: 60,\n    //       dropAnimation: { duration: 200, easing: 'swing' },\n    //   });\n    //   // cấu hình Selection\n    //   var selection = new joint.ui.Selection({\n    //       theme: 'material',\n    //       paper: paper,\n    //       useModelGeometry: true,\n    //       allowTranslate: true,\n    //   });\n    //   //hàm viết hoa chữ đầu\n    //   function jsUcfirst(string) {\n    //       return string.charAt(0).toUpperCase() + string.slice(1);\n    //   }\n    //   //hàm render stencil\n    //   function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n    //       arr.forEach(element => {\n    //           //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n    //           let elementName = jsUcfirst(element)\n    //           if (elementName === jsUcfirst(elNoInPorts)) {\n    //               element = new customElNoInPorts();\n    //           }\n    //           else {\n    //               element = new customEl();\n    //           }\n    //           element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`)\n    //           stencilShapes.push(element.position(positionX, positionY))\n    //           if(spaceBetweenElToX>0){\n    //               positionX += element.attributes.size.width+spaceBetweenElToX;\n    //           }\n    //           if(spaceBetweenElToY>0){\n    //               positionY += element.attributes.size.height+spaceBetweenElToY;\n    //           }\n    //       });\n    //   }\n    //   var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n    //   //mảng chứa các vị trí của stencil Shape để sau đó render\n    //   var stencilShapes = []\n    //   stencilRenderHandler(20,20,arr,\"load\",16)\n    //   paper.svg.prepend(\n    //   V.createSVGStyle(`\n    //           .joint-element .selection {\n    //               stroke: ${color};\n    //           }\n    //           .joint-link .selection {\n    //               stroke: ${color}; \n    //               'fill': ${color},\n    //           }\n    //       `)\n    //   );\n    //   //lấy tất cả link ở trc node\n    //   function getElementPredecessorLinks(el) {\n    //       return graph\n    //         .getSubgraph([el, ...graph.getPredecessors(el)])\n    //         .filter((cell) => cell.isLink());\n    //     }\n    //     //đổi màu cell\n    //     function highlightCell(cell) {\n    //       if(cell){\n    //       highlighters.addClass.add(\n    //         cell.findView(paper),\n    //         cell.isElement() ? \"body\" : \"line\",\n    //         \"selection\",\n    //         { className: \"selection\" }\n    //       );\n    //       }else{return}\n    //     }\n    //     //chuyển màu cell lại như cũ\n    //     function unhighlightCell(cell) {\n    //       if(cell){\n    //       highlighters.addClass.remove(cell.findView(paper), \"selection\");\n    //       }\n    //       else{return}\n    //     }\n    //     //function xử lý hành dộng chọn el\n    //     function selectElement(el) {     \n    //       if (selectionNode === el) return;\n    //       if (selectionNode) {\n    //         unhighlightCell(selectionNode);\n    //         graph.getLinks().forEach((link) => unhighlightCell(link));\n    //       }\n    //       if (el) {\n    //         highlightCell(el);\n    //         getElementPredecessorLinks(el).forEach((link) => {\n    //             highlightCell(link)\n    //             link.toFront()\n    //           });\n    //         selectionNode = el;\n    //       } else {\n    //           selectionNode = null;\n    //       }\n    //     }\n    //     //halo cấu hình\n    //      paper.on('cell:pointerup',function (cellView) {\n    //       var halo = new joint.ui.Halo({\n    //           cellView: cellView,\n    //           type: 'toolbar',\n    //           boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n    //       });\n    //       halo.removeHandle('resize');\n    //       halo.removeHandle('rotate');\n    //       halo.removeHandle('direction');\n    //       halo.render();\n    //       //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n    //       selectedElement = cellView.model;\n    //       selectedElement.toFront()\n    //       // console.log(graph.getLinks())\n    //   })\n    //     //xử lý khi các sự kiện với paper\n    //     paper.on({\n    //         //xử lý khi các sự kiện \n    //       \"cell:mouseenter\":(cellView)=>{\n    //               cellView.model.toFront()\n    //       },\n    //       \"cell:mouseleave\":(cellView)=>{\n    //           cellView.model.toBack()\n    //           if(selectionNode){\n    //               getElementPredecessorLinks(selectionNode).forEach((link) => {\n    //                   link.toFront()\n    //                 });\n    //           }\n    //       },\n    //       \"element:pointerclick\":(cellView) =>{\n    //           //chỉ đổi màu khi ko bấm ctrl\n    //           if(ctrlDown ===false )\n    //               { \n    //                   selectElement(cellView.model)\n    //               }\n    //           },\n    //           \"link:pointerclick\":(cellView) =>\n    //               {selectElement(cellView.model)\n    //                   //chon vao link thi mo cho phep doi node\n    //                   cellView.addTools(toolsView);\n    //               },\n    //               //chuyển lại màu cũ khi bấm ra ngoài\n    //           \"blank:pointerclick\":() => {selectElement(null)\n    //               paper.removeTools();\n    //               },\n    //           'element:pointerup': function (cellView, evt) {\n    //               if (evt.ctrlKey || evt.metaKey) {\n    //                   selection.collection.add(cellView.model);\n    //                   //loop to all the element in selection and set it to front\n    //                   selection.collection.models.forEach(element => {\n    //                       element.toFront()\n    //                   })               \n    //               }\n    //           },\n    //           //chuyển màu khi bấm vào link và cho nó lên trc\n    //           'link:pointerup': function (cellView) {\n    //               selectedLink = cellView.model;\n    //               selectedLink.toFront()\n    //           },\n    //           // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n    //           'blank:pointerdown':function(evt, x, y) {\n    //               if (shiftDown===true) {\n    //                   selectElement(null)\n    //                   paperScroller.setCursor('crosshair')\n    //                   selection.startSelecting(evt);\n    //                   console.log(selection)\n    //               } else {\n    //                   selection.collection.reset([]);\n    //                   paperScroller.startPanning(evt, x, y);\n    //                   paper.removeTools();\n    //                   paperScroller.setCursor('grab');\n    //               }\n    //           },\n    //     })\n    //     //xóa el nếu chọn lại lần 2 khi bấm ctrl\n    //     selection.on('selection-box:pointerdown', function (cellView, evt) {\n    //       if (evt.ctrlKey || evt.metaKey) {\n    //           selection.collection.remove(cellView.model);\n    //       }\n    //   });\n    //   //xóa bằng nút delete\n    //   document.addEventListener('keyup', function (evt) {\n    //       if (!selectedElement && !selection) return;\n    //       if (evt.code === 'Backspace' || evt.code === 'Delete') {\n    //           //xóa 1 el\n    //           if (selectedElement) {\n    //               selectedElement.remove();\n    //               selectedElement = null;\n    //               selectionNode=null;\n    //           }\n    //           //xóa toàn bộ  el đã chọn\n    //           if (selection) {\n    //               // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n    //               evt.preventDefault();\n    //               graph.removeCells(selection.collection.toArray())\n    //               selectionNode=null;\n    //           }\n    //       }\n    //   }\n    //   );\n    //   //nếu bấm thì =true\n    //   document.addEventListener('keydown', function (evt) {\n    //       if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //           ctrlDown = true;\n    //       }\n    //       if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //           shiftDown = true;\n    //       }\n    //   })\n    //   //nếu thả nút thì =false\n    //   document.addEventListener('keyup', function (evt) {\n    //       if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //           shiftDown = false;\n    //       }\n    //       if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //           ctrlDown = false;\n    //       }\n    //   })\n    //   //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n    //   document.addEventListener('keydown', function (evt) {\n    //       var clipboard = new joint.ui.Clipboard();\n    //       if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n    //           console.log(evt.code)\n    //           paperScroller.zoom(0.2, { max: 4 });\n    //       }\n    //       if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n    //           paperScroller.zoom(-0.2, { min: 0.2 });\n    //           console.log(evt.code)\n    //       }\n    //       //check+ A\n    //       if (evt.code === \"KeyA\" && ctrlDown === true) {\n    //           selection.collection.reset(graph.getElements())\n    //           evt.preventDefault();\n    //       }//check ctrl + Z\n    //       if (evt.code === \"KeyZ\" && ctrlDown === true) {\n    //           commandManager.undo();\n    //           unhighlightCell(selectionNode);\n    //           graph.getLinks().forEach((link) => unhighlightCell(link));\n    //           console.log(selectionNode)\n    //           selectionNode=null\n    //       }\n    //       //check ctrl + Y\n    //       if (evt.code === \"KeyY\" && ctrlDown === true) {\n    //           commandManager.redo();\n    //           selectElement(null)\n    //       }\n    //       //check ctrl + V ,ctrl + C, ctrl+X\n    //       if (evt.code === \"KeyX\" && ctrlDown === true) {\n    //           clipboard.cutElements(selection.collection, paper.model)\n    //       }\n    //       if (evt.code === \"KeyC\" && ctrlDown === true) {\n    //           clipboard.copyElements(selection.collection, graph);\n    //       }\n    //       if (evt.code === \"KeyV\" && ctrlDown === true) {\n    //           var pastedCells = clipboard.pasteCells(graph, {\n    //               translate: { dx: 40, dy: 40 },\n    //               useLocalStorage: true\n    //           });\n    //           var elements = _.filter(pastedCells, function (cell) {\n    //               return cell.isElement();\n    //           });\n    //           // Make sure pasted elements get selected immediately. This makes the UX better as\n    //           // the user can immediately manipulate the pasted elements.\n    //           selection.collection.reset(elements);\n    //       }\n    //   })\n    //   // nut zoomin zoom out can chuyen ve scroll\n    //   $('#btn-zoomin').on('click', function() {\n    //       paperScroller.zoom(0.2, { max: 4 });\n    //   });\n    //   $('#btn-zoomout').on('click', function() {\n    //       paperScroller.zoom(-0.2, { min: 0.2 });\n    //   });\n    //   $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n    //   $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller));\n    //   //render paper\n    //   document.getElementById('paper').appendChild(paperScroller.render().el);\n    //   //render paperScroller\n    //   paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\n    //   paperScroller.center();\n    //    //render stencil ra màn hình\n    //    document.getElementById('stencil').appendChild(stencil.render().el);\n    //    stencil.load(stencilShapes);\n    //    selection.collection.reset(graph.getElements());\n    //   //  var linkView = paper.findViewByModel(link);\n    // }\n    function app() {\n      console.log(joint);\n      var highlighters = joint.highlighters;\n      var mask = joint.highlighters.mask;\n      let selectionNode = null;\n      let selectedElement = null;\n      let selectedLink = null; //check ctrl shift\n\n      var ctrlDown = false;\n      var shiftDown = false;\n      const color = \"rgb(255 136 0)\";\n      var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2,\n            rx: 5,\n            ry: 5\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }, {\n            id: 'in-port',\n            group: 'in'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            },\n            in: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'left'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'passive',\n                  fill: '#FFFFFF',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      });\n      var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2\n          },\n          line: {\n            connection: true,\n            stroke: '#333333',\n            strokeWidth: 2,\n            strokeLinejoin: 'round',\n            targetMarker: {\n              'type': 'path',\n              'd': 'M 10 -5 0 0 10 5 z'\n            }\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      }); //create link tool\n      //     var verticesTool = new joint.linkTools.Vertices();\n      // var segmentsTool = new joint.linkTools.Segments();\n      // var sourceArrowheadTool = new joint.linkTools.SourceArrowhead();\n\n      var targetArrowheadTool = new joint.linkTools.TargetArrowhead(); // var sourceAnchorTool = new joint.linkTools.SourceAnchor();\n      // var targetAnchorTool = new joint.linkTools.TargetAnchor();\n      // var boundaryTool = new joint.linkTools.Boundary();\n      // var removeButton = new joint.linkTools.Remove();\n\n      var toolsView = new joint.dia.ToolsView({\n        tools: [// verticesTool, segmentsTool,\n        // sourceArrowheadTool, \n        targetArrowheadTool // sourceAnchorTool, targetAnchorTool,\n        // boundaryTool, removeButton\n        ]\n      }); // 2) creating a tools view\n      // var linkView = link.findView(paper);\n      // linkView.addTools(toolsView);\n      //custom link \n\n      var CustomLinkView = joint.dia.LinkView.extend({\n        // custom interactions:\n        pointerdblclick: function (evt, x, y) {\n          this.addVertex(x, y);\n        },\n        contextmenu: function (evt, x, y) {\n          this.addLabel(x, y);\n        },\n        // custom options:\n        options: joint.util.defaults({\n          doubleLinkTools: true\n        }, joint.dia.LinkView.prototype.options)\n      }); // Paper & Graph\n\n      var graph = new joint.dia.Graph(); //ctrl+z\n\n      var commandManager = new joint.dia.CommandManager({\n        graph: graph\n      }); //cấu hình paper\n\n      var paper = new joint.dia.Paper({\n        width: 800,\n        height: 600,\n        model: graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        linkView: CustomLinkView,\n        interactive: {\n          vertexAdd: false\n        },\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n          radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: {\n          name: 'manhattan',\n          args: {\n            padding: 10\n          }\n        },\n        defaultConnector: {\n          name: 'rounded'\n        },\n        validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n          // Prevent linking from input ports.\n          if (magnetS && magnetS.getAttribute('port-group') === 'in') return false; // Prevent linking from output ports to input ports within one element.\n\n          if (cellViewS === cellViewT) return false; // Prevent linking to input ports.\n\n          return magnetT && magnetT.getAttribute('port-group') === 'in' || cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer';\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n          linkMove: true,\n          labelMove: true,\n          arrowheadMove: true,\n          vertexMove: false,\n          vertexAdd: false,\n          vertexRemove: false,\n          useLinkTools: false\n        },\n        defaultLink: function () {\n          return new joint.shapes.standard.Link({\n            attrs: {\n              line: {\n                connection: true,\n                stroke: '#707070',\n                strokeLinejoin: 'round'\n              },\n              wrapper: {\n                connection: true,\n                strokeWidth: 10,\n                strokeLinejoin: 'round'\n              }\n            },\n            markup: [{\n              tagName: 'path',\n              selector: 'wrapper',\n              attributes: {\n                'fill': 'none',\n                'stroke': 'transparent'\n              }\n            }, {\n              tagName: 'path',\n              selector: 'line',\n              attributes: {\n                'fill': 'none'\n              }\n            }]\n          });\n        }\n      }); //paperScroller\n\n      var paperScroller = new joint.ui.PaperScroller({\n        paper: paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: 'grab'\n      }); // cấu hình snaplines\n\n      var snaplines = new joint.ui.Snaplines({\n        paper: paper\n      });\n      snaplines.startListening(); // cấu hình Stencil \n\n      var stencil = new joint.ui.Stencil({\n        paper: paperScroller,\n        width: 900,\n        height: 60,\n        dropAnimation: {\n          duration: 200,\n          easing: 'swing'\n        }\n      }); // cấu hình Selection\n\n      var selection = new joint.ui.Selection({\n        theme: 'material',\n        paper: paper,\n        useModelGeometry: true,\n        allowTranslate: true\n      }); //hàm viết hoa chữ đầu\n\n      function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      } //hàm render stencil\n\n\n      function stencilRenderHandler(positionX, positionY, arr, elNoInPorts = \"\", spaceBetweenElToX = 0, spaceBetweenElToY = 0) {\n        arr.forEach(element => {\n          //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n          let elementName = jsUcfirst(element);\n\n          if (elementName === jsUcfirst(elNoInPorts)) {\n            element = new customElNoInPorts();\n          } else {\n            element = new customEl();\n          }\n\n          element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`);\n          stencilShapes.push(element.position(positionX, positionY));\n\n          if (spaceBetweenElToX > 0) {\n            positionX += element.attributes.size.width + spaceBetweenElToX;\n          }\n\n          if (spaceBetweenElToY > 0) {\n            positionY += element.attributes.size.height + spaceBetweenElToY;\n          }\n        });\n      } // const filter=new customEl();\n      // const formula =new customEl();\n      // const join =new customEl();\n      // const load =new customElNoInPorts();\n      // const pivot =new customEl();\n      // const sample =new customEl();\n      // const script =new customEl();\n      // const select =new customEl();\n      // const sort =new customEl();\n      // const summarize =new customEl();\n      // const transposeTable =new customEl();\n      // const union =new customEl();\n      // const weightAvg =new customEl();\n      // filter.prop('attrs/image/xlinkHref', './assets/Filter.svg');\n      // formula.prop('attrs/image/xlinkHref', './assets/Formula.svg');\n      // join.prop('attrs/image/xlinkHref', './assets/Join.svg');\n      // load.prop('attrs/image/xlinkHref', './assets/Load.svg');\n      // pivot.prop('attrs/image/xlinkHref', './assets/Pivot.svg');\n      // sample.prop('attrs/image/xlinkHref', './assets/Sample.svg');\n      // script.prop('attrs/image/xlinkHref', './assets/Script.svg');\n      // select.prop('attrs/image/xlinkHref', './assets/Select.svg');\n      // sort.prop('attrs/image/xlinkHref', './assets/Sort.svg');\n      // summarize.prop('attrs/image/xlinkHref', './assets/Summarize.svg');\n      // transposeTable.prop('attrs/image/xlinkHref', './assets/TransposeTable.svg');\n      // union.prop('attrs/image/xlinkHref', './assets/Union.svg');\n      // weightAvg.prop('attrs/image/xlinkHref', './assets/WeightAvg.svg');\n      //mảng tên của các stencil Shape\n\n\n      var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg']; //mảng chứa các vị trí của stencil Shape để sau đó render\n\n      var stencilShapes = [// filter.position(20, 20),\n        // formula.position(77, 20),\n        // join.position(132, 20),\n        // load.position(197, 20),\n        // pivot.position(252, 20),\n        // sample.position(307, 20),\n        // script.position(362, 20),\n        // select.position(417, 20),\n        // sort.position(472, 20),\n        // summarize.position(527, 20),\n        // transposeTable.position(582, 20),\n        // union.position(637, 20),\n        // weightAvg.position(692, 20),\n        // rectangle.position(812, 20)\n      ]; //gọi hàm render stencil \n\n      stencilRenderHandler(20, 20, arr, \"load\", 16); //cấu hình các cell dc chọn\n\n      paper.svg.prepend(V.createSVGStyle(`\n            .joint-element .selection {\n                stroke: ${color};\n            }\n            .joint-link .selection {\n                stroke: ${color}; \n                'fill': ${color},\n            }\n            \n        `)); //lấy tất cả link ở trc node\n\n      function getElementPredecessorLinks(el) {\n        return graph.getSubgraph([el, ...graph.getPredecessors(el)]).filter(cell => cell.isLink());\n      } //đổi màu cell\n\n\n      function highlightCell(cell) {\n        if (cell) {\n          highlighters.addClass.add(cell.findView(paper), cell.isElement() ? \"body\" : \"line\", \"selection\", {\n            className: \"selection\"\n          });\n        } else {\n          return;\n        }\n      } //chuyển màu cell lại như cũ\n\n\n      function unhighlightCell(cell) {\n        if (cell) {\n          highlighters.addClass.remove(cell.findView(paper), \"selection\");\n        } else {\n          return;\n        }\n      } //function xử lý hành dộng chọn el\n\n\n      function selectElement(el) {\n        if (selectionNode === el) return;\n\n        if (selectionNode) {\n          unhighlightCell(selectionNode);\n          graph.getLinks().forEach(link => unhighlightCell(link));\n        }\n\n        if (el) {\n          highlightCell(el);\n          getElementPredecessorLinks(el).forEach(link => {\n            highlightCell(link);\n            link.toFront();\n          });\n          selectionNode = el;\n        } else {\n          selectionNode = null;\n        }\n      } //halo cấu hình\n\n\n      paper.on('cell:pointerup', function (cellView) {\n        var halo = new joint.ui.Halo({\n          cellView: cellView,\n          type: 'toolbar',\n          boxContent: false // bang phia duoi cell cho biet tọa độ height width và angle\n\n        });\n        halo.removeHandle('resize');\n        halo.removeHandle('rotate');\n        halo.removeHandle('direction');\n        halo.render(); //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n\n        selectedElement = cellView.model;\n        selectedElement.toFront(); // console.log(graph.getLinks())\n      }); //xử lý khi các sự kiện với paper\n\n      paper.on({\n        //xử lý khi các sự kiện \n        \"cell:mouseenter\": cellView => {\n          cellView.model.toFront();\n        },\n        \"cell:mouseleave\": cellView => {\n          cellView.model.toBack();\n\n          if (selectionNode) {\n            getElementPredecessorLinks(selectionNode).forEach(link => {\n              link.toFront();\n            });\n          }\n        },\n        \"element:pointerclick\": cellView => {\n          //chỉ đổi màu khi ko bấm ctrl\n          if (ctrlDown === false) {\n            selectElement(cellView.model);\n          }\n        },\n        \"link:pointerclick\": cellView => {\n          selectElement(cellView.model); //chon vao link thi mo cho phep doi node\n\n          cellView.addTools(toolsView);\n        },\n        //chuyển lại màu cũ khi bấm ra ngoài\n        \"blank:pointerclick\": () => {\n          selectElement(null);\n          paper.removeTools();\n        },\n        'element:pointerup': function (cellView, evt) {\n          if (evt.ctrlKey || evt.metaKey) {\n            selection.collection.add(cellView.model); //loop to all the element in selection and set it to front\n\n            selection.collection.models.forEach(element => {\n              element.toFront();\n            });\n          }\n        },\n        //chuyển màu khi bấm vào link và cho nó lên trc\n        'link:pointerup': function (cellView) {\n          selectedLink = cellView.model;\n          selectedLink.toFront();\n        },\n        // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n        'blank:pointerdown': function (evt, x, y) {\n          if (shiftDown === true) {\n            selectElement(null);\n            paperScroller.setCursor('crosshair');\n            selection.startSelecting(evt);\n            console.log(selection);\n          } else {\n            selection.collection.reset([]);\n            paperScroller.startPanning(evt, x, y);\n            paper.removeTools();\n            paperScroller.setCursor('grab');\n          }\n        }\n      }); //xóa el nếu chọn lại lần 2 khi bấm ctrl\n\n      selection.on('selection-box:pointerdown', function (cellView, evt) {\n        if (evt.ctrlKey || evt.metaKey) {\n          selection.collection.remove(cellView.model);\n        }\n      }); //xóa bằng nút delete\n\n      document.addEventListener('keyup', function (evt) {\n        if (!selectedElement && !selection) return;\n\n        if (evt.code === 'Backspace' || evt.code === 'Delete') {\n          //xóa 1 el\n          if (selectedElement) {\n            selectedElement.remove();\n            selectedElement = null;\n            selectionNode = null;\n          } //xóa toàn bộ  el đã chọn\n\n\n          if (selection) {\n            // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n            evt.preventDefault();\n            graph.removeCells(selection.collection.toArray());\n            selectionNode = null;\n          }\n        }\n      }); //nếu bấm thì =true\n\n      document.addEventListener('keydown', function (evt) {\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n          ctrlDown = true;\n        }\n\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n          shiftDown = true;\n        }\n      }); //nếu thả nút thì =false\n\n      document.addEventListener('keyup', function (evt) {\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n          shiftDown = false;\n        }\n\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n          ctrlDown = false;\n        }\n      }); //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n\n      document.addEventListener('keydown', function (evt) {\n        var clipboard = new joint.ui.Clipboard();\n\n        if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n          console.log(evt.code);\n          paperScroller.zoom(0.2, {\n            max: 4\n          });\n        }\n\n        if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n          paperScroller.zoom(-0.2, {\n            min: 0.2\n          });\n          console.log(evt.code);\n        } //check+ A\n\n\n        if (evt.code === \"KeyA\" && ctrlDown === true) {\n          selection.collection.reset(graph.getElements());\n          evt.preventDefault();\n        } //check ctrl + Z\n\n\n        if (evt.code === \"KeyZ\" && ctrlDown === true) {\n          commandManager.undo();\n          unhighlightCell(selectionNode);\n          graph.getLinks().forEach(link => unhighlightCell(link));\n          console.log(selectionNode);\n          selectionNode = null;\n        } //check ctrl + Y\n\n\n        if (evt.code === \"KeyY\" && ctrlDown === true) {\n          commandManager.redo();\n          selectElement(null);\n        } //check ctrl + V ,ctrl + C, ctrl+X\n\n\n        if (evt.code === \"KeyX\" && ctrlDown === true) {\n          clipboard.cutElements(selection.collection, paper.model);\n        }\n\n        if (evt.code === \"KeyC\" && ctrlDown === true) {\n          clipboard.copyElements(selection.collection, graph);\n        }\n\n        if (evt.code === \"KeyV\" && ctrlDown === true) {\n          var pastedCells = clipboard.pasteCells(graph, {\n            translate: {\n              dx: 40,\n              dy: 40\n            },\n            useLocalStorage: true\n          });\n\n          var elements = _.filter(pastedCells, function (cell) {\n            return cell.isElement();\n          }); // Make sure pasted elements get selected immediately. This makes the UX better as\n          // the user can immediately manipulate the pasted elements.\n\n\n          selection.collection.reset(elements);\n        }\n      }); // nut zoomin zoom out can chuyen ve scroll\n\n      $('#btn-zoomin').on('click', function () {\n        paperScroller.zoom(0.2, {\n          max: 4\n        });\n      });\n      $('#btn-zoomout').on('click', function () {\n        paperScroller.zoom(-0.2, {\n          min: 0.2\n        });\n      });\n      $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n      $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller)); //render paper\n\n      document.getElementById('paper').appendChild(paperScroller.render().el); //render paperScroller\n\n      paperScroller.$el.css({\n        width: 900,\n        height: 600\n      }).appendTo('#paper');\n      paperScroller.center(); //render stencil ra màn hình\n\n      document.getElementById('stencil').appendChild(stencil.render().el);\n      stencil.load(stencilShapes);\n      selection.collection.reset(graph.getElements()); //  var linkView = paper.findViewByModel(link);\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["mounted","app","console","log","joint","highlighters","mask","selectionNode","selectedElement","selectedLink","ctrlDown","shiftDown","color","customEl","dia","Element","define","z","size","width","height","removable","attrs","image","x","y","root","magnet","body","fill","stroke","strokeWidth","rx","ry","ports","items","id","group","groups","out","markup","tagName","selector","position","name","portBody","r","in","customElNoInPorts","theme","line","connection","strokeLinejoin","targetMarker","targetArrowheadTool","linkTools","TargetArrowhead","toolsView","ToolsView","tools","CustomLinkView","LinkView","extend","pointerdblclick","evt","addVertex","contextmenu","addLabel","options","util","defaults","doubleLinkTools","prototype","graph","Graph","commandManager","CommandManager","paper","Paper","model","async","sorting","APPROX","gridSize","drawGrid","restrictTranslate","stopDelegation","linkView","interactive","vertexAdd","snapLinks","radius","linkPinning","multiLinks","defaultRouter","args","padding","defaultConnector","validateConnection","cellViewS","magnetS","cellViewT","magnetT","end","getAttribute","get","linkMove","labelMove","arrowheadMove","vertexMove","vertexRemove","useLinkTools","defaultLink","shapes","standard","Link","wrapper","attributes","paperScroller","ui","PaperScroller","autoResizePaper","scrollWhileDragging","cursor","snaplines","Snaplines","startListening","stencil","Stencil","dropAnimation","duration","easing","selection","Selection","useModelGeometry","allowTranslate","jsUcfirst","string","charAt","toUpperCase","slice","stencilRenderHandler","positionX","positionY","arr","elNoInPorts","spaceBetweenElToX","spaceBetweenElToY","forEach","element","elementName","prop","stencilShapes","push","svg","prepend","V","createSVGStyle","getElementPredecessorLinks","el","getSubgraph","getPredecessors","filter","cell","isLink","highlightCell","addClass","add","findView","isElement","className","unhighlightCell","remove","selectElement","getLinks","link","toFront","on","cellView","halo","Halo","type","boxContent","removeHandle","render","toBack","addTools","removeTools","ctrlKey","metaKey","collection","models","setCursor","startSelecting","reset","startPanning","document","addEventListener","code","preventDefault","removeCells","toArray","clipboard","Clipboard","zoom","max","min","getElements","undo","redo","cutElements","copyElements","pastedCells","pasteCells","translate","dx","dy","useLocalStorage","elements","_","$","bind","center","centerContent","getElementById","appendChild","$el","css","appendTo","load"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"canvas\" ref=\"canvas\"></div>\n  <div id=\"app\">\n    <div class=\"btn_contain\">\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\n        <button id=\"btn-center\" class=\"btn\">center</button>\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\n    </div>\n    <div id=\"stencil\"></div>\n    \n    <div id=\"paper\"></div>\n    <div id=\"navigator\"></div>\n    \n    \n        </div>\n</template>\n\n<script>\nimport '@/../public/vendor/node_modules/jquery/dist/jquery.js'\nimport '@/../public/vendor/js/lib/jquery.min.js'\nimport '@/../public/vendor/js/lib/lodash.min.js'\nimport '@/../public/vendor/js/lib/backbone.min.js'\nimport '@/../public/vendor/js/lib/rappid.min.js'\nimport '@/../public/vendor/node_modules/lodash/lodash.js'\nimport '@/../public/vendor/node_modules/backbone/backbone.js'\nimport '@/../public/vendor/build/package/rappid.js'\n// import { Options, Vue } from 'vue-class-component';\nexport default {\n  mounted() {\n  //   var highlighters=joint.highlighters;\n    \n  //   let selectionNode = null;\n  //   let selectedElement = null;\n  //   let selectedLink = null\n  //   //check ctrl shift\n  //   var ctrlDown = false;\n  //   var shiftDown = false;\n  //   const color = \"rgb(255 136 0)\";\n  //   var customEl = joint.dia.Element.define('standard.Rectangle', {\n  //       z: 1,\n  //       size: {\n  //           width: 44,\n  //           height: 35\n  //       },\n  //       removable: false,\n  //       attrs: {\n  //           image: {\n  //               x: 5,\n  //               y: 5,\n  //               width: 'calc(w-10)',\n  //               height: 'calc(h-10 )'\n  //           },\n  //           root: {\n  //               magnet: false\n  //           },\n  //           body: {\n  //               fill: '#FFFFFF',\n  //               stroke: '#A0A0A0',\n  //               width: 'calc(w)',\n  //               height: 'calc(h)',\n  //               strokeWidth: 2,\n  //               rx: 5,\n  //               ry: 5,\n\n  //           }\n  //       },\n  //       ports: {\n  //           items: [{\n  //               id: 'out-port',\n  //               group: 'out',\n\n  //           },\n  //           {\n  //               id: 'in-port',\n  //               group: 'in'\n  //           }\n  //           ],\n  //           groups: {\n  //               out: {\n  //                   markup: [{\n  //                       tagName: 'circle',\n  //                       selector: 'portBody'\n  //                   }],\n  //                   position: {\n  //                       name: 'right'\n  //                   },\n  //                   attrs: {\n  //                       portBody: {\n  //                           r: 5,\n  //                           magnet: 'active',\n  //                           fill: '#187BD3',\n  //                           stroke: '#187BD3'\n\n  //                       }\n  //                   }\n  //               },\n  //               in: {\n  //                   markup: [{\n  //                       tagName: 'circle',\n  //                       selector: 'portBody'\n  //                   }],\n  //                   position: {\n  //                       name: 'left'\n  //                   },\n  //                   attrs: {\n  //                       portBody: {\n  //                           r: 5,\n  //                           magnet: 'passive',\n  //                           fill: '#FFFFFF',\n  //                           stroke: '#187BD3',\n\n  //                       }\n  //                   }\n  //               }\n  //           }\n  //       },\n  //       markup: [\n  //           {\n  //               tagName: 'rect',\n  //               selector: 'body',\n  //           },\n  //           {\n  //               tagName: 'image',\n  //               selector: 'image'\n  //           }, {\n  //               tagName: 'ports',\n  //               selector: 'ports'\n  //           }]\n  //   })\n  //   var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n  //       z: 1,\n  //       theme: 'material',\n  //       size: {\n  //           width: 44,\n  //           height: 35\n  //       },\n  //       removable: false,\n  //       attrs: {\n  //           image: {\n  //               x: 5,\n  //               y: 5,\n  //               width: 'calc(w-10)',\n  //               height: 'calc(h-10 )'\n  //           },\n  //           root: {\n  //               magnet: false\n  //           },\n  //           body: {\n  //               fill: '#FFFFFF',\n  //               stroke: '#A0A0A0',\n  //               width: 'calc(w)',\n  //               height: 'calc(h)',\n  //               strokeWidth: 2,\n  //           },\n  //           line: {\n  //               connection: true,\n  //               stroke: '#333333',\n  //               strokeWidth: 2,\n  //               strokeLinejoin: 'round',\n  //               targetMarker: {\n  //                   'type': 'path',\n  //                   'd': 'M 10 -5 0 0 10 5 z'\n  //               }\n  //           },\n  //       },\n  //       ports: {\n  //           items: [\n  //               {\n  //                   id: 'out-port',\n  //                   group: 'out'\n  //               }\n  //           ],\n  //           groups: {\n  //               out: {\n  //                   markup: [{\n  //                       tagName: 'circle',\n  //                       selector: 'portBody'\n  //                   }],\n  //                   position: {\n  //                       name: 'right'\n  //                   },\n  //                   attrs: {\n  //                       portBody: {\n  //                           r: 5,\n  //                           magnet: 'active',\n  //                           fill: '#187BD3',\n  //                           stroke: '#187BD3'\n  //                       }\n  //                   }\n  //               },\n\n  //           }\n  //       },\n  //       markup: [\n  //           {\n  //               tagName: 'rect',\n  //               selector: 'body',\n  //           }, {\n  //               tagName: 'image',\n  //               selector: 'image'\n  //           }, {\n  //               tagName: 'ports',\n  //               selector: 'ports'\n  //           }]\n  //   })\n  //   var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n  //   var toolsView = new joint.dia.ToolsView({\n  //   tools: [\n  //       targetArrowheadTool,\n  //   ]\n  //   });\n  //   var CustomLinkView = joint.dia.LinkView.extend({\n  //       // custom interactions:\n  //       pointerdblclick: function(evt, x, y) {\n  //           this.addVertex(x, y);\n  //       },\n  //       contextmenu: function(evt, x, y) {\n  //           this.addLabel(x, y);\n  //       },\n    \n  //       // custom options:\n  //       options: joint.util.defaults({\n  //           doubleLinkTools: true,\n  //       }, joint.dia.LinkView.prototype.options)\n  //   });\n  //   var graph = new joint.dia.Graph;\n  //   //ctrl+z\n  //   var commandManager = new joint.dia.CommandManager({ graph: graph });\n    \n  //   //cấu hình paper\n  //   var paper = new joint.dia.Paper({  \n  //       el:$('#paper'),\n  //       width: 800,\n  //       height: 600,\n  //       model: graph,\n  //       async: true,\n  //       sorting: joint.dia.Paper.sorting.APPROX,\n  //       gridSize: 10,\n  //       drawGrid: true,\n  //       restrictTranslate: true,\n  //       stopDelegation: false,\n  //       linkView: CustomLinkView,\n  //       interactive: { vertexAdd: false } ,\n  //       // background: { color: '#F3F7F6' },\n  //       // defaultConnectionPoint: { name: 'boundary' },\n  //       // defaultConnector: {\n  //       //     name: \"rounded\"\n  //       //   },\n  //       //   defaultRouter: {\n  //       //     name: \"manhattan\",\n  //       //     args: {\n  //       //       step: 10,\n  //       //       endDirections: [\"bottom\"],\n  //       //       startDirections: [\"top\"],\n  //       //       padding: { bottom: 20 }\n  //       //     }\n  //       //   },\n  //       snapLinks: {\n  //           radius: 75\n  //       },\n  //       linkPinning: false,\n  //       multiLinks: false,\n  //       defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n  //       defaultConnector: { name: 'rounded' },\n  //       validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n  //           // Prevent linking from input ports.\n  //           if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n  //           // Prevent linking from output ports to input ports within one element.\n  //           if (cellViewS === cellViewT) return false;\n  //           // Prevent linking to input ports.\n  //           return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n  //       },\n  //       // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n  //       //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n  //       //     return view1 !== view2;\n  //       // },\n  //       interactive: {\n  //           linkMove: true,\n  //           labelMove: true,\n  //           arrowheadMove: true,\n  //           vertexMove: false,\n  //           vertexAdd: false,\n  //           vertexRemove: false,\n  //           useLinkTools: false,\n  //       },\n  //       defaultLink: function () {\n  //           return new joint.shapes.standard.Link({\n  //               attrs: {\n  //                   line: {\n  //                       connection: true,\n  //                       stroke: '#707070',\n  //                       strokeLinejoin: 'round',\n  //                   },\n  //                   wrapper: {\n  //                       connection: true,\n  //                       strokeWidth: 10,\n  //                       strokeLinejoin: 'round'\n  //                   },\n                    \n  //               },\n                \n  //               markup: [{\n  //                   tagName: 'path',\n  //                   selector: 'wrapper',\n  //                   attributes: {\n  //                       'fill': 'none',\n                        \n  //                       'stroke': 'transparent'\n  //                   }\n  //               }, {\n  //                   tagName: 'path',\n  //                   selector: 'line',\n  //                   attributes: {\n  //                       'fill': 'none',\n                        \n  //                   }\n  //               }]\n  //           });\n  //       }\n  //   });\n  //   //paperScroller\n  //   var paperScroller = new joint.ui.PaperScroller({\n  //       paper: paper,\n  //       autoResizePaper: true,\n  //       scrollWhileDragging: true,\n  //       cursor: 'grab'\n        \n  //   });\n  //   // cấu hình snaplines\n  //   var snaplines = new joint.ui.Snaplines({ paper: paper })\n  //   snaplines.startListening()\n  //   // cấu hình Stencil \n  //   var stencil = new joint.ui.Stencil({\n  //       paper: paperScroller,\n  //       width: 900,\n  //       height: 60,\n  //       dropAnimation: { duration: 200, easing: 'swing' },\n        \n  //   });\n  //   // cấu hình Selection\n  //   var selection = new joint.ui.Selection({\n  //       theme: 'material',\n  //       paper: paper,\n  //       useModelGeometry: true,\n  //       allowTranslate: true,\n  //   });\n  //   //hàm viết hoa chữ đầu\n  //   function jsUcfirst(string) {\n  //       return string.charAt(0).toUpperCase() + string.slice(1);\n  //   }\n  //   //hàm render stencil\n  //   function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n  //       arr.forEach(element => {\n  //           //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n  //           let elementName = jsUcfirst(element)\n  //           if (elementName === jsUcfirst(elNoInPorts)) {\n  //               element = new customElNoInPorts();\n  //           }\n  //           else {\n  //               element = new customEl();\n  //           }\n  //           element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`)\n  //           stencilShapes.push(element.position(positionX, positionY))\n  //           if(spaceBetweenElToX>0){\n  //               positionX += element.attributes.size.width+spaceBetweenElToX;\n  //           }\n  //           if(spaceBetweenElToY>0){\n  //               positionY += element.attributes.size.height+spaceBetweenElToY;\n  //           }\n  //       });\n  //   }\n  //   var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n  //   //mảng chứa các vị trí của stencil Shape để sau đó render\n  //   var stencilShapes = []\n  //   stencilRenderHandler(20,20,arr,\"load\",16)\n  //   paper.svg.prepend(\n  //   V.createSVGStyle(`\n  //           .joint-element .selection {\n  //               stroke: ${color};\n  //           }\n  //           .joint-link .selection {\n  //               stroke: ${color}; \n  //               'fill': ${color},\n  //           }\n            \n  //       `)\n  //   );\n  //   //lấy tất cả link ở trc node\n  //   function getElementPredecessorLinks(el) {\n  //       return graph\n  //         .getSubgraph([el, ...graph.getPredecessors(el)])\n  //         .filter((cell) => cell.isLink());\n  //     }\n  //     //đổi màu cell\n  //     function highlightCell(cell) {\n  //       if(cell){\n  //       highlighters.addClass.add(\n  //         cell.findView(paper),\n  //         cell.isElement() ? \"body\" : \"line\",\n  //         \"selection\",\n  //         { className: \"selection\" }\n  //       );\n  //       }else{return}\n  //     }\n  //     //chuyển màu cell lại như cũ\n  //     function unhighlightCell(cell) {\n  //       if(cell){\n  //       highlighters.addClass.remove(cell.findView(paper), \"selection\");\n  //       }\n  //       else{return}\n  //     }\n  //     //function xử lý hành dộng chọn el\n  //     function selectElement(el) {     \n  //       if (selectionNode === el) return;\n  //       if (selectionNode) {\n            \n  //         unhighlightCell(selectionNode);\n  //         graph.getLinks().forEach((link) => unhighlightCell(link));\n  //       }\n  //       if (el) {\n            \n  //         highlightCell(el);\n  //         getElementPredecessorLinks(el).forEach((link) => {\n  //             highlightCell(link)\n  //             link.toFront()\n  //           });\n  //         selectionNode = el;\n  //       } else {\n  //           selectionNode = null;\n  //       }\n  //     }\n  //     //halo cấu hình\n  //      paper.on('cell:pointerup',function (cellView) {\n  //       var halo = new joint.ui.Halo({\n  //           cellView: cellView,\n  //           type: 'toolbar',\n  //           boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n  //       });\n  //       halo.removeHandle('resize');\n  //       halo.removeHandle('rotate');\n  //       halo.removeHandle('direction');\n  //       halo.render();\n  //       //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n  //       selectedElement = cellView.model;\n  //       selectedElement.toFront()\n  //       // console.log(graph.getLinks())\n  //   })\n   \n  //     //xử lý khi các sự kiện với paper\n  //     paper.on({\n  //         //xử lý khi các sự kiện \n  //       \"cell:mouseenter\":(cellView)=>{\n  //               cellView.model.toFront()\n  //       },\n  //       \"cell:mouseleave\":(cellView)=>{\n  //           cellView.model.toBack()\n  //           if(selectionNode){\n  //               getElementPredecessorLinks(selectionNode).forEach((link) => {\n                   \n  //                   link.toFront()\n  //                 });\n  //           }\n  //       },\n    \n  //       \"element:pointerclick\":(cellView) =>{\n  //           //chỉ đổi màu khi ko bấm ctrl\n  //           if(ctrlDown ===false )\n  //               { \n  //                   selectElement(cellView.model)\n  //               }\n  //           },\n  //           \"link:pointerclick\":(cellView) =>\n  //               {selectElement(cellView.model)\n  //                   //chon vao link thi mo cho phep doi node\n  //                   cellView.addTools(toolsView);\n                \n  //               },\n                \n  //               //chuyển lại màu cũ khi bấm ra ngoài\n  //           \"blank:pointerclick\":() => {selectElement(null)\n  //               paper.removeTools();\n  //               },\n            \n  //           'element:pointerup': function (cellView, evt) {\n                \n  //               if (evt.ctrlKey || evt.metaKey) {\n  //                   selection.collection.add(cellView.model);\n  //                   //loop to all the element in selection and set it to front\n  //                   selection.collection.models.forEach(element => {\n  //                       element.toFront()\n  //                   })               \n  //               }\n  //           },\n  //           //chuyển màu khi bấm vào link và cho nó lên trc\n  //           'link:pointerup': function (cellView) {\n  //               selectedLink = cellView.model;\n  //               selectedLink.toFront()\n  //           },\n            \n  //           // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n  //           'blank:pointerdown':function(evt, x, y) {\n  //               if (shiftDown===true) {\n  //                   selectElement(null)\n  //                   paperScroller.setCursor('crosshair')\n  //                   selection.startSelecting(evt);\n  //                   console.log(selection)\n  //               } else {\n  //                   selection.collection.reset([]);\n  //                   paperScroller.startPanning(evt, x, y);\n  //                   paper.removeTools();\n  //                   paperScroller.setCursor('grab');\n  //               }\n        \n  //           },\n  //     })\n  //     //xóa el nếu chọn lại lần 2 khi bấm ctrl\n  //     selection.on('selection-box:pointerdown', function (cellView, evt) {\n  //       if (evt.ctrlKey || evt.metaKey) {\n  //           selection.collection.remove(cellView.model);\n  //       }\n  //   });\n  //   //xóa bằng nút delete\n  //   document.addEventListener('keyup', function (evt) {\n        \n  //       if (!selectedElement && !selection) return;\n  //       if (evt.code === 'Backspace' || evt.code === 'Delete') {\n  //           //xóa 1 el\n  //           if (selectedElement) {\n  //               selectedElement.remove();\n  //               selectedElement = null;\n  //               selectionNode=null;\n  //           }\n  //           //xóa toàn bộ  el đã chọn\n  //           if (selection) {\n  //               // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n  //               evt.preventDefault();\n  //               graph.removeCells(selection.collection.toArray())\n  //               selectionNode=null;\n  //           }\n  //       }\n  //   }\n  //   );\n  //   //nếu bấm thì =true\n  //   document.addEventListener('keydown', function (evt) {\n  //       if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n  //           ctrlDown = true;\n  //       }\n  //       if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n  //           shiftDown = true;\n  //       }\n  //   })\n  //   //nếu thả nút thì =false\n  //   document.addEventListener('keyup', function (evt) {\n  //       if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n  //           shiftDown = false;\n\n  //       }\n  //       if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n  //           ctrlDown = false;\n  //       }\n  //   })\n  //   //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n  //   document.addEventListener('keydown', function (evt) {\n  //       var clipboard = new joint.ui.Clipboard();\n        \n        \n  //       if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n  //           console.log(evt.code)\n  //           paperScroller.zoom(0.2, { max: 4 });\n  //       }\n  //       if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n  //           paperScroller.zoom(-0.2, { min: 0.2 });\n  //           console.log(evt.code)\n  //       }\n  //       //check+ A\n  //       if (evt.code === \"KeyA\" && ctrlDown === true) {\n  //           selection.collection.reset(graph.getElements())\n  //           evt.preventDefault();\n  //       }//check ctrl + Z\n  //       if (evt.code === \"KeyZ\" && ctrlDown === true) {\n  //           commandManager.undo();\n            \n  //           unhighlightCell(selectionNode);\n  //           graph.getLinks().forEach((link) => unhighlightCell(link));\n  //           console.log(selectionNode)\n  //           selectionNode=null\n  //       }\n  //       //check ctrl + Y\n  //       if (evt.code === \"KeyY\" && ctrlDown === true) {\n  //           commandManager.redo();\n  //           selectElement(null)\n  //       }\n  //       //check ctrl + V ,ctrl + C, ctrl+X\n  //       if (evt.code === \"KeyX\" && ctrlDown === true) {\n\n  //           clipboard.cutElements(selection.collection, paper.model)\n  //       }\n  //       if (evt.code === \"KeyC\" && ctrlDown === true) {\n  //           clipboard.copyElements(selection.collection, graph);\n  //       }\n  //       if (evt.code === \"KeyV\" && ctrlDown === true) {\n  //           var pastedCells = clipboard.pasteCells(graph, {\n  //               translate: { dx: 40, dy: 40 },\n  //               useLocalStorage: true\n  //           });\n\n  //           var elements = _.filter(pastedCells, function (cell) {\n  //               return cell.isElement();\n  //           });\n  //           // Make sure pasted elements get selected immediately. This makes the UX better as\n  //           // the user can immediately manipulate the pasted elements.\n  //           selection.collection.reset(elements);\n\n  //       }\n  //   })\n   \n  //   // nut zoomin zoom out can chuyen ve scroll\n  //   $('#btn-zoomin').on('click', function() {\n  //       paperScroller.zoom(0.2, { max: 4 });\n  //   });\n  //   $('#btn-zoomout').on('click', function() {\n  //       paperScroller.zoom(-0.2, { min: 0.2 });\n  //   });\n  //   $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n  //   $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller));\n\n  //   //render paper\n  //   document.getElementById('paper').appendChild(paperScroller.render().el);\n  //   //render paperScroller\n  //   paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\n  //   paperScroller.center();\n  //    //render stencil ra màn hình\n  //    document.getElementById('stencil').appendChild(stencil.render().el);\n  //    stencil.load(stencilShapes);\n  //    selection.collection.reset(graph.getElements());\n  //   //  var linkView = paper.findViewByModel(link);\n     \n  // }\nfunction app() {\n    console.log(joint)\n    var highlighters=joint.highlighters;\n    var mask = joint.highlighters.mask;\n    let selectionNode = null;\n    let selectedElement = null;\n    let selectedLink = null\n    //check ctrl shift\n    var ctrlDown = false;\n    var shiftDown = false;\n    const color = \"rgb(255 136 0)\";\n    var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n                rx: 5,\n                ry: 5,\n\n            }\n        },\n        ports: {\n            items: [{\n                id: 'out-port',\n                group: 'out',\n\n            },\n            {\n                id: 'in-port',\n                group: 'in'\n            }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n\n                        }\n                    }\n                },\n                in: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'left'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'passive',\n                            fill: '#FFFFFF',\n                            stroke: '#187BD3',\n\n                        }\n                    }\n                }\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            },\n            {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n            },\n            line: {\n                connection: true,\n                stroke: '#333333',\n                strokeWidth: 2,\n                strokeLinejoin: 'round',\n                targetMarker: {\n                    'type': 'path',\n                    'd': 'M 10 -5 0 0 10 5 z'\n                }\n            },\n        },\n        ports: {\n            items: [\n                {\n                    id: 'out-port',\n                    group: 'out'\n                }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n                        }\n                    }\n                },\n\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            }, {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    //create link tool\n//     var verticesTool = new joint.linkTools.Vertices();\n// var segmentsTool = new joint.linkTools.Segments();\n// var sourceArrowheadTool = new joint.linkTools.SourceArrowhead();\nvar targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n// var sourceAnchorTool = new joint.linkTools.SourceAnchor();\n// var targetAnchorTool = new joint.linkTools.TargetAnchor();\n// var boundaryTool = new joint.linkTools.Boundary();\n// var removeButton = new joint.linkTools.Remove();\n\nvar toolsView = new joint.dia.ToolsView({\n    tools: [\n        // verticesTool, segmentsTool,\n        // sourceArrowheadTool, \n        targetArrowheadTool,\n        // sourceAnchorTool, targetAnchorTool,\n        // boundaryTool, removeButton\n    ]\n});\n    // 2) creating a tools view\n    \n    // var linkView = link.findView(paper);\n    // linkView.addTools(toolsView);\n    //custom link \n    var CustomLinkView = joint.dia.LinkView.extend({\n        // custom interactions:\n        pointerdblclick: function(evt, x, y) {\n            this.addVertex(x, y);\n        },\n        contextmenu: function(evt, x, y) {\n            this.addLabel(x, y);\n        },\n    \n        // custom options:\n        options: joint.util.defaults({\n            doubleLinkTools: true,\n        }, joint.dia.LinkView.prototype.options)\n    });\n    // Paper & Graph\n    var graph = new joint.dia.Graph;\n    //ctrl+z\n    var commandManager = new joint.dia.CommandManager({ graph: graph });\n    \n    //cấu hình paper\n    var paper = new joint.dia.Paper({  \n        width: 800,\n        height: 600,\n        model: graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        linkView: CustomLinkView,\n        interactive: { vertexAdd: false } ,\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n            radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n        defaultConnector: { name: 'rounded' },\n        validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n            // Prevent linking from input ports.\n            if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n            // Prevent linking from output ports to input ports within one element.\n            if (cellViewS === cellViewT) return false;\n            // Prevent linking to input ports.\n            return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n            linkMove: true,\n            labelMove: true,\n            arrowheadMove: true,\n            vertexMove: false,\n            vertexAdd: false,\n            vertexRemove: false,\n            useLinkTools: false,\n        },\n        defaultLink: function () {\n            return new joint.shapes.standard.Link({\n                attrs: {\n                    line: {\n                        connection: true,\n                        stroke: '#707070',\n                        strokeLinejoin: 'round',\n                    },\n                    wrapper: {\n                        connection: true,\n                        strokeWidth: 10,\n                        strokeLinejoin: 'round'\n                    },\n                    \n                },\n                \n                markup: [{\n                    tagName: 'path',\n                    selector: 'wrapper',\n                    attributes: {\n                        'fill': 'none',\n                        \n                        'stroke': 'transparent'\n                    }\n                }, {\n                    tagName: 'path',\n                    selector: 'line',\n                    attributes: {\n                        'fill': 'none',\n                        \n                    }\n                }]\n            });\n        }\n    });\n    //paperScroller\n    var paperScroller = new joint.ui.PaperScroller({\n        paper: paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: 'grab'\n        \n    });\n    // cấu hình snaplines\n    var snaplines = new joint.ui.Snaplines({ paper: paper })\n    snaplines.startListening()\n    // cấu hình Stencil \n    var stencil = new joint.ui.Stencil({\n        paper: paperScroller,\n        width: 900,\n        height: 60,\n        dropAnimation: { duration: 200, easing: 'swing' },\n        \n    });\n    // cấu hình Selection\n    var selection = new joint.ui.Selection({\n        theme: 'material',\n        paper: paper,\n        useModelGeometry: true,\n        allowTranslate: true,\n    });\n    //hàm viết hoa chữ đầu\n    function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    //hàm render stencil\n    function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n        arr.forEach(element => {\n            //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n            let elementName = jsUcfirst(element)\n            if (elementName === jsUcfirst(elNoInPorts)) {\n                element = new customElNoInPorts();\n            }\n            else {\n                element = new customEl();\n            }\n            element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`)\n            stencilShapes.push(element.position(positionX, positionY))\n            if(spaceBetweenElToX>0){\n                positionX += element.attributes.size.width+spaceBetweenElToX;\n            }\n            if(spaceBetweenElToY>0){\n                positionY += element.attributes.size.height+spaceBetweenElToY;\n            }\n        });\n    }\n    \n    // const filter=new customEl();\n    // const formula =new customEl();\n    // const join =new customEl();\n    // const load =new customElNoInPorts();\n    // const pivot =new customEl();\n    // const sample =new customEl();\n    // const script =new customEl();\n    // const select =new customEl();\n    // const sort =new customEl();\n    // const summarize =new customEl();\n    // const transposeTable =new customEl();\n    // const union =new customEl();\n    // const weightAvg =new customEl();\n\n    // filter.prop('attrs/image/xlinkHref', './assets/Filter.svg');\n    // formula.prop('attrs/image/xlinkHref', './assets/Formula.svg');\n    // join.prop('attrs/image/xlinkHref', './assets/Join.svg');\n    // load.prop('attrs/image/xlinkHref', './assets/Load.svg');\n    // pivot.prop('attrs/image/xlinkHref', './assets/Pivot.svg');\n    // sample.prop('attrs/image/xlinkHref', './assets/Sample.svg');\n    // script.prop('attrs/image/xlinkHref', './assets/Script.svg');\n    // select.prop('attrs/image/xlinkHref', './assets/Select.svg');\n    // sort.prop('attrs/image/xlinkHref', './assets/Sort.svg');\n    // summarize.prop('attrs/image/xlinkHref', './assets/Summarize.svg');\n    // transposeTable.prop('attrs/image/xlinkHref', './assets/TransposeTable.svg');\n    // union.prop('attrs/image/xlinkHref', './assets/Union.svg');\n    // weightAvg.prop('attrs/image/xlinkHref', './assets/WeightAvg.svg');\n    //mảng tên của các stencil Shape\n    var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n    //mảng chứa các vị trí của stencil Shape để sau đó render\n    var stencilShapes = [\n        // filter.position(20, 20),\n        // formula.position(77, 20),\n        // join.position(132, 20),\n        // load.position(197, 20),\n        // pivot.position(252, 20),\n        // sample.position(307, 20),\n        // script.position(362, 20),\n        // select.position(417, 20),\n        // sort.position(472, 20),\n        // summarize.position(527, 20),\n        // transposeTable.position(582, 20),\n        // union.position(637, 20),\n        // weightAvg.position(692, 20),\n        // rectangle.position(812, 20)\n];\n    //gọi hàm render stencil \n    stencilRenderHandler(20,20,arr,\"load\",16)\n    //cấu hình các cell dc chọn\n    paper.svg.prepend(\n    V.createSVGStyle(`\n            .joint-element .selection {\n                stroke: ${color};\n            }\n            .joint-link .selection {\n                stroke: ${color}; \n                'fill': ${color},\n            }\n            \n        `)\n    );\n    \n    //lấy tất cả link ở trc node\n    function getElementPredecessorLinks(el) {\n        return graph\n          .getSubgraph([el, ...graph.getPredecessors(el)])\n          .filter((cell) => cell.isLink());\n      }\n      //đổi màu cell\n      function highlightCell(cell) {\n        if(cell){\n        highlighters.addClass.add(\n          cell.findView(paper),\n          cell.isElement() ? \"body\" : \"line\",\n          \"selection\",\n          { className: \"selection\" }\n        );\n        }else{return}\n      }\n      //chuyển màu cell lại như cũ\n      function unhighlightCell(cell) {\n        if(cell){\n        highlighters.addClass.remove(cell.findView(paper), \"selection\");\n        }\n        else{return}\n      }\n      //function xử lý hành dộng chọn el\n      function selectElement(el) {     \n        if (selectionNode === el) return;\n        if (selectionNode) {\n            \n          unhighlightCell(selectionNode);\n          graph.getLinks().forEach((link) => unhighlightCell(link));\n        }\n        if (el) {\n            \n          highlightCell(el);\n          getElementPredecessorLinks(el).forEach((link) => {\n              highlightCell(link)\n              link.toFront()\n            });\n          selectionNode = el;\n        } else {\n            selectionNode = null;\n        }\n      }\n      //halo cấu hình\n       paper.on('cell:pointerup',function (cellView) {\n        var halo = new joint.ui.Halo({\n            cellView: cellView,\n            type: 'toolbar',\n            boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n        });\n        halo.removeHandle('resize');\n        halo.removeHandle('rotate');\n        halo.removeHandle('direction');\n        halo.render();\n        //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n        selectedElement = cellView.model;\n        selectedElement.toFront()\n        // console.log(graph.getLinks())\n    })\n   \n      //xử lý khi các sự kiện với paper\n      paper.on({\n          //xử lý khi các sự kiện \n        \"cell:mouseenter\":(cellView)=>{\n                cellView.model.toFront()\n        },\n        \"cell:mouseleave\":(cellView)=>{\n            cellView.model.toBack()\n            if(selectionNode){\n                getElementPredecessorLinks(selectionNode).forEach((link) => {\n                   \n                    link.toFront()\n                  });\n            }\n        },\n    \n        \"element:pointerclick\":(cellView) =>{\n            //chỉ đổi màu khi ko bấm ctrl\n            if(ctrlDown ===false )\n                { \n                    selectElement(cellView.model)\n                }\n            },\n            \"link:pointerclick\":(cellView) =>\n                {selectElement(cellView.model)\n                    //chon vao link thi mo cho phep doi node\n                    cellView.addTools(toolsView);\n                \n                },\n                \n                //chuyển lại màu cũ khi bấm ra ngoài\n            \"blank:pointerclick\":() => {selectElement(null)\n                paper.removeTools();\n                },\n            \n            'element:pointerup': function (cellView, evt) {\n                \n                if (evt.ctrlKey || evt.metaKey) {\n                    selection.collection.add(cellView.model);\n                    //loop to all the element in selection and set it to front\n                    selection.collection.models.forEach(element => {\n                        element.toFront()\n                    })               \n                }\n            },\n            //chuyển màu khi bấm vào link và cho nó lên trc\n            'link:pointerup': function (cellView) {\n                selectedLink = cellView.model;\n                selectedLink.toFront()\n            },\n            \n            // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n            'blank:pointerdown':function(evt, x, y) {\n                if (shiftDown===true) {\n                    selectElement(null)\n                    paperScroller.setCursor('crosshair')\n                    selection.startSelecting(evt);\n                    console.log(selection)\n                } else {\n                    selection.collection.reset([]);\n                    paperScroller.startPanning(evt, x, y);\n                    paper.removeTools();\n                    paperScroller.setCursor('grab');\n                }\n        \n            },\n      })\n      //xóa el nếu chọn lại lần 2 khi bấm ctrl\n      selection.on('selection-box:pointerdown', function (cellView, evt) {\n        if (evt.ctrlKey || evt.metaKey) {\n            selection.collection.remove(cellView.model);\n        }\n    });\n    //xóa bằng nút delete\n    document.addEventListener('keyup', function (evt) {\n        \n        if (!selectedElement && !selection) return;\n        if (evt.code === 'Backspace' || evt.code === 'Delete') {\n            //xóa 1 el\n            if (selectedElement) {\n                selectedElement.remove();\n                selectedElement = null;\n                selectionNode=null;\n            }\n            //xóa toàn bộ  el đã chọn\n            if (selection) {\n                // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n                evt.preventDefault();\n                graph.removeCells(selection.collection.toArray())\n                selectionNode=null;\n            }\n        }\n    }\n    );\n    //nếu bấm thì =true\n    document.addEventListener('keydown', function (evt) {\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n            ctrlDown = true;\n        }\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n            shiftDown = true;\n        }\n    })\n    //nếu thả nút thì =false\n    document.addEventListener('keyup', function (evt) {\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n            shiftDown = false;\n\n        }\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n            ctrlDown = false;\n        }\n    })\n    //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n    document.addEventListener('keydown', function (evt) {\n        var clipboard = new joint.ui.Clipboard();\n        \n        \n        if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n            console.log(evt.code)\n            paperScroller.zoom(0.2, { max: 4 });\n        }\n        if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n            paperScroller.zoom(-0.2, { min: 0.2 });\n            console.log(evt.code)\n        }\n        //check+ A\n        if (evt.code === \"KeyA\" && ctrlDown === true) {\n            selection.collection.reset(graph.getElements())\n            evt.preventDefault();\n        }//check ctrl + Z\n        if (evt.code === \"KeyZ\" && ctrlDown === true) {\n            commandManager.undo();\n            \n            unhighlightCell(selectionNode);\n            graph.getLinks().forEach((link) => unhighlightCell(link));\n            console.log(selectionNode)\n            selectionNode=null\n        }\n        //check ctrl + Y\n        if (evt.code === \"KeyY\" && ctrlDown === true) {\n            commandManager.redo();\n            selectElement(null)\n        }\n        //check ctrl + V ,ctrl + C, ctrl+X\n        if (evt.code === \"KeyX\" && ctrlDown === true) {\n\n            clipboard.cutElements(selection.collection, paper.model)\n        }\n        if (evt.code === \"KeyC\" && ctrlDown === true) {\n            clipboard.copyElements(selection.collection, graph);\n        }\n        if (evt.code === \"KeyV\" && ctrlDown === true) {\n            var pastedCells = clipboard.pasteCells(graph, {\n                translate: { dx: 40, dy: 40 },\n                useLocalStorage: true\n            });\n\n            var elements = _.filter(pastedCells, function (cell) {\n                return cell.isElement();\n            });\n            // Make sure pasted elements get selected immediately. This makes the UX better as\n            // the user can immediately manipulate the pasted elements.\n            selection.collection.reset(elements);\n\n        }\n    })\n   \n    // nut zoomin zoom out can chuyen ve scroll\n    $('#btn-zoomin').on('click', function() {\n        paperScroller.zoom(0.2, { max: 4 });\n    });\n    $('#btn-zoomout').on('click', function() {\n        paperScroller.zoom(-0.2, { min: 0.2 });\n    });\n    $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n    $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller));\n\n    //render paper\n    document.getElementById('paper').appendChild(paperScroller.render().el);\n    //render paperScroller\n    paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\n    paperScroller.center();\n     //render stencil ra màn hình\n     document.getElementById('stencil').appendChild(stencil.render().el);\n     stencil.load(stencilShapes);\n     selection.collection.reset(graph.getElements());\n    //  var linkView = paper.findViewByModel(link);\n     \n}\n  }\n}\n</script>\n\n<style >\n@import \"@/../public/vendor/build/package/rappid.css\";\n@import \"@/css/data_flow.css\";\n@import \"@/css/lib/rappid.min.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}