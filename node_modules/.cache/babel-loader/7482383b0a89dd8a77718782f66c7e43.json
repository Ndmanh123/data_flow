{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"main\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"btn_contain\\\"><button id=\\\"btn-zoomout\\\" class=\\\"btn\\\">zoom out</button><button id=\\\"btn-zoomin\\\" class=\\\"btn\\\">zoom in</button><button id=\\\"btn-center\\\" class=\\\"btn\\\">center</button><button id=\\\"btn-center-content\\\" class=\\\"btn\\\">center content</button></div>\", 1);\n\nconst _hoisted_3 = {\n  ref: \"nodeStencile\",\n  id: \"stencil\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"paper\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"navigator\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, null, 512\n  /* NEED_PATCH */\n  ), _hoisted_4, _hoisted_5]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;;;;;;EAODC,GAAG,EAAC;EAAeD,EAAE,EAAC;;;gCAE3BE,oBAAuB,KAAvB,EAAuB;EAAlBF,EAAE,EAAC;AAAe,CAAvB,EAAe,IAAf,EAAe;AAAA;AAAf;;gCACAE,oBAA0B,KAA1B,EAA0B;EAArBF,EAAE,EAAC;AAAkB,CAA1B,EAAmB,IAAnB,EAAmB;AAAA;AAAnB;;;uBAVFG,oBAaY,KAbZ,cAaY,CAZVC,UAYU,EANVF,oBAA2C,KAA3C,cAA2C,IAA3C,EAA2C;EAAA;EAA3C,CAMU,EAJVG,UAIU,EAHVC,UAGU,CAbZ","names":["id","ref","_createElementVNode","_createElementBlock","_hoisted_2","_hoisted_4","_hoisted_5"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\components\\dataflow.vue"],"sourcesContent":["<template>\r\n  <div id=\"main\" >\r\n    <div class=\"btn_contain\">\r\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\r\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\r\n        <button id=\"btn-center\" class=\"btn\">center</button>\r\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\r\n    </div>\r\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\r\n    \r\n    <div id=\"paper\" ></div>\r\n    <div id=\"navigator\"></div>\r\n    \r\n    \r\n        </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name:'DataFlow',\r\n    props: {\r\n        instanceKey: {\r\n            defaul: ''\r\n        },\r\n        action: {\r\n            defaul: 'view'\r\n        },\r\n\t\twidth: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 800\r\n\t\t},\r\n\t\theight: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 250\r\n\t\t},\r\n\t\tgridSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\tdrawGrid: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tbackground: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\treadonly: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n        highLightLinks:{\r\n            type: Array,\r\n            default(){\r\n                return []\r\n            }\r\n        },\r\n        nodes:{\r\n            type: [Object, Boolean],\r\n            default: false\r\n        },\r\n        links:{\r\n            type: [Object, Boolean],\r\n            default: false\r\n        }\r\n\t},\r\n    data(){\r\n        return{\r\n            stencilShapes : [],\r\n            selectionNode : null,\r\n            selectedElement : null,\r\n            selectedLink : null,\r\n            \r\n            //check ctrl shift\r\n            ctrlDown : false,\r\n            shiftDown : false,\r\n            color : \"rgb(255 136 0)\",\r\n            arr: ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'],\r\n        }\r\n    },\r\n    created() {\r\n        this.graph = new joint.dia.Graph;\r\n    },\r\n    mounted() {\r\n        this.initPaper()\r\n    },\r\n    methods: {\r\n        \r\n        initPaper(){\r\n            let graph = this.graph;\r\n             this.commandManager = new joint.dia.CommandManager({\r\n                graph: graph,\r\n                cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\r\n                    return !options.ignoreCommandManager;\r\n                }\r\n            });\r\n            this.paper = new joint.dia.Paper({  \r\n                \r\n                width: 1000,\r\n                height: 800,\r\n                model: this.graph,\r\n                async: true,\r\n                sorting: joint.dia.Paper.sorting.APPROX,\r\n                gridSize: 10,\r\n                drawGrid: true,\r\n                restrictTranslate: true,\r\n                stopDelegation: false,\r\n                \r\n                interactive: { vertexAdd: false } ,\r\n                // background: { color: '#F3F7F6' },\r\n                // defaultConnectionPoint: { name: 'boundary' },\r\n                // defaultConnector: {\r\n                //     name: \"rounded\"\r\n                //   },\r\n                //   defaultRouter: {\r\n                //     name: \"manhattan\",\r\n                //     args: {\r\n                //       step: 10,\r\n                //       endDirections: [\"bottom\"],\r\n                //       startDirections: [\"top\"],\r\n                //       padding: { bottom: 20 }\r\n                //     }\r\n                //   },\r\n                snapLinks: {\r\n                    radius: 75\r\n                },\r\n                linkPinning: false,\r\n                multiLinks: false,\r\n                defaultRouter: { name: 'manhattan', args: { padding: 10 }},\r\n                defaultConnector: { name: 'rounded' },\r\n                validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\r\n                    // Prevent linking from input ports.\r\n                    if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\r\n                    // Prevent linking from output ports to input ports within one element.\r\n                    if (cellViewS === cellViewT) return false;\r\n                    // Prevent linking to input ports.\r\n                    return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\r\n                },\r\n                // validateConnection: function (view1, _magnet1, view2, _magnet2) {\r\n                //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\r\n                //     return view1 !== view2;\r\n                // },\r\n                interactive: {\r\n                    linkMove: true,\r\n                    labelMove: true,\r\n                    arrowheadMove: true,\r\n                    vertexMove: false,\r\n                    vertexAdd: false,\r\n                    vertexRemove: false,\r\n                    useLinkTools: false,\r\n                },\r\n                defaultLink: function () {\r\n                    return new joint.shapes.standard.Link({\r\n                        attrs: {\r\n                            z:1,\r\n                            line: {\r\n                                connection: true,\r\n                                stroke: '#707070',\r\n                                strokeLinejoin: 'round',\r\n                            },\r\n                            wrapper: {\r\n                                connection: true,\r\n                                strokeWidth: 10,\r\n                                strokeLinejoin: 'round'\r\n                            },\r\n                            \r\n                        },\r\n                        \r\n                        markup: [{\r\n                            tagName: 'path',\r\n                            selector: 'wrapper',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                                'stroke': 'transparent'\r\n                            }\r\n                        }, {\r\n                            tagName: 'path',\r\n                            selector: 'line',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                            }\r\n                        }]\r\n                    });\r\n                }\r\n            });\r\n            this.paperScroller = new joint.ui.PaperScroller({\r\n                paper: this.paper,\r\n                autoResizePaper: true,\r\n                scrollWhileDragging: true,\r\n                cursor: 'grab'\r\n                \r\n            });\r\n            this.selection = new joint.ui.Selection({\r\n                theme: 'material',\r\n                paper: this.paper,\r\n                useModelGeometry: true,\r\n                allowTranslate: true,\r\n            });\r\n            this.snaplines = new joint.ui.Snaplines({ paper: this.paper })\r\n            this.snaplines.startListening()\r\n            //render paper\r\n            document.getElementById('paper').appendChild(this.paperScroller.render().el);\r\n            //render paperScroller\r\n            \r\n            this.paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\r\n            this.paperScroller.center();\r\n            this.addStencil()\r\n            this.handlePaperEvents();\r\n            this.selection.collection.reset(graph.getElements());\r\n        },\r\n        jsUcfirst(string){\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        },\r\n        stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\r\n            \r\n            var customEl = joint.dia.Element.define('standard.Rectangle', {\r\n                z: 1,\r\n                size: {\r\n                    width: 44,\r\n                    height: 35\r\n                },\r\n                removable: false,\r\n                attrs: {\r\n                    image: {\r\n                        x: 5,\r\n                        y: 5,\r\n                        width: 'calc(w-10)',\r\n                        height: 'calc(h-10 )'\r\n                    },\r\n                    root: {\r\n                        magnet: false\r\n                    },\r\n                    body: {\r\n                        fill: '#FFFFFF',\r\n                        stroke: '#A0A0A0',\r\n                        width: 'calc(w)',\r\n                        height: 'calc(h)',\r\n                        strokeWidth: 2,\r\n                        rx: 5,\r\n                        ry: 5,\r\n\r\n                    }\r\n                },\r\n                ports: {\r\n                    items: [{\r\n                        id: 'out-port',\r\n                        group: 'out',\r\n\r\n                    },\r\n                    {\r\n                        id: 'in-port',\r\n                        group: 'in'\r\n                    }\r\n                    ],\r\n                    groups: {\r\n                        out: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'right'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'active',\r\n                                    fill: '#187BD3',\r\n                                    stroke: '#187BD3'\r\n\r\n                                }\r\n                            }\r\n                        },\r\n                        in: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'left'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'passive',\r\n                                    fill: '#FFFFFF',\r\n                                    stroke: '#187BD3',\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                markup: [\r\n                    {\r\n                        tagName: 'rect',\r\n                        selector: 'body',\r\n                    },\r\n                    {\r\n                        tagName: 'image',\r\n                        selector: 'image'\r\n                    }, {\r\n                        tagName: 'ports',\r\n                        selector: 'ports'\r\n                    }]\r\n            })\r\n            var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\r\n                z: 1,\r\n                theme: 'material',\r\n                size: {\r\n                    width: 44,\r\n                    height: 35\r\n                },\r\n                removable: false,\r\n                attrs: {\r\n                    image: {\r\n                        x: 5,\r\n                        y: 5,\r\n                        width: 'calc(w-10)',\r\n                        height: 'calc(h-10 )'\r\n                    },\r\n                    root: {\r\n                        magnet: false\r\n                    },\r\n                    body: {\r\n                        fill: '#FFFFFF',\r\n                        stroke: '#A0A0A0',\r\n                        width: 'calc(w)',\r\n                        height: 'calc(h)',\r\n                        strokeWidth: 2,\r\n                    },\r\n                    line: {\r\n                        connection: true,\r\n                        stroke: '#333333',\r\n                        strokeWidth: 2,\r\n                        strokeLinejoin: 'round',\r\n                        targetMarker: {\r\n                            'type': 'path',\r\n                            'd': 'M 10 -5 0 0 10 5 z'\r\n                        }\r\n                    },\r\n                },\r\n                ports: {\r\n                    items: [\r\n                        {\r\n                            id: 'out-port',\r\n                            group: 'out'\r\n                        }\r\n                    ],\r\n                    groups: {\r\n                        out: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'right'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'active',\r\n                                    fill: '#187BD3',\r\n                                    stroke: '#187BD3'\r\n                                }\r\n                            }\r\n                        },\r\n\r\n                    }\r\n                },\r\n                markup: [\r\n                    {\r\n                        tagName: 'rect',\r\n                        selector: 'body',\r\n                    }, {\r\n                        tagName: 'image',\r\n                        selector: 'image'\r\n                    }, {\r\n                        tagName: 'ports',\r\n                        selector: 'ports'\r\n                    }]\r\n            })\r\n            this.arr.forEach(element => {\r\n                //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\r\n                let elementName = this.jsUcfirst(element)\r\n                if (elementName === this.jsUcfirst(elNoInPorts)) {\r\n                    element = new customElNoInPorts();\r\n                }\r\n                else {\r\n                    element = new customEl();\r\n                }\r\n                element.prop('attrs/image/xlinkHref', require(`../assets/${elementName}.svg`))\r\n                this.stencilShapes.push(element.position(positionX, positionY))\r\n                if(spaceBetweenElToX>0){\r\n                    positionX += element.attributes.size.width+spaceBetweenElToX;\r\n                }\r\n                if(spaceBetweenElToY>0){\r\n                    positionY += element.attributes.size.height+spaceBetweenElToY;\r\n                }\r\n            });\r\n        },\r\n    \r\n        addStencil(){\r\n            let graph = this.graph;\r\n            let paper = this.paper;\r\n            var stencil = new joint.ui.Stencil({\r\n                paper: this.paperScroller,\r\n                width: 900,\r\n                height: 60,\r\n                dropAnimation: { duration: 200, easing: 'swing' },\r\n            });\r\n            \r\n            this.stencilRenderHandler(20,20,this.arr,\"load\",16)\r\n            document.getElementById('stencil').appendChild(stencil.render().el);\r\n            stencil.load(this.stencilShapes);\r\n        },\r\n        \r\n        addHalo(cellView){\r\n            var halo = new joint.ui.Halo({\r\n                cellView: cellView,\r\n                type: 'toolbar',\r\n                boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\r\n            });\r\n            halo.removeHandle('resize');\r\n            halo.removeHandle('rotate');\r\n            halo.removeHandle('direction');\r\n            halo.render();\r\n        },\r\n        handlePaperEvents(){\r\n            let self = this;\r\n            let paper = self.paper;\r\n            let graph = self.graph;\r\n            //nếu bấm thì =true\r\n            document.addEventListener('keydown', function (evt) {\r\n                if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n                    self.ctrlDown = true;\r\n                }\r\n                if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n                    self.shiftDown = true;\r\n                }\r\n            })\r\n            //nếu thả nút thì =false\r\n            document.addEventListener('keyup', function (evt) {\r\n                if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n                    self.shiftDown = false;\r\n\r\n                }\r\n                if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n                    self.ctrlDown = false;\r\n                }\r\n            })\r\n            paper.on('cell:pointerup',function (cellView) {\r\n                self.addHalo(cellView)\r\n                if(cellView.model.attributes['type']==='standard.Link'){\r\n                    self.$emit('select-link', {id: cellView.model.id});\r\n                }else{\r\n                    self.$emit('select-cell', {id: cellView.model.id});\r\n                }\r\n                \r\n                self.selectedElement = cellView.model;\r\n                self.selectedElement.toFront({ ignoreCommandManager: true })\r\n                // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\r\n                // console.log(graph.getLinks())\r\n            })\r\n            paper.on({\r\n          //xử lý khi các sự kiện \r\n                \"cell:mouseenter\":(cellView)=>{\r\n                        cellView.model.toFront({ ignoreCommandManager: true })\r\n                },\r\n                \"cell:mouseleave\":(cellView)=>{\r\n                    cellView.model.toBack({ ignoreCommandManager: true })\r\n                    if(self.selectionNode){\r\n                        getElementPredecessorLinks(self.selectionNode).forEach((link) => {\r\n                        \r\n                            link.toFront({ ignoreCommandManager: true })\r\n                        });\r\n                    }\r\n                },\r\n            \r\n                \"element:pointerclick\":(cellView) =>{\r\n                    //chỉ đổi màu khi ko bấm ctrl\r\n                    if(self.ctrlDown ===false )\r\n                        { \r\n                            // selectElement(cellView.model)\r\n                        }\r\n                    },\r\n                    \"link:pointerclick\":(cellView) =>\r\n                        {\r\n                            // selectElement(cellView.model)\r\n                            //chon vao link thi mo cho phep doi node\r\n                            // cellView.addTools(toolsView);\r\n                        \r\n                        },\r\n                        \r\n                        //chuyển lại màu cũ khi bấm ra ngoài\r\n                    \"blank:pointerclick\":() => {\r\n                        // selectElement(null)\r\n                        paper.removeTools({ ignoreCommandManager: true });\r\n                        \r\n                        },\r\n                    \r\n                    'element:pointerup': function (cellView, evt) {\r\n                        console.log(evt)\r\n                        if (evt.ctrlKey || evt.metaKey) {\r\n                            console.log(self.selection)\r\n                            self.selection.collection.add(cellView.model);\r\n                            //loop to all the element in selection and set it to front\r\n                            self.selection.collection.models.forEach(element => {\r\n                                element.toFront({ ignoreCommandManager: true })\r\n                            })               \r\n                        }\r\n                    },\r\n                    //chuyển màu khi bấm vào link và cho nó lên trc\r\n                    'link:pointerup': function (cellView) {\r\n                        self.selectedLink = cellView.model;\r\n                        self.selectedLink.toFront({ ignoreCommandManager: true })\r\n                    },\r\n                    \r\n                    // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\r\n                    'blank:pointerdown':function(evt, x, y) {\r\n                        if (self.shiftDown===true) {\r\n                            // selectElement(null)\r\n                            self.paperScroller.setCursor('crosshair')\r\n                            self.selection.startSelecting(evt);\r\n                            \r\n                        } else {\r\n                            console.log(self.getAllNodes())\r\n                            \r\n                            console.log(self.getAllLinks())\r\n                            self.selection.collection.reset([]);\r\n                            self.paperScroller.startPanning(evt, x, y);\r\n                            paper.removeTools();\r\n                            self.paperScroller.setCursor('grab');\r\n                        }\r\n                \r\n                    },\r\n            })\r\n            //xóa el nếu chọn lại lần 2 khi bấm ctrl\r\n            self.selection.on('selection-box:pointerdown', function (cellView, evt) {\r\n                if (evt.ctrlKey || evt.metaKey) {\r\n                    self.selection.collection.remove(cellView.model);\r\n                }\r\n            });\r\n                //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\r\n    document.addEventListener('keydown', function (evt) {\r\n        self.clipboard = new joint.ui.Clipboard();\r\n        \r\n        \r\n        if (evt.code === \"NumpadAdd\" && self.shiftDown === true) {\r\n            // console.log(evt.code)\r\n            self.paperScroller.zoom(0.2, { max: 4 });\r\n        }\r\n        if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\r\n            self.paperScroller.zoom(-0.2, { min: 0.2 });\r\n            // console.log(evt.code)\r\n        }\r\n        //check+ A\r\n        if (evt.code === \"KeyA\" && self.ctrlDown === true) {\r\n            self.selection.collection.reset(graph.getElements())\r\n            evt.preventDefault();\r\n        }//check ctrl + Z\r\n        if (evt.code === \"KeyZ\" && self.ctrlDown === true) {\r\n            self.commandManager.undo();\r\n            // console.log(selectionNode)\r\n            \r\n            unhighlightCell(self.selectionNode);\r\n            graph.getLinks().forEach((link) => unhighlightCell(link));\r\n        \r\n            // console.log(selectionNode)\r\n            self.selectionNode=null\r\n        }\r\n        //check ctrl + Y\r\n        if (evt.code === \"KeyY\" && self.ctrlDown === true) {\r\n            self.commandManager.redo();\r\n            // selectElement(null)\r\n        }\r\n        //check ctrl + V ,ctrl + C, ctrl+X\r\n        if (evt.code === \"KeyX\" && self.ctrlDown === true) {\r\n\r\n            self.clipboard.cutElements(self.selection.collection, paper.model)\r\n        }\r\n        if (evt.code === \"KeyC\" && self.ctrlDown === true) {\r\n            self.clipboard.copyElements(self.selection.collection, graph);\r\n        }\r\n        if (evt.code === \"KeyV\" && self.ctrlDown === true) {\r\n            var pastedCells = self.clipboard.pasteCells(graph, {\r\n                translate: { dx: 40, dy: 40 },\r\n                useLocalStorage: true\r\n            });\r\n\r\n            var elements = _.filter(pastedCells, function (cell) {\r\n                return cell.isElement();\r\n            });\r\n            // Make sure pasted elements get selected immediately. This makes the UX better as\r\n            // the user can immediately manipulate the pasted elements.\r\n            self.selection.collection.reset(elements);\r\n\r\n        }\r\n    })\r\n   \r\n        },\r\n        getAllLinks(){\r\n             return this.graph.getLinks()\r\n        },\r\n        getAllNodes(){\r\n            return this.graph.getCells()\r\n        },\r\n        clearAll(){\r\n            return this.graph.clear()\r\n        },\r\n        getNodeAttr(id){\r\n            let node = this.graph.getCell(id);\r\n            if(node){\r\n                return node.attributes;\r\n            }else{\r\n                return {}\r\n            }\r\n        },\r\n        render(){\r\n            let nodeInfo=this.nodes;\r\n            let linkInfo=this.links;\r\n            \r\n            if(nodeInfo){\r\n                let cell =new joint.shapes.nodeInfo.nodeType({\r\n                    position: nodeInfo.position,\r\n                    id: attr.id,\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}