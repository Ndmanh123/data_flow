{"ast":null,"code":"const joint = require('jointjs');\n\nwindow.$ = require('jquery'); // import { Options, Vue } from 'vue-class-component';\n\nexport default {\n  mounted() {\n    // var highlighters=joint.highlighters;\n    let selectionNode = null;\n    let selectedElement = null;\n    let selectedLink = null; //check ctrl shift\n\n    var ctrlDown = false;\n    var shiftDown = false;\n    const color = \"rgb(255 136 0)\";\n    var customEl = joint.dia.Element.define('standard.Rectangle', {\n      z: 1,\n      size: {\n        width: 44,\n        height: 35\n      },\n      removable: false,\n      attrs: {\n        image: {\n          x: 5,\n          y: 5,\n          width: 'calc(w-10)',\n          height: 'calc(h-10 )'\n        },\n        root: {\n          magnet: false\n        },\n        body: {\n          fill: '#FFFFFF',\n          stroke: '#A0A0A0',\n          width: 'calc(w)',\n          height: 'calc(h)',\n          strokeWidth: 2,\n          rx: 5,\n          ry: 5\n        }\n      },\n      ports: {\n        items: [{\n          id: 'out-port',\n          group: 'out'\n        }, {\n          id: 'in-port',\n          group: 'in'\n        }],\n        groups: {\n          out: {\n            markup: [{\n              tagName: 'circle',\n              selector: 'portBody'\n            }],\n            position: {\n              name: 'right'\n            },\n            attrs: {\n              portBody: {\n                r: 5,\n                magnet: 'active',\n                fill: '#187BD3',\n                stroke: '#187BD3'\n              }\n            }\n          },\n          in: {\n            markup: [{\n              tagName: 'circle',\n              selector: 'portBody'\n            }],\n            position: {\n              name: 'left'\n            },\n            attrs: {\n              portBody: {\n                r: 5,\n                magnet: 'passive',\n                fill: '#FFFFFF',\n                stroke: '#187BD3'\n              }\n            }\n          }\n        }\n      },\n      markup: [{\n        tagName: 'rect',\n        selector: 'body'\n      }, {\n        tagName: 'image',\n        selector: 'image'\n      }, {\n        tagName: 'ports',\n        selector: 'ports'\n      }]\n    });\n    var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n      z: 1,\n      theme: 'material',\n      size: {\n        width: 44,\n        height: 35\n      },\n      removable: false,\n      attrs: {\n        image: {\n          x: 5,\n          y: 5,\n          width: 'calc(w-10)',\n          height: 'calc(h-10 )'\n        },\n        root: {\n          magnet: false\n        },\n        body: {\n          fill: '#FFFFFF',\n          stroke: '#A0A0A0',\n          width: 'calc(w)',\n          height: 'calc(h)',\n          strokeWidth: 2\n        },\n        line: {\n          connection: true,\n          stroke: '#333333',\n          strokeWidth: 2,\n          strokeLinejoin: 'round',\n          targetMarker: {\n            'type': 'path',\n            'd': 'M 10 -5 0 0 10 5 z'\n          }\n        }\n      },\n      ports: {\n        items: [{\n          id: 'out-port',\n          group: 'out'\n        }],\n        groups: {\n          out: {\n            markup: [{\n              tagName: 'circle',\n              selector: 'portBody'\n            }],\n            position: {\n              name: 'right'\n            },\n            attrs: {\n              portBody: {\n                r: 5,\n                magnet: 'active',\n                fill: '#187BD3',\n                stroke: '#187BD3'\n              }\n            }\n          }\n        }\n      },\n      markup: [{\n        tagName: 'rect',\n        selector: 'body'\n      }, {\n        tagName: 'image',\n        selector: 'image'\n      }, {\n        tagName: 'ports',\n        selector: 'ports'\n      }]\n    });\n    var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n    var toolsView = new joint.dia.ToolsView({\n      tools: [targetArrowheadTool]\n    });\n    var CustomLinkView = joint.dia.LinkView.extend({\n      // custom interactions:\n      pointerdblclick: function (evt, x, y) {\n        this.addVertex(x, y);\n      },\n      contextmenu: function (evt, x, y) {\n        this.addLabel(x, y);\n      },\n      // custom options:\n      options: joint.util.defaults({\n        doubleLinkTools: true\n      }, joint.dia.LinkView.prototype.options)\n    });\n    var graph = new joint.dia.Graph(); // //ctrl+z\n    // var commandManager = new joint.dia.CommandManager({ graph: graph });\n    // //cấu hình paper\n\n    var paper = new joint.dia.Paper({\n      el: $('#paper'),\n      width: 800,\n      height: 600,\n      model: graph,\n      async: true,\n      sorting: joint.dia.Paper.sorting.APPROX,\n      gridSize: 10,\n      drawGrid: true,\n      restrictTranslate: true,\n      stopDelegation: false,\n      linkView: CustomLinkView,\n      interactive: {\n        vertexAdd: false\n      },\n      // background: { color: '#F3F7F6' },\n      // defaultConnectionPoint: { name: 'boundary' },\n      // defaultConnector: {\n      //     name: \"rounded\"\n      //   },\n      //   defaultRouter: {\n      //     name: \"manhattan\",\n      //     args: {\n      //       step: 10,\n      //       endDirections: [\"bottom\"],\n      //       startDirections: [\"top\"],\n      //       padding: { bottom: 20 }\n      //     }\n      //   },\n      snapLinks: {\n        radius: 75\n      },\n      linkPinning: false,\n      multiLinks: false,\n      defaultRouter: {\n        name: 'manhattan',\n        args: {\n          padding: 10\n        }\n      },\n      defaultConnector: {\n        name: 'rounded'\n      },\n      validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n        // Prevent linking from input ports.\n        if (magnetS && magnetS.getAttribute('port-group') === 'in') return false; // Prevent linking from output ports to input ports within one element.\n\n        if (cellViewS === cellViewT) return false; // Prevent linking to input ports.\n\n        return magnetT && magnetT.getAttribute('port-group') === 'in' || cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer';\n      },\n      // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n      //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n      //     return view1 !== view2;\n      // },\n      interactive: {\n        linkMove: true,\n        labelMove: true,\n        arrowheadMove: true,\n        vertexMove: false,\n        vertexAdd: false,\n        vertexRemove: false,\n        useLinkTools: false\n      },\n      defaultLink: function () {\n        return new joint.shapes.standard.Link({\n          attrs: {\n            line: {\n              connection: true,\n              stroke: '#707070',\n              strokeLinejoin: 'round'\n            },\n            wrapper: {\n              connection: true,\n              strokeWidth: 10,\n              strokeLinejoin: 'round'\n            }\n          },\n          markup: [{\n            tagName: 'path',\n            selector: 'wrapper',\n            attributes: {\n              'fill': 'none',\n              'stroke': 'transparent'\n            }\n          }, {\n            tagName: 'path',\n            selector: 'line',\n            attributes: {\n              'fill': 'none'\n            }\n          }]\n        });\n      }\n    }); // //paperScroller\n\n    var paperScroller = new joint.ui.PaperScroller({\n      paper: paper,\n      autoResizePaper: true,\n      scrollWhileDragging: true,\n      cursor: 'grab'\n    }); // // cấu hình snaplines\n\n    var snaplines = new joint.ui.Snaplines({\n      paper: paper\n    });\n    snaplines.startListening(); // // cấu hình Stencil \n\n    var stencil = new joint.ui.Stencil({\n      paper: paperScroller,\n      width: 900,\n      height: 60,\n      dropAnimation: {\n        duration: 200,\n        easing: 'swing'\n      }\n    }); // // cấu hình Selection\n    // var selection = new joint.ui.Selection({\n    //     theme: 'material',\n    //     paper: paper,\n    //     useModelGeometry: true,\n    //     allowTranslate: true,\n    // });\n    // //hàm viết hoa chữ đầu\n\n    function jsUcfirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    } // //hàm render stencil\n\n\n    function stencilRenderHandler(positionX, positionY, arr, elNoInPorts = \"\", spaceBetweenElToX = 0, spaceBetweenElToY = 0) {\n      arr.forEach(element => {\n        //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n        let elementName = jsUcfirst(element);\n\n        if (elementName === jsUcfirst(elNoInPorts)) {\n          element = new customElNoInPorts();\n        } else {\n          element = new customEl();\n        }\n\n        element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`);\n        stencilShapes.push(element.position(positionX, positionY));\n\n        if (spaceBetweenElToX > 0) {\n          positionX += element.attributes.size.width + spaceBetweenElToX;\n        }\n\n        if (spaceBetweenElToY > 0) {\n          positionY += element.attributes.size.height + spaceBetweenElToY;\n        }\n      });\n    }\n\n    var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg']; // //mảng chứa các vị trí của stencil Shape để sau đó render\n\n    var stencilShapes = [];\n    stencilRenderHandler(20, 20, arr, \"load\", 16); // paper.svg.prepend(\n    // V.createSVGStyle(`\n    //         .joint-element .selection {\n    //             stroke: ${color};\n    //         }\n    //         .joint-link .selection {\n    //             stroke: ${color}; \n    //             'fill': ${color},\n    //         }\n    //     `)\n    // );\n    // //lấy tất cả link ở trc node\n    // function getElementPredecessorLinks(el) {\n    //     return graph\n    //       .getSubgraph([el, ...graph.getPredecessors(el)])\n    //       .filter((cell) => cell.isLink());\n    //   }\n    //   //đổi màu cell\n    //   function highlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.add(\n    //       cell.findView(paper),\n    //       cell.isElement() ? \"body\" : \"line\",\n    //       \"selection\",\n    //       { className: \"selection\" }\n    //     );\n    //     }else{return}\n    //   }\n    //   //chuyển màu cell lại như cũ\n    //   function unhighlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.remove(cell.findView(paper), \"selection\");\n    //     }\n    //     else{return}\n    //   }\n    //   //function xử lý hành dộng chọn el\n    //   function selectElement(el) {     \n    //     if (selectionNode === el) return;\n    //     if (selectionNode) {\n    //       unhighlightCell(selectionNode);\n    //       graph.getLinks().forEach((link) => unhighlightCell(link));\n    //     }\n    //     if (el) {\n    //       highlightCell(el);\n    //       getElementPredecessorLinks(el).forEach((link) => {\n    //           highlightCell(link)\n    //           link.toFront()\n    //         });\n    //       selectionNode = el;\n    //     } else {\n    //         selectionNode = null;\n    //     }\n    //   }\n    //   //halo cấu hình\n    //    paper.on('cell:pointerup',function (cellView) {\n    //     var halo = new joint.ui.Halo({\n    //         cellView: cellView,\n    //         type: 'toolbar',\n    //         boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n    //     });\n    //     halo.removeHandle('resize');\n    //     halo.removeHandle('rotate');\n    //     halo.removeHandle('direction');\n    //     halo.render();\n    //     //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n    //     selectedElement = cellView.model;\n    //     selectedElement.toFront()\n    //     // console.log(graph.getLinks())\n    // })\n    //   //xử lý khi các sự kiện với paper\n    //   paper.on({\n    //       //xử lý khi các sự kiện \n    //     \"cell:mouseenter\":(cellView)=>{\n    //             cellView.model.toFront()\n    //     },\n    //     \"cell:mouseleave\":(cellView)=>{\n    //         cellView.model.toBack()\n    //         if(selectionNode){\n    //             getElementPredecessorLinks(selectionNode).forEach((link) => {\n    //                 link.toFront()\n    //               });\n    //         }\n    //     },\n    //     \"element:pointerclick\":(cellView) =>{\n    //         //chỉ đổi màu khi ko bấm ctrl\n    //         if(ctrlDown ===false )\n    //             { \n    //                 selectElement(cellView.model)\n    //             }\n    //         },\n    //         \"link:pointerclick\":(cellView) =>\n    //             {selectElement(cellView.model)\n    //                 //chon vao link thi mo cho phep doi node\n    //                 cellView.addTools(toolsView);\n    //             },\n    //             //chuyển lại màu cũ khi bấm ra ngoài\n    //         \"blank:pointerclick\":() => {selectElement(null)\n    //             paper.removeTools();\n    //             },\n    //         'element:pointerup': function (cellView, evt) {\n    //             if (evt.ctrlKey || evt.metaKey) {\n    //                 selection.collection.add(cellView.model);\n    //                 //loop to all the element in selection and set it to front\n    //                 selection.collection.models.forEach(element => {\n    //                     element.toFront()\n    //                 })               \n    //             }\n    //         },\n    //         //chuyển màu khi bấm vào link và cho nó lên trc\n    //         'link:pointerup': function (cellView) {\n    //             selectedLink = cellView.model;\n    //             selectedLink.toFront()\n    //         },\n    //         // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n    //         'blank:pointerdown':function(evt, x, y) {\n    //             if (shiftDown===true) {\n    //                 selectElement(null)\n    //                 paperScroller.setCursor('crosshair')\n    //                 selection.startSelecting(evt);\n    //                 console.log(selection)\n    //             } else {\n    //                 selection.collection.reset([]);\n    //                 paperScroller.startPanning(evt, x, y);\n    //                 paper.removeTools();\n    //                 paperScroller.setCursor('grab');\n    //             }\n    //         },\n    //   })\n    //   //xóa el nếu chọn lại lần 2 khi bấm ctrl\n    //   selection.on('selection-box:pointerdown', function (cellView, evt) {\n    //     if (evt.ctrlKey || evt.metaKey) {\n    //         selection.collection.remove(cellView.model);\n    //     }\n    // });\n    // //xóa bằng nút delete\n    // document.addEventListener('keyup', function (evt) {\n    //     if (!selectedElement && !selection) return;\n    //     if (evt.code === 'Backspace' || evt.code === 'Delete') {\n    //         //xóa 1 el\n    //         if (selectedElement) {\n    //             selectedElement.remove();\n    //             selectedElement = null;\n    //             selectionNode=null;\n    //         }\n    //         //xóa toàn bộ  el đã chọn\n    //         if (selection) {\n    //             // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n    //             evt.preventDefault();\n    //             graph.removeCells(selection.collection.toArray())\n    //             selectionNode=null;\n    //         }\n    //     }\n    // }\n    // );\n    // //nếu bấm thì =true\n    // document.addEventListener('keydown', function (evt) {\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = true;\n    //     }\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = true;\n    //     }\n    // })\n    // //nếu thả nút thì =false\n    // document.addEventListener('keyup', function (evt) {\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = false;\n    //     }\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = false;\n    //     }\n    // })\n    // //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n    // document.addEventListener('keydown', function (evt) {\n    //     var clipboard = new joint.ui.Clipboard();\n    //     if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n    //         console.log(evt.code)\n    //         paperScroller.zoom(0.2, { max: 4 });\n    //     }\n    //     if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n    //         paperScroller.zoom(-0.2, { min: 0.2 });\n    //         console.log(evt.code)\n    //     }\n    //     //check+ A\n    //     if (evt.code === \"KeyA\" && ctrlDown === true) {\n    //         selection.collection.reset(graph.getElements())\n    //         evt.preventDefault();\n    //     }//check ctrl + Z\n    //     if (evt.code === \"KeyZ\" && ctrlDown === true) {\n    //         commandManager.undo();\n    //         unhighlightCell(selectionNode);\n    //         graph.getLinks().forEach((link) => unhighlightCell(link));\n    //         console.log(selectionNode)\n    //         selectionNode=null\n    //     }\n    //     //check ctrl + Y\n    //     if (evt.code === \"KeyY\" && ctrlDown === true) {\n    //         commandManager.redo();\n    //         selectElement(null)\n    //     }\n    //     //check ctrl + V ,ctrl + C, ctrl+X\n    //     if (evt.code === \"KeyX\" && ctrlDown === true) {\n    //         clipboard.cutElements(selection.collection, paper.model)\n    //     }\n    //     if (evt.code === \"KeyC\" && ctrlDown === true) {\n    //         clipboard.copyElements(selection.collection, graph);\n    //     }\n    //     if (evt.code === \"KeyV\" && ctrlDown === true) {\n    //         var pastedCells = clipboard.pasteCells(graph, {\n    //             translate: { dx: 40, dy: 40 },\n    //             useLocalStorage: true\n    //         });\n    //         var elements = _.filter(pastedCells, function (cell) {\n    //             return cell.isElement();\n    //         });\n    //         // Make sure pasted elements get selected immediately. This makes the UX better as\n    //         // the user can immediately manipulate the pasted elements.\n    //         selection.collection.reset(elements);\n    //     }\n    // })\n    // // nut zoomin zoom out can chuyen ve scroll\n    // $('#btn-zoomin').on('click', function() {\n    //     paperScroller.zoom(0.2, { max: 4 });\n    // });\n    // $('#btn-zoomout').on('click', function() {\n    //     paperScroller.zoom(-0.2, { min: 0.2 });\n    // });\n    // $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n    // $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller));\n    //render paper\n\n    document.getElementById('paper').appendChild(paperScroller.render().el); //render paperScroller\n\n    paperScroller.$el.css({\n      width: 900,\n      height: 600\n    }).appendTo('#paper');\n    paperScroller.center(); //render stencil ra màn hình\n\n    document.getElementById('stencil').appendChild(stencil.render().el);\n    stencil.load(stencilShapes);\n    selection.collection.reset(graph.getElements()); // //  var linkView = paper.findViewByModel(link);\n    //  let graph = new joint.dia.Graph;\n    // let paper = new joint.dia.Paper({\n    //     el: $('#paper'),\n    //     width: 600,\n    //     height: 200,\n    //     model: graph,\n    //     gridSize: 1\n    // });\n    // let rect = new joint.shapes.basic.Rect({\n    //     position: { x: 100, y: 30 },\n    //     size: { width: 100, height: 30 },\n    //     attrs: { rect: { fill: 'blue' }, text: { text: 'my box', fill: 'white' } }\n    // });\n    // let rect2 = rect.clone();\n    // rect2.translate(300);\n    // let link = new joint.dia.Link({\n    //     source: { id: rect.id },\n    //     target: { id: rect2.id }\n    // });\n    // graph.addCells([rect, rect2, link]);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["joint","require","window","$","mounted","selectionNode","selectedElement","selectedLink","ctrlDown","shiftDown","color","customEl","dia","Element","define","z","size","width","height","removable","attrs","image","x","y","root","magnet","body","fill","stroke","strokeWidth","rx","ry","ports","items","id","group","groups","out","markup","tagName","selector","position","name","portBody","r","in","customElNoInPorts","theme","line","connection","strokeLinejoin","targetMarker","targetArrowheadTool","linkTools","TargetArrowhead","toolsView","ToolsView","tools","CustomLinkView","LinkView","extend","pointerdblclick","evt","addVertex","contextmenu","addLabel","options","util","defaults","doubleLinkTools","prototype","graph","Graph","paper","Paper","el","model","async","sorting","APPROX","gridSize","drawGrid","restrictTranslate","stopDelegation","linkView","interactive","vertexAdd","snapLinks","radius","linkPinning","multiLinks","defaultRouter","args","padding","defaultConnector","validateConnection","cellViewS","magnetS","cellViewT","magnetT","end","getAttribute","get","linkMove","labelMove","arrowheadMove","vertexMove","vertexRemove","useLinkTools","defaultLink","shapes","standard","Link","wrapper","attributes","paperScroller","ui","PaperScroller","autoResizePaper","scrollWhileDragging","cursor","snaplines","Snaplines","startListening","stencil","Stencil","dropAnimation","duration","easing","jsUcfirst","string","charAt","toUpperCase","slice","stencilRenderHandler","positionX","positionY","arr","elNoInPorts","spaceBetweenElToX","spaceBetweenElToY","forEach","element","elementName","prop","stencilShapes","push","document","getElementById","appendChild","render","$el","css","appendTo","center","load","selection","collection","reset","getElements"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\App.vue"],"sourcesContent":["\n<template>\n<h1>Home</h1>\n  <div class=\"canvas\" ref=\"canvas\"></div>\n  \n  <div id=\"app\">\n    <div class=\"btn_contain\">\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\n        <button id=\"btn-center\" class=\"btn\">center</button>\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\n    </div>\n    <div id=\"stencil\"></div>\n    \n    <div id=\"paper\"></div>\n    <div id=\"navigator\"></div>\n    \n    \n        </div>\n</template>\n\n<script>\n\n\nconst joint = require('jointjs');\nwindow.$ = require('jquery');\n\n// import { Options, Vue } from 'vue-class-component';\nexport default {\n  mounted() {\n    // var highlighters=joint.highlighters;\n    \n    let selectionNode = null;\n    let selectedElement = null;\n    let selectedLink = null\n    //check ctrl shift\n    var ctrlDown = false;\n    var shiftDown = false;\n    const color = \"rgb(255 136 0)\";\n    var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n                rx: 5,\n                ry: 5,\n\n            }\n        },\n        ports: {\n            items: [{\n                id: 'out-port',\n                group: 'out',\n\n            },\n            {\n                id: 'in-port',\n                group: 'in'\n            }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n\n                        }\n                    }\n                },\n                in: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'left'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'passive',\n                            fill: '#FFFFFF',\n                            stroke: '#187BD3',\n\n                        }\n                    }\n                }\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            },\n            {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n            width: 44,\n            height: 35\n        },\n        removable: false,\n        attrs: {\n            image: {\n                x: 5,\n                y: 5,\n                width: 'calc(w-10)',\n                height: 'calc(h-10 )'\n            },\n            root: {\n                magnet: false\n            },\n            body: {\n                fill: '#FFFFFF',\n                stroke: '#A0A0A0',\n                width: 'calc(w)',\n                height: 'calc(h)',\n                strokeWidth: 2,\n            },\n            line: {\n                connection: true,\n                stroke: '#333333',\n                strokeWidth: 2,\n                strokeLinejoin: 'round',\n                targetMarker: {\n                    'type': 'path',\n                    'd': 'M 10 -5 0 0 10 5 z'\n                }\n            },\n        },\n        ports: {\n            items: [\n                {\n                    id: 'out-port',\n                    group: 'out'\n                }\n            ],\n            groups: {\n                out: {\n                    markup: [{\n                        tagName: 'circle',\n                        selector: 'portBody'\n                    }],\n                    position: {\n                        name: 'right'\n                    },\n                    attrs: {\n                        portBody: {\n                            r: 5,\n                            magnet: 'active',\n                            fill: '#187BD3',\n                            stroke: '#187BD3'\n                        }\n                    }\n                },\n\n            }\n        },\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            }, {\n                tagName: 'image',\n                selector: 'image'\n            }, {\n                tagName: 'ports',\n                selector: 'ports'\n            }]\n    })\n    var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n    var toolsView = new joint.dia.ToolsView({\n    tools: [\n        targetArrowheadTool,\n    ]\n    });\n    var CustomLinkView = joint.dia.LinkView.extend({\n        // custom interactions:\n        pointerdblclick: function(evt, x, y) {\n            this.addVertex(x, y);\n        },\n        contextmenu: function(evt, x, y) {\n            this.addLabel(x, y);\n        },\n    \n        // custom options:\n        options: joint.util.defaults({\n            doubleLinkTools: true,\n        }, joint.dia.LinkView.prototype.options)\n    });\n    var graph = new joint.dia.Graph;\n    // //ctrl+z\n    // var commandManager = new joint.dia.CommandManager({ graph: graph });\n    \n    // //cấu hình paper\n    var paper = new joint.dia.Paper({  \n        el:$('#paper'),\n        width: 800,\n        height: 600,\n        model: graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        linkView: CustomLinkView,\n        interactive: { vertexAdd: false } ,\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n            radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n        defaultConnector: { name: 'rounded' },\n        validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n            // Prevent linking from input ports.\n            if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n            // Prevent linking from output ports to input ports within one element.\n            if (cellViewS === cellViewT) return false;\n            // Prevent linking to input ports.\n            return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n            linkMove: true,\n            labelMove: true,\n            arrowheadMove: true,\n            vertexMove: false,\n            vertexAdd: false,\n            vertexRemove: false,\n            useLinkTools: false,\n        },\n        defaultLink: function () {\n            return new joint.shapes.standard.Link({\n                attrs: {\n                    line: {\n                        connection: true,\n                        stroke: '#707070',\n                        strokeLinejoin: 'round',\n                    },\n                    wrapper: {\n                        connection: true,\n                        strokeWidth: 10,\n                        strokeLinejoin: 'round'\n                    },\n                    \n                },\n                \n                markup: [{\n                    tagName: 'path',\n                    selector: 'wrapper',\n                    attributes: {\n                        'fill': 'none',\n                        \n                        'stroke': 'transparent'\n                    }\n                }, {\n                    tagName: 'path',\n                    selector: 'line',\n                    attributes: {\n                        'fill': 'none',\n                        \n                    }\n                }]\n            });\n        }\n    });\n    // //paperScroller\n    var paperScroller = new joint.ui.PaperScroller({\n        paper: paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: 'grab'\n        \n    });\n    // // cấu hình snaplines\n    var snaplines = new joint.ui.Snaplines({ paper: paper })\n    snaplines.startListening()\n    // // cấu hình Stencil \n    var stencil = new joint.ui.Stencil({\n        paper: paperScroller,\n        width: 900,\n        height: 60,\n        dropAnimation: { duration: 200, easing: 'swing' },\n        \n    });\n    // // cấu hình Selection\n    // var selection = new joint.ui.Selection({\n    //     theme: 'material',\n    //     paper: paper,\n    //     useModelGeometry: true,\n    //     allowTranslate: true,\n    // });\n    // //hàm viết hoa chữ đầu\n    function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    // //hàm render stencil\n    function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n        arr.forEach(element => {\n            //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n            let elementName = jsUcfirst(element)\n            if (elementName === jsUcfirst(elNoInPorts)) {\n                element = new customElNoInPorts();\n            }\n            else {\n                element = new customEl();\n            }\n            element.prop('attrs/image/xlinkHref', `./assets/${elementName}.svg`)\n            stencilShapes.push(element.position(positionX, positionY))\n            if(spaceBetweenElToX>0){\n                positionX += element.attributes.size.width+spaceBetweenElToX;\n            }\n            if(spaceBetweenElToY>0){\n                positionY += element.attributes.size.height+spaceBetweenElToY;\n            }\n        });\n    }\n    var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n    // //mảng chứa các vị trí của stencil Shape để sau đó render\n    var stencilShapes = []\n    stencilRenderHandler(20,20,arr,\"load\",16)\n    // paper.svg.prepend(\n    // V.createSVGStyle(`\n    //         .joint-element .selection {\n    //             stroke: ${color};\n    //         }\n    //         .joint-link .selection {\n    //             stroke: ${color}; \n    //             'fill': ${color},\n    //         }\n            \n    //     `)\n    // );\n    // //lấy tất cả link ở trc node\n    // function getElementPredecessorLinks(el) {\n    //     return graph\n    //       .getSubgraph([el, ...graph.getPredecessors(el)])\n    //       .filter((cell) => cell.isLink());\n    //   }\n    //   //đổi màu cell\n    //   function highlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.add(\n    //       cell.findView(paper),\n    //       cell.isElement() ? \"body\" : \"line\",\n    //       \"selection\",\n    //       { className: \"selection\" }\n    //     );\n    //     }else{return}\n    //   }\n    //   //chuyển màu cell lại như cũ\n    //   function unhighlightCell(cell) {\n    //     if(cell){\n    //     highlighters.addClass.remove(cell.findView(paper), \"selection\");\n    //     }\n    //     else{return}\n    //   }\n    //   //function xử lý hành dộng chọn el\n    //   function selectElement(el) {     \n    //     if (selectionNode === el) return;\n    //     if (selectionNode) {\n            \n    //       unhighlightCell(selectionNode);\n    //       graph.getLinks().forEach((link) => unhighlightCell(link));\n    //     }\n    //     if (el) {\n            \n    //       highlightCell(el);\n    //       getElementPredecessorLinks(el).forEach((link) => {\n    //           highlightCell(link)\n    //           link.toFront()\n    //         });\n    //       selectionNode = el;\n    //     } else {\n    //         selectionNode = null;\n    //     }\n    //   }\n    //   //halo cấu hình\n    //    paper.on('cell:pointerup',function (cellView) {\n    //     var halo = new joint.ui.Halo({\n    //         cellView: cellView,\n    //         type: 'toolbar',\n    //         boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n    //     });\n    //     halo.removeHandle('resize');\n    //     halo.removeHandle('rotate');\n    //     halo.removeHandle('direction');\n    //     halo.render();\n    //     //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n    //     selectedElement = cellView.model;\n    //     selectedElement.toFront()\n    //     // console.log(graph.getLinks())\n    // })\n   \n    //   //xử lý khi các sự kiện với paper\n    //   paper.on({\n    //       //xử lý khi các sự kiện \n    //     \"cell:mouseenter\":(cellView)=>{\n    //             cellView.model.toFront()\n    //     },\n    //     \"cell:mouseleave\":(cellView)=>{\n    //         cellView.model.toBack()\n    //         if(selectionNode){\n    //             getElementPredecessorLinks(selectionNode).forEach((link) => {\n                   \n    //                 link.toFront()\n    //               });\n    //         }\n    //     },\n    \n    //     \"element:pointerclick\":(cellView) =>{\n    //         //chỉ đổi màu khi ko bấm ctrl\n    //         if(ctrlDown ===false )\n    //             { \n    //                 selectElement(cellView.model)\n    //             }\n    //         },\n    //         \"link:pointerclick\":(cellView) =>\n    //             {selectElement(cellView.model)\n    //                 //chon vao link thi mo cho phep doi node\n    //                 cellView.addTools(toolsView);\n                \n    //             },\n                \n    //             //chuyển lại màu cũ khi bấm ra ngoài\n    //         \"blank:pointerclick\":() => {selectElement(null)\n    //             paper.removeTools();\n    //             },\n            \n    //         'element:pointerup': function (cellView, evt) {\n                \n    //             if (evt.ctrlKey || evt.metaKey) {\n    //                 selection.collection.add(cellView.model);\n    //                 //loop to all the element in selection and set it to front\n    //                 selection.collection.models.forEach(element => {\n    //                     element.toFront()\n    //                 })               \n    //             }\n    //         },\n    //         //chuyển màu khi bấm vào link và cho nó lên trc\n    //         'link:pointerup': function (cellView) {\n    //             selectedLink = cellView.model;\n    //             selectedLink.toFront()\n    //         },\n            \n    //         // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n    //         'blank:pointerdown':function(evt, x, y) {\n    //             if (shiftDown===true) {\n    //                 selectElement(null)\n    //                 paperScroller.setCursor('crosshair')\n    //                 selection.startSelecting(evt);\n    //                 console.log(selection)\n    //             } else {\n    //                 selection.collection.reset([]);\n    //                 paperScroller.startPanning(evt, x, y);\n    //                 paper.removeTools();\n    //                 paperScroller.setCursor('grab');\n    //             }\n        \n    //         },\n    //   })\n    //   //xóa el nếu chọn lại lần 2 khi bấm ctrl\n    //   selection.on('selection-box:pointerdown', function (cellView, evt) {\n    //     if (evt.ctrlKey || evt.metaKey) {\n    //         selection.collection.remove(cellView.model);\n    //     }\n    // });\n    // //xóa bằng nút delete\n    // document.addEventListener('keyup', function (evt) {\n        \n    //     if (!selectedElement && !selection) return;\n    //     if (evt.code === 'Backspace' || evt.code === 'Delete') {\n    //         //xóa 1 el\n    //         if (selectedElement) {\n    //             selectedElement.remove();\n    //             selectedElement = null;\n    //             selectionNode=null;\n    //         }\n    //         //xóa toàn bộ  el đã chọn\n    //         if (selection) {\n    //             // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n    //             evt.preventDefault();\n    //             graph.removeCells(selection.collection.toArray())\n    //             selectionNode=null;\n    //         }\n    //     }\n    // }\n    // );\n    // //nếu bấm thì =true\n    // document.addEventListener('keydown', function (evt) {\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = true;\n    //     }\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = true;\n    //     }\n    // })\n    // //nếu thả nút thì =false\n    // document.addEventListener('keyup', function (evt) {\n    //     if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n    //         shiftDown = false;\n\n    //     }\n    //     if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n    //         ctrlDown = false;\n    //     }\n    // })\n    // //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n    // document.addEventListener('keydown', function (evt) {\n    //     var clipboard = new joint.ui.Clipboard();\n        \n        \n    //     if (evt.code === \"NumpadAdd\" && shiftDown === true) {\n    //         console.log(evt.code)\n    //         paperScroller.zoom(0.2, { max: 4 });\n    //     }\n    //     if (evt.code === \"NumpadSubtract\" && shiftDown === true) {\n    //         paperScroller.zoom(-0.2, { min: 0.2 });\n    //         console.log(evt.code)\n    //     }\n    //     //check+ A\n    //     if (evt.code === \"KeyA\" && ctrlDown === true) {\n    //         selection.collection.reset(graph.getElements())\n    //         evt.preventDefault();\n    //     }//check ctrl + Z\n    //     if (evt.code === \"KeyZ\" && ctrlDown === true) {\n    //         commandManager.undo();\n            \n    //         unhighlightCell(selectionNode);\n    //         graph.getLinks().forEach((link) => unhighlightCell(link));\n    //         console.log(selectionNode)\n    //         selectionNode=null\n    //     }\n    //     //check ctrl + Y\n    //     if (evt.code === \"KeyY\" && ctrlDown === true) {\n    //         commandManager.redo();\n    //         selectElement(null)\n    //     }\n    //     //check ctrl + V ,ctrl + C, ctrl+X\n    //     if (evt.code === \"KeyX\" && ctrlDown === true) {\n\n    //         clipboard.cutElements(selection.collection, paper.model)\n    //     }\n    //     if (evt.code === \"KeyC\" && ctrlDown === true) {\n    //         clipboard.copyElements(selection.collection, graph);\n    //     }\n    //     if (evt.code === \"KeyV\" && ctrlDown === true) {\n    //         var pastedCells = clipboard.pasteCells(graph, {\n    //             translate: { dx: 40, dy: 40 },\n    //             useLocalStorage: true\n    //         });\n\n    //         var elements = _.filter(pastedCells, function (cell) {\n    //             return cell.isElement();\n    //         });\n    //         // Make sure pasted elements get selected immediately. This makes the UX better as\n    //         // the user can immediately manipulate the pasted elements.\n    //         selection.collection.reset(elements);\n\n    //     }\n    // })\n   \n    // // nut zoomin zoom out can chuyen ve scroll\n    // $('#btn-zoomin').on('click', function() {\n    //     paperScroller.zoom(0.2, { max: 4 });\n    // });\n    // $('#btn-zoomout').on('click', function() {\n    //     paperScroller.zoom(-0.2, { min: 0.2 });\n    // });\n    // $('#btn-center').on('click', _.bind(paperScroller.center, paperScroller));\n    // $('#btn-center-content').on('click', _.bind(paperScroller.centerContent, paperScroller));\n\n    //render paper\n    document.getElementById('paper').appendChild(paperScroller.render().el);\n    //render paperScroller\n    paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\n    paperScroller.center();\n     //render stencil ra màn hình\n     document.getElementById('stencil').appendChild(stencil.render().el);\n     stencil.load(stencilShapes);\n     selection.collection.reset(graph.getElements());\n    // //  var linkView = paper.findViewByModel(link);\n    //  let graph = new joint.dia.Graph;\n\n            // let paper = new joint.dia.Paper({\n            //     el: $('#paper'),\n            //     width: 600,\n            //     height: 200,\n            //     model: graph,\n            //     gridSize: 1\n            // });\n\n            // let rect = new joint.shapes.basic.Rect({\n            //     position: { x: 100, y: 30 },\n            //     size: { width: 100, height: 30 },\n            //     attrs: { rect: { fill: 'blue' }, text: { text: 'my box', fill: 'white' } }\n            // });\n\n            // let rect2 = rect.clone();\n            // rect2.translate(300);\n\n            // let link = new joint.dia.Link({\n            //     source: { id: rect.id },\n            //     target: { id: rect2.id }\n            // });\n\n            // graph.addCells([rect, rect2, link]);\n        }\n  }\n\n  \n\n</script>\n\n<style >\n@import \"@/../public/vendor/jointJS/build/package/rappid.css\";\n@import \"@/css/data_flow.css\";\n@import \"@/css/lib/rappid.min.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}