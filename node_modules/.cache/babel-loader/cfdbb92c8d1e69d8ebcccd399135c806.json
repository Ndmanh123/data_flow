{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { Line } from './line.mjs';\nimport { Polygon } from './polygon.mjs';\nimport { Rect } from './rect.mjs';\nimport { types } from './types.mjs';\nexport function exists(shape1, shape2, shape1opt, shape2opt) {\n  switch (shape1.type) {\n    case types.Line:\n      {\n        switch (shape2.type) {\n          case types.Line:\n            {\n              return lineWithLine(shape1, shape2);\n            }\n        }\n\n        break;\n      }\n\n    case types.Ellipse:\n      {\n        switch (shape2.type) {\n          case types.Line:\n            {\n              return ellipseWithLine(shape1, shape2);\n            }\n\n          case types.Ellipse:\n            {\n              return ellipseWithEllipse(shape1, shape2);\n            }\n        }\n\n        break;\n      }\n\n    case types.Rect:\n      {\n        switch (shape2.type) {\n          case types.Line:\n            {\n              return rectWithLine(shape1, shape2);\n            }\n\n          case types.Ellipse:\n            {\n              return rectWithEllipse(shape1, shape2);\n            }\n\n          case types.Rect:\n            {\n              return rectWithRect(shape1, shape2);\n            }\n        }\n\n        break;\n      }\n\n    case types.Polyline:\n      {\n        switch (shape2.type) {\n          case types.Line:\n            {\n              return polylineWithLine(shape1, shape2);\n            }\n\n          case types.Ellipse:\n            {\n              return polylineWithEllipse(shape1, shape2);\n            }\n\n          case types.Rect:\n            {\n              return polylineWithRect(shape1, shape2);\n            }\n\n          case types.Polyline:\n            {\n              return polylineWithPolyline(shape1, shape2);\n            }\n        }\n\n        break;\n      }\n\n    case types.Polygon:\n      {\n        switch (shape2.type) {\n          case types.Line:\n            {\n              return polygonWithLine(shape1, shape2);\n            }\n\n          case types.Ellipse:\n            {\n              return polygonWithEllipse(shape1, shape2);\n            }\n\n          case types.Rect:\n            {\n              return polygonWithRect(shape1, shape2);\n            }\n\n          case types.Polyline:\n            {\n              return polygonWithPolyline(shape1, shape2);\n            }\n\n          case types.Polygon:\n            {\n              return polygonWithPolygon(shape1, shape2);\n            }\n        }\n\n        break;\n      }\n\n    case types.Path:\n      {\n        switch (shape2.type) {\n          case types.Line:\n            {\n              return pathWithLine(shape1, shape2, shape1opt);\n            }\n\n          case types.Ellipse:\n            {\n              return pathWithEllipse(shape1, shape2, shape1opt);\n            }\n\n          case types.Rect:\n            {\n              return pathWithRect(shape1, shape2, shape1opt);\n            }\n\n          case types.Polyline:\n            {\n              return pathWithPolyline(shape1, shape2, shape1opt);\n            }\n\n          case types.Polygon:\n            {\n              return pathWithPolygon(shape1, shape2, shape1opt);\n            }\n\n          case types.Path:\n            {\n              return pathWithPath(shape1, shape2, shape1opt, shape2opt);\n            }\n        }\n\n        break;\n      }\n  } // None of the cases above\n\n\n  switch (shape2.type) {\n    case types.Ellipse:\n    case types.Rect:\n    case types.Polyline:\n    case types.Polygon:\n    case types.Path:\n      {\n        return exists(shape2, shape1, shape2opt, shape1opt);\n      }\n\n    default:\n      {\n        throw Error(`The intersection for ${shape1} and ${shape2} could not be found.`);\n      }\n  }\n}\n/* Line */\n\nexport function lineWithLine(line1, line2) {\n  const x1 = line1.start.x;\n  const y1 = line1.start.y;\n  const x2 = line1.end.x;\n  const y2 = line1.end.y;\n  const x3 = line2.start.x;\n  const y3 = line2.start.y;\n  const x4 = line2.end.x;\n  const y4 = line2.end.y;\n  const s1x = x2 - x1;\n  const s1y = y2 - y1;\n  const s2x = x4 - x3;\n  const s2y = y4 - y3;\n  const s3x = x1 - x3;\n  const s3y = y1 - y3;\n  const p = s1x * s2y - s2x * s1y;\n  const s = (s1x * s3y - s1y * s3x) / p;\n  const t = (s2x * s3y - s2y * s3x) / p;\n  return s >= 0 && s <= 1 && t >= 0 && t <= 1;\n}\n/* Ellipse */\n\nexport function ellipseWithLine(ellipse, line) {\n  const rex = ellipse.a;\n  const rey = ellipse.b;\n  const xe = ellipse.x;\n  const ye = ellipse.y;\n  const x1 = line.start.x - xe;\n  const x2 = line.end.x - xe;\n  const y1 = line.start.y - ye;\n  const y2 = line.end.y - ye;\n  const rex_2 = rex * rex;\n  const rey_2 = rey * rey;\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const A = dx * dx / rex_2 + dy * dy / rey_2;\n  const B = 2 * x1 * dx / rex_2 + 2 * y1 * dy / rey_2;\n  const C = x1 * x1 / rex_2 + y1 * y1 / rey_2 - 1;\n  const D = B * B - 4 * A * C;\n\n  if (D === 0) {\n    const t = -B / 2 / A;\n    return t >= 0 && t <= 1;\n  } else if (D > 0) {\n    const sqrt = Math.sqrt(D);\n    const t1 = (-B + sqrt) / 2 / A;\n    const t2 = (-B - sqrt) / 2 / A;\n    return t1 >= 0 && t1 <= 1 || t2 >= 0 && t2 <= 1;\n  }\n\n  return false;\n}\nexport function ellipseWithEllipse(ellipse1, ellipse2) {\n  return _ellipsesIntersection(ellipse1, 0, ellipse2, 0);\n}\n/* Rect */\n\nexport function rectWithLine(rect, line) {\n  const {\n    start,\n    end\n  } = line;\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n\n  if (start.x > x + width && end.x > x + width || start.x < x && end.x < x || start.y > y + height && end.y > y + height || start.y < y && end.y < y) {\n    return false;\n  }\n\n  if (rect.containsPoint(line.start) || rect.containsPoint(line.end)) {\n    return true;\n  }\n\n  return lineWithLine(rect.topLine(), line) || lineWithLine(rect.rightLine(), line) || lineWithLine(rect.bottomLine(), line) || lineWithLine(rect.leftLine(), line);\n}\nexport function rectWithEllipse(rect, ellipse) {\n  if (!rectWithRect(rect, Rect.fromEllipse(ellipse))) return false;\n  return polygonWithEllipse(Polygon.fromRect(rect), ellipse);\n}\nexport function rectWithRect(rect1, rect2) {\n  return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;\n}\n/* Polyline */\n\nexport function polylineWithLine(polyline, line) {\n  return _polylineWithLine(polyline, line, {\n    interior: false\n  });\n}\nexport function polylineWithEllipse(polyline, ellipse) {\n  return _polylineWithEllipse(polyline, ellipse, {\n    interior: false\n  });\n}\nexport function polylineWithRect(polyline, rect) {\n  return _polylineWithRect(polyline, rect, {\n    interior: false\n  });\n}\nexport function polylineWithPolyline(polyline1, polyline2) {\n  return _polylineWithPolyline(polyline1, polyline2, {\n    interior: false\n  });\n}\n/* Polygon */\n\nexport function polygonWithLine(polygon, line) {\n  return _polylineWithLine(polygon, line, {\n    interior: true\n  });\n}\nexport function polygonWithEllipse(polygon, ellipse) {\n  return _polylineWithEllipse(polygon, ellipse, {\n    interior: true\n  });\n}\nexport function polygonWithRect(polygon, rect) {\n  return _polylineWithRect(polygon, rect, {\n    interior: true\n  });\n}\nexport function polygonWithPolyline(polygon, polyline) {\n  return _polylineWithPolyline(polygon, polyline, {\n    interior: true\n  });\n}\nexport function polygonWithPolygon(polygon1, polygon2) {\n  return _polylineWithPolygon(polygon1, polygon2, {\n    interior: true\n  });\n}\n/* Path */\n\nexport function pathWithLine(path, line, pathOpt) {\n  return path.getSubpaths().some(subpath => {\n    const [polyline] = subpath.toPolylines(pathOpt);\n    const {\n      type\n    } = subpath.getSegment(-1);\n\n    if (type === 'Z') {\n      return polygonWithLine(polyline, line);\n    } else {\n      return polylineWithLine(polyline, line);\n    }\n  });\n}\nexport function pathWithEllipse(path, ellipse, pathOpt) {\n  return path.getSubpaths().some(subpath => {\n    const [polyline] = subpath.toPolylines(pathOpt);\n    const {\n      type\n    } = subpath.getSegment(-1);\n\n    if (type === 'Z') {\n      return polygonWithEllipse(polyline, ellipse);\n    } else {\n      return polylineWithEllipse(polyline, ellipse);\n    }\n  });\n}\nexport function pathWithRect(path, rect, pathOpt) {\n  return pathWithPolygon(path, Polygon.fromRect(rect), pathOpt);\n}\nexport function pathWithPolyline(path, polyline, pathOpt) {\n  return _pathWithPolyline(path, polyline, pathOpt, {\n    interior: false\n  });\n}\nexport function pathWithPolygon(path, polygon, pathOpt) {\n  return _pathWithPolyline(path, polygon, pathOpt, {\n    interior: true\n  });\n}\nexport function pathWithPath(path1, path2, pathOpt1, pathOpt2) {\n  return path1.getSubpaths().some(subpath => {\n    const [polyline1] = subpath.toPolylines(pathOpt1);\n    const {\n      type\n    } = subpath.getSegment(-1);\n\n    if (type === 'Z') {\n      return pathWithPolygon(path2, polyline1, pathOpt2);\n    } else {\n      return pathWithPolyline(path2, polyline1, pathOpt2);\n    }\n  });\n}\n\nfunction _polylineWithLine(polyline, line, opt = {}) {\n  const {\n    interior = false\n  } = opt;\n  let thisPoints;\n\n  if (interior) {\n    if (polyline.containsPoint(line.start)) {\n      // If any point of the polyline lies inside this polygon (interior = true)\n      // there is an intersection (we've chosen the start point)\n      return true;\n    }\n\n    const {\n      start,\n      end,\n      points\n    } = polyline;\n    thisPoints = end.equals(start) ? points : [...points, start];\n  } else {\n    thisPoints = polyline.points;\n  }\n\n  const {\n    length\n  } = thisPoints;\n  const segment = new Line();\n\n  for (let i = 0; i < length - 1; i++) {\n    segment.start = thisPoints[i];\n    segment.end = thisPoints[i + 1];\n\n    if (lineWithLine(line, segment)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _polylineWithEllipse(polyline, ellipse, opt = {}) {\n  const {\n    start,\n    end,\n    points\n  } = polyline;\n\n  if (ellipse.containsPoint(start)) {\n    return true;\n  }\n\n  let thisPoints;\n  const {\n    interior = false\n  } = opt;\n\n  if (interior) {\n    if (polyline.containsPoint(ellipse.center())) {\n      // If any point of the ellipse lies inside this polygon (interior = true)\n      // there is an intersection (we've chosen the center point)\n      return true;\n    }\n\n    thisPoints = end.equals(start) ? points : [...points, start];\n  } else {\n    thisPoints = points;\n  }\n\n  const {\n    length\n  } = thisPoints;\n  const segment = new Line();\n\n  for (let i = 0; i < length - 1; i++) {\n    segment.start = thisPoints[i];\n    segment.end = thisPoints[i + 1];\n\n    if (ellipseWithLine(ellipse, segment)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _polylineWithRect(polyline, rect, opt) {\n  const polygon = Polygon.fromRect(rect);\n  return _polylineWithPolygon(polyline, polygon, opt);\n}\n\nfunction _pathWithPolyline(path, polyline1, pathOpt, opt) {\n  return path.getSubpaths().some(subpath => {\n    const [polyline2] = subpath.toPolylines(pathOpt);\n    const {\n      type\n    } = subpath.getSegment(-1);\n\n    if (type === 'Z') {\n      return _polylineWithPolygon(polyline1, polyline2, opt);\n    } else {\n      return _polylineWithPolyline(polyline1, polyline2, opt);\n    }\n  });\n}\n\nfunction _polylineWithPolyline(polyline1, polyline2, opt = {}) {\n  const {\n    interior = false\n  } = opt;\n  let thisPolyline;\n\n  if (interior) {\n    const {\n      start\n    } = polyline2;\n\n    if (polyline1.containsPoint(start)) {\n      // If any point of the polyline lies inside this polygon (interior = true)\n      // there is an intersection (we've chosen the start point)\n      return true;\n    }\n\n    thisPolyline = polyline1.clone().close();\n  } else {\n    thisPolyline = polyline1;\n  }\n\n  const otherPoints = polyline2.points;\n  const {\n    length\n  } = otherPoints;\n  const segment = new Line();\n\n  for (let i = 0; i < length - 1; i++) {\n    segment.start = otherPoints[i];\n    segment.end = otherPoints[i + 1];\n\n    if (polylineWithLine(thisPolyline, segment)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _polylineWithPolygon(polyline, polygon, opt) {\n  return polygon.containsPoint(polyline.start) || _polylineWithPolyline(polyline, polygon.clone().close(), opt);\n}\n\nfunction _ellipsesIntersection(e1, w1, e2, w2) {\n  const {\n    cos,\n    sin\n  } = Math;\n  const sinW1 = sin(w1);\n  const cosW1 = cos(w1);\n  const sinW2 = sin(w2);\n  const cosW2 = cos(w2);\n  const sinW1s = sinW1 * sinW1;\n  const cosW1s = cosW1 * cosW1;\n  const sinCos1 = sinW1 * cosW1;\n  const sinW2s = sinW2 * sinW2;\n  const cosW2s = cosW2 * cosW2;\n  const sinCos2 = sinW2 * cosW2;\n  const a1s = e1.a * e1.a;\n  const b1s = e1.b * e1.b;\n  const a2s = e2.a * e2.a;\n  const b2s = e2.b * e2.b;\n  const A1 = a1s * sinW1s + b1s * cosW1s;\n  const A2 = a2s * sinW2s + b2s * cosW2s;\n  const B1 = a1s * cosW1s + b1s * sinW1s;\n  const B2 = a2s * cosW2s + b2s * sinW2s;\n  let C1 = 2 * (b1s - a1s) * sinCos1;\n  let C2 = 2 * (b2s - a2s) * sinCos2;\n  let D1 = -2 * A1 * e1.x - C1 * e1.y;\n  let D2 = -2 * A2 * e2.x - C2 * e2.y;\n  let E1 = -C1 * e1.x - 2 * B1 * e1.y;\n  let E2 = -C2 * e2.x - 2 * B2 * e2.y;\n  const F1 = A1 * e1.x * e1.x + B1 * e1.y * e1.y + C1 * e1.x * e1.y - a1s * b1s;\n  const F2 = A2 * e2.x * e2.x + B2 * e2.y * e2.y + C2 * e2.x * e2.y - a2s * b2s;\n  C1 = C1 / 2;\n  C2 = C2 / 2;\n  D1 = D1 / 2;\n  D2 = D2 / 2;\n  E1 = E1 / 2;\n  E2 = E2 / 2;\n  const l3 = det3([[A1, C1, D1], [C1, B1, E1], [D1, E1, F1]]);\n  const l0 = det3([[A2, C2, D2], [C2, B2, E2], [D2, E2, F2]]);\n  const l2 = 0.33333333 * (det3([[A2, C1, D1], [C2, B1, E1], [D2, E1, F1]]) + det3([[A1, C2, D1], [C1, B2, E1], [D1, E2, F1]]) + det3([[A1, C1, D2], [C1, B1, E2], [D1, E1, F2]]));\n  const l1 = 0.33333333 * (det3([[A1, C2, D2], [C1, B2, E2], [D1, E2, F2]]) + det3([[A2, C1, D2], [C2, B1, E2], [D2, E1, F2]]) + det3([[A2, C2, D1], [C2, B2, E1], [D2, E2, F1]]));\n  const delta1 = det2([[l3, l2], [l2, l1]]);\n  const delta2 = det2([[l3, l1], [l2, l0]]);\n  const delta3 = det2([[l2, l1], [l1, l0]]);\n  const dP = det2([[2 * delta1, delta2], [delta2, 2 * delta3]]);\n\n  if (dP > 0 && (l1 > 0 || l2 > 0)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction det2(m) {\n  return m[0][0] * m[1][1] - m[0][1] * m[1][0];\n}\n\nfunction det3(m) {\n  return m[0][0] * m[1][1] * m[2][2] - m[0][0] * m[1][2] * m[2][1] - m[0][1] * m[1][0] * m[2][2] + m[0][1] * m[1][2] * m[2][0] + m[0][2] * m[1][0] * m[2][1] - m[0][2] * m[1][1] * m[2][0];\n}","map":{"version":3,"names":["Line","Polygon","Rect","types","exists","shape1","shape2","shape1opt","shape2opt","type","lineWithLine","Ellipse","ellipseWithLine","ellipseWithEllipse","rectWithLine","rectWithEllipse","rectWithRect","Polyline","polylineWithLine","polylineWithEllipse","polylineWithRect","polylineWithPolyline","polygonWithLine","polygonWithEllipse","polygonWithRect","polygonWithPolyline","polygonWithPolygon","Path","pathWithLine","pathWithEllipse","pathWithRect","pathWithPolyline","pathWithPolygon","pathWithPath","Error","line1","line2","x1","start","x","y1","y","x2","end","y2","x3","y3","x4","y4","s1x","s1y","s2x","s2y","s3x","s3y","p","s","t","ellipse","line","rex","a","rey","b","xe","ye","rex_2","rey_2","dx","dy","A","B","C","D","sqrt","Math","t1","t2","ellipse1","ellipse2","_ellipsesIntersection","rect","width","height","containsPoint","topLine","rightLine","bottomLine","leftLine","fromEllipse","fromRect","rect1","rect2","polyline","_polylineWithLine","interior","_polylineWithEllipse","_polylineWithRect","polyline1","polyline2","_polylineWithPolyline","polygon","polygon1","polygon2","_polylineWithPolygon","path","pathOpt","getSubpaths","some","subpath","toPolylines","getSegment","_pathWithPolyline","path1","path2","pathOpt1","pathOpt2","opt","thisPoints","points","equals","length","segment","i","center","thisPolyline","clone","close","otherPoints","e1","w1","e2","w2","cos","sin","sinW1","cosW1","sinW2","cosW2","sinW1s","cosW1s","sinCos1","sinW2s","cosW2s","sinCos2","a1s","b1s","a2s","b2s","A1","A2","B1","B2","C1","C2","D1","D2","E1","E2","F1","F2","l3","det3","l0","l2","l1","delta1","det2","delta2","delta3","dP","m"],"sources":["C:/Users/Admin/dataflow-test/node_modules/jointjs/src/g/intersection.mjs"],"sourcesContent":["import { Line } from './line.mjs';\nimport { Polygon } from './polygon.mjs';\nimport { Rect } from './rect.mjs';\nimport { types } from './types.mjs';\n\nexport function exists(shape1, shape2, shape1opt, shape2opt) {\n    switch (shape1.type) {\n        case types.Line: {\n            switch (shape2.type) {\n                case types.Line: {\n                    return lineWithLine(shape1, shape2);\n                }\n            }\n            break;\n        }\n        case types.Ellipse: {\n            switch (shape2.type) {\n                case types.Line: {\n                    return ellipseWithLine(shape1, shape2);\n                }\n                case types.Ellipse: {\n                    return ellipseWithEllipse(shape1, shape2);\n                }\n            }\n            break;\n        }\n        case types.Rect: {\n            switch (shape2.type) {\n                case types.Line: {\n                    return rectWithLine(shape1, shape2);\n                }\n                case types.Ellipse: {\n                    return rectWithEllipse(shape1, shape2);\n                }\n                case types.Rect: {\n                    return rectWithRect(shape1, shape2);\n                }\n            }\n            break;\n        }\n        case types.Polyline: {\n            switch (shape2.type) {\n                case types.Line: {\n                    return polylineWithLine(shape1, shape2);\n                }\n                case types.Ellipse: {\n                    return polylineWithEllipse(shape1, shape2);\n                }\n                case types.Rect: {\n                    return polylineWithRect(shape1, shape2);\n                }\n                case types.Polyline: {\n                    return polylineWithPolyline(shape1, shape2);\n                }\n            }\n            break;\n        }\n        case types.Polygon: {\n            switch (shape2.type) {\n                case types.Line: {\n                    return polygonWithLine(shape1, shape2);\n                }\n                case types.Ellipse: {\n                    return polygonWithEllipse(shape1, shape2);\n                }\n                case types.Rect: {\n                    return polygonWithRect(shape1, shape2);\n                }\n                case types.Polyline: {\n                    return polygonWithPolyline(shape1, shape2);\n                }\n                case types.Polygon: {\n                    return polygonWithPolygon(shape1, shape2);\n                }\n            }\n            break;\n        }\n        case types.Path: {\n            switch (shape2.type) {\n                case types.Line: {\n                    return pathWithLine(shape1, shape2, shape1opt);\n                }\n                case types.Ellipse: {\n                    return pathWithEllipse(shape1, shape2, shape1opt);\n                }\n                case types.Rect: {\n                    return pathWithRect(shape1, shape2, shape1opt);\n                }\n                case types.Polyline: {\n                    return pathWithPolyline(shape1, shape2, shape1opt);\n                }\n                case types.Polygon: {\n                    return pathWithPolygon(shape1, shape2, shape1opt);\n                }\n                case types.Path: {\n                    return pathWithPath(shape1, shape2, shape1opt, shape2opt);\n                }\n            }\n            break;\n        }\n    }\n    // None of the cases above\n    switch (shape2.type) {\n        case types.Ellipse:\n        case types.Rect:\n        case types.Polyline:\n        case types.Polygon:\n        case types.Path: {\n            return exists(shape2, shape1, shape2opt, shape1opt);\n        }\n        default: {\n            throw Error(`The intersection for ${shape1} and ${shape2} could not be found.`);\n        }\n    }\n}\n\n/* Line */\n\nexport function lineWithLine(line1, line2) {\n    const x1 = line1.start.x;\n    const y1 = line1.start.y;\n    const x2 = line1.end.x;\n    const y2 = line1.end.y;\n    const x3 = line2.start.x;\n    const y3 = line2.start.y;\n    const x4 = line2.end.x;\n    const y4 = line2.end.y;\n    const s1x = x2 - x1;\n    const s1y = y2 - y1;\n    const s2x = x4 - x3;\n    const s2y = y4 - y3;\n    const s3x = x1 - x3;\n    const s3y = y1 - y3;\n    const p = s1x * s2y - s2x * s1y;\n    const s = (s1x * s3y - s1y * s3x) / p;\n    const t = (s2x * s3y - s2y * s3x) / p;\n    return s >= 0 && s <= 1 && t >= 0 && t <= 1;\n}\n\n/* Ellipse */\n\nexport function ellipseWithLine(ellipse, line) {\n    const rex = ellipse.a;\n    const rey = ellipse.b;\n    const xe = ellipse.x;\n    const ye = ellipse.y;\n    const x1 = line.start.x - xe;\n    const x2 = line.end.x - xe;\n    const y1 = line.start.y - ye;\n    const y2 = line.end.y - ye;\n    const rex_2 = rex * rex;\n    const rey_2 = rey * rey;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const A = dx * dx / rex_2 + dy * dy / rey_2;\n    const B = 2 * x1 * dx / rex_2 + 2 * y1 * dy / rey_2;\n    const C = x1 * x1 / rex_2 + y1 * y1 / rey_2 - 1;\n    const D = B * B - 4 * A * C;\n    if (D === 0) {\n        const t = -B / 2 / A;\n        return t >= 0 && t <= 1;\n    } else if (D > 0) {\n        const sqrt = Math.sqrt(D);\n        const t1 = (-B + sqrt) / 2 / A;\n        const t2 = (-B - sqrt) / 2 / A;\n        return (t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1);\n    }\n    return false;\n}\n\nexport function ellipseWithEllipse(ellipse1, ellipse2) {\n    return _ellipsesIntersection(ellipse1, 0, ellipse2, 0);\n}\n\n/* Rect */\n\nexport function rectWithLine(rect, line) {\n    const { start, end } = line;\n    const { x, y, width, height } = rect;\n    if (\n        (start.x > x + width && end.x > x + width)\n        || (start.x < x && end.x < x)\n        || (start.y > y + height && end.y > y + height)\n        || (start.y < y && end.y < y)\n    ) {\n        return false;\n    }\n    if (rect.containsPoint(line.start) || rect.containsPoint(line.end)) {\n        return true;\n    }\n    return lineWithLine(rect.topLine(), line)\n        || lineWithLine(rect.rightLine(), line)\n        || lineWithLine(rect.bottomLine(), line)\n        || lineWithLine(rect.leftLine(), line);\n}\n\nexport function rectWithEllipse(rect, ellipse) {\n    if (!rectWithRect(rect, Rect.fromEllipse(ellipse))) return false;\n    return polygonWithEllipse(Polygon.fromRect(rect), ellipse);\n}\n\nexport function rectWithRect(rect1, rect2) {\n    return rect1.x < rect2.x + rect2.width\n        && rect1.x + rect1.width > rect2.x\n        && rect1.y < rect2.y + rect2.height\n        && rect1.y + rect1.height > rect2.y;\n}\n\n/* Polyline */\n\nexport function polylineWithLine(polyline, line) {\n    return _polylineWithLine(polyline, line, { interior: false });\n}\n\nexport function polylineWithEllipse(polyline, ellipse) {\n    return _polylineWithEllipse(polyline, ellipse, { interior: false });\n}\n\nexport function polylineWithRect(polyline, rect) {\n    return _polylineWithRect(polyline, rect, { interior: false });\n}\n\nexport function polylineWithPolyline(polyline1, polyline2) {\n    return _polylineWithPolyline(polyline1, polyline2, { interior: false });\n}\n\n/* Polygon */\n\nexport function polygonWithLine(polygon, line) {\n    return _polylineWithLine(polygon, line, { interior: true });\n}\n\nexport function polygonWithEllipse(polygon, ellipse) {\n    return _polylineWithEllipse(polygon, ellipse, { interior: true });\n}\n\nexport function polygonWithRect(polygon, rect) {\n    return _polylineWithRect(polygon, rect, { interior: true });\n}\n\nexport function polygonWithPolyline(polygon, polyline) {\n    return _polylineWithPolyline(polygon, polyline, { interior: true });\n}\n\nexport function polygonWithPolygon(polygon1, polygon2) {\n    return _polylineWithPolygon(polygon1, polygon2, { interior: true });\n}\n\n/* Path */\n\nexport function pathWithLine(path, line, pathOpt) {\n    return path.getSubpaths().some(subpath => {\n        const [polyline] = subpath.toPolylines(pathOpt);\n        const { type } = subpath.getSegment(-1);\n        if (type === 'Z') {\n            return polygonWithLine(polyline, line);\n        } else {\n            return polylineWithLine(polyline, line);\n        }\n    });\n}\n\nexport function pathWithEllipse(path, ellipse, pathOpt) {\n    return path.getSubpaths().some(subpath => {\n        const [polyline] = subpath.toPolylines(pathOpt);\n        const { type } = subpath.getSegment(-1);\n        if (type === 'Z') {\n            return polygonWithEllipse(polyline, ellipse);\n        } else {\n            return polylineWithEllipse(polyline, ellipse);\n        }\n    });\n}\n\nexport function pathWithRect(path, rect, pathOpt) {\n    return pathWithPolygon(path, Polygon.fromRect(rect), pathOpt);\n}\n\nexport function pathWithPolyline(path, polyline, pathOpt) {\n    return _pathWithPolyline(path, polyline, pathOpt, { interior: false });\n}\n\nexport function pathWithPolygon(path, polygon, pathOpt) {\n    return _pathWithPolyline(path, polygon, pathOpt, { interior: true });\n}\n\nexport function pathWithPath(path1, path2, pathOpt1, pathOpt2) {\n    return path1.getSubpaths().some(subpath => {\n        const [polyline1] = subpath.toPolylines(pathOpt1);\n        const { type } = subpath.getSegment(-1);\n        if (type === 'Z') {\n            return pathWithPolygon(path2, polyline1, pathOpt2);\n        } else {\n            return pathWithPolyline(path2, polyline1, pathOpt2);\n        }\n    });\n}\n\nfunction _polylineWithLine(polyline, line, opt = {}) {\n    const { interior = false } = opt;\n    let thisPoints;\n    if (interior) {\n        if (polyline.containsPoint(line.start)) {\n            // If any point of the polyline lies inside this polygon (interior = true)\n            // there is an intersection (we've chosen the start point)\n            return true;\n        }\n        const { start, end, points } = polyline;\n        thisPoints = end.equals(start) ? points : [...points, start];\n    } else {\n        thisPoints = polyline.points;\n    }\n    const { length } = thisPoints;\n    const segment = new Line();\n    for (let i = 0; i < length - 1; i++) {\n        segment.start = thisPoints[i];\n        segment.end = thisPoints[i + 1];\n        if (lineWithLine(line, segment)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction _polylineWithEllipse(polyline, ellipse, opt = {}) {\n    const { start, end, points } = polyline;\n    if (ellipse.containsPoint(start)) {\n        return true;\n    }\n    let thisPoints;\n    const { interior = false } = opt;\n    if (interior) {\n        if (polyline.containsPoint(ellipse.center())) {\n            // If any point of the ellipse lies inside this polygon (interior = true)\n            // there is an intersection (we've chosen the center point)\n            return true;\n        }\n        thisPoints = end.equals(start) ? points : [...points, start];\n    } else {\n        thisPoints = points;\n    }\n\n    const { length } = thisPoints;\n    const segment = new Line();\n    for (let i = 0; i < length - 1; i++) {\n        segment.start = thisPoints[i];\n        segment.end = thisPoints[i + 1];\n        if (ellipseWithLine(ellipse, segment)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction _polylineWithRect(polyline, rect, opt) {\n    const polygon = Polygon.fromRect(rect);\n    return _polylineWithPolygon(polyline, polygon, opt);\n}\n\nfunction _pathWithPolyline(path, polyline1, pathOpt, opt) {\n    return path.getSubpaths().some(subpath => {\n        const [polyline2] = subpath.toPolylines(pathOpt);\n        const { type } = subpath.getSegment(-1);\n        if (type === 'Z') {\n            return _polylineWithPolygon(polyline1, polyline2, opt);\n        } else {\n            return _polylineWithPolyline(polyline1, polyline2, opt);\n        }\n    });\n}\n\nfunction _polylineWithPolyline(polyline1, polyline2, opt = {}) {\n    const { interior = false } = opt;\n    let thisPolyline;\n    if (interior) {\n        const { start } = polyline2;\n        if (polyline1.containsPoint(start)) {\n            // If any point of the polyline lies inside this polygon (interior = true)\n            // there is an intersection (we've chosen the start point)\n            return true;\n        }\n        thisPolyline = polyline1.clone().close();\n    } else {\n        thisPolyline = polyline1;\n    }\n    const otherPoints = polyline2.points;\n    const { length } = otherPoints;\n    const segment = new Line();\n    for (let i = 0; i < length - 1; i++) {\n        segment.start = otherPoints[i];\n        segment.end = otherPoints[i + 1];\n        if (polylineWithLine(thisPolyline, segment)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction _polylineWithPolygon(polyline, polygon, opt) {\n    return polygon.containsPoint(polyline.start) || _polylineWithPolyline(polyline, polygon.clone().close(), opt);\n}\n\nfunction _ellipsesIntersection(e1, w1, e2, w2) {\n    const { cos, sin } = Math;\n    const sinW1 = sin(w1);\n    const cosW1 = cos(w1);\n    const sinW2 = sin(w2);\n    const cosW2 = cos(w2);\n    const sinW1s = sinW1 * sinW1;\n    const cosW1s = cosW1 * cosW1;\n    const sinCos1 = sinW1 * cosW1;\n    const sinW2s = sinW2 * sinW2;\n    const cosW2s = cosW2 * cosW2;\n    const sinCos2 = sinW2 * cosW2;\n    const a1s = e1.a * e1.a;\n    const b1s = e1.b * e1.b;\n    const a2s = e2.a * e2.a;\n    const b2s = e2.b * e2.b;\n    const A1 = a1s * sinW1s + b1s * cosW1s;\n    const A2 = a2s * sinW2s + b2s * cosW2s;\n    const B1 = a1s * cosW1s + b1s * sinW1s;\n    const B2 = a2s * cosW2s + b2s * sinW2s;\n    let C1 = 2 * (b1s - a1s) * sinCos1;\n    let C2 = 2 * (b2s - a2s) * sinCos2;\n    let D1 = (-2 * A1 * e1.x - C1 * e1.y);\n    let D2 = (-2 * A2 * e2.x - C2 * e2.y);\n    let E1 = (-C1 * e1.x - 2 * B1 * e1.y);\n    let E2 = (-C2 * e2.x - 2 * B2 * e2.y);\n    const F1 = A1 * e1.x * e1.x + B1 * e1.y * e1.y + C1 * e1.x * e1.y - a1s * b1s;\n    const F2 = A2 * e2.x * e2.x + B2 * e2.y * e2.y + C2 * e2.x * e2.y - a2s * b2s;\n\n    C1 = C1 / 2;\n    C2 = C2 / 2;\n    D1 = D1 / 2;\n    D2 = D2 / 2;\n    E1 = E1 / 2;\n    E2 = E2 / 2;\n\n    const l3 = det3([\n        [A1, C1, D1],\n        [C1, B1, E1],\n        [D1, E1, F1]\n    ]);\n    const l0 = det3([\n        [A2, C2, D2],\n        [C2, B2, E2],\n        [D2, E2, F2]\n    ]);\n    const l2 = 0.33333333 * (det3([\n        [A2, C1, D1],\n        [C2, B1, E1],\n        [D2, E1, F1]\n    ]) + det3([\n        [A1, C2, D1],\n        [C1, B2, E1],\n        [D1, E2, F1]\n    ]) + det3([\n        [A1, C1, D2],\n        [C1, B1, E2],\n        [D1, E1, F2]\n    ]));\n    const l1 = 0.33333333 * (det3([\n        [A1, C2, D2],\n        [C1, B2, E2],\n        [D1, E2, F2]\n    ]) + det3([\n        [A2, C1, D2],\n        [C2, B1, E2],\n        [D2, E1, F2]\n    ]) + det3([\n        [A2, C2, D1],\n        [C2, B2, E1],\n        [D2, E2, F1]\n    ]));\n\n    const delta1 = det2([\n        [l3, l2],\n        [l2, l1]\n    ]);\n    const delta2 = det2([\n        [l3, l1],\n        [l2, l0]\n    ]);\n    const delta3 = det2([\n        [l2, l1],\n        [l1, l0]\n    ]);\n\n    const dP = det2([\n        [2 * delta1, delta2],\n        [delta2, 2 * delta3]\n    ]);\n\n    if (dP > 0 && (l1 > 0 || l2 > 0)) {\n        return false;\n    }\n    return true;\n}\n\nfunction det2(m) {\n    return m[0][0] * m[1][1] - m[0][1] * m[1][0];\n}\n\nfunction det3(m) {\n    return m[0][0] * m[1][1] * m[2][2] -\n        m[0][0] * m[1][2] * m[2][1] -\n        m[0][1] * m[1][0] * m[2][2] +\n        m[0][1] * m[1][2] * m[2][0] +\n        m[0][2] * m[1][0] * m[2][1] -\n        m[0][2] * m[1][1] * m[2][0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}