{"ast":null,"code":"export default {\n  name: 'DataFlow',\n  props: {\n    instanceKey: {\n      defaul: ''\n    },\n    action: {\n      defaul: 'view'\n    },\n    width: {\n      type: [String, Number],\n      default: 800\n    },\n    height: {\n      type: [String, Number],\n      default: 250\n    },\n    gridSize: {\n      type: Number,\n      default: 1\n    },\n    drawGrid: {\n      type: [Object, Boolean],\n      default: false\n    },\n    background: {\n      type: [Object, Boolean],\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    highLightLinks: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    }\n  },\n\n  data() {\n    return {\n      stencilShapes: [],\n      selectionNode: null,\n      selectedElement: null,\n      selectedLink: null,\n      //check ctrl shift\n      ctrlDown: false,\n      shiftDown: false,\n      color: \"rgb(255 136 0)\",\n      arr: ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg']\n    };\n  },\n\n  created() {\n    this.graph = new joint.dia.Graph();\n  },\n\n  mounted() {\n    this.initPaper();\n  },\n\n  methods: {\n    handelKeyPress(evt) {\n      console.log(evt.key);\n    },\n\n    initPaper() {\n      let graph = this.graph;\n      var commandManager = new joint.dia.CommandManager({\n        graph: graph,\n        cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\n          return !options.ignoreCommandManager;\n        }\n      });\n      this.paper = new joint.dia.Paper({\n        width: 1000,\n        height: 800,\n        model: this.graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: 10,\n        drawGrid: true,\n        restrictTranslate: true,\n        stopDelegation: false,\n        interactive: {\n          vertexAdd: false\n        },\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n          radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: {\n          name: 'manhattan',\n          args: {\n            padding: 10\n          }\n        },\n        defaultConnector: {\n          name: 'rounded'\n        },\n        validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n          // Prevent linking from input ports.\n          if (magnetS && magnetS.getAttribute('port-group') === 'in') return false; // Prevent linking from output ports to input ports within one element.\n\n          if (cellViewS === cellViewT) return false; // Prevent linking to input ports.\n\n          return magnetT && magnetT.getAttribute('port-group') === 'in' || cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer';\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n          linkMove: true,\n          labelMove: true,\n          arrowheadMove: true,\n          vertexMove: false,\n          vertexAdd: false,\n          vertexRemove: false,\n          useLinkTools: false\n        },\n        defaultLink: function () {\n          return new joint.shapes.standard.Link({\n            attrs: {\n              z: 1,\n              line: {\n                connection: true,\n                stroke: '#707070',\n                strokeLinejoin: 'round'\n              },\n              wrapper: {\n                connection: true,\n                strokeWidth: 10,\n                strokeLinejoin: 'round'\n              }\n            },\n            markup: [{\n              tagName: 'path',\n              selector: 'wrapper',\n              attributes: {\n                'fill': 'none',\n                'stroke': 'transparent'\n              }\n            }, {\n              tagName: 'path',\n              selector: 'line',\n              attributes: {\n                'fill': 'none'\n              }\n            }]\n          });\n        }\n      });\n      this.paperScroller = new joint.ui.PaperScroller({\n        paper: this.paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: 'grab'\n      });\n      var snaplines = new joint.ui.Snaplines({\n        paper: this.paper\n      });\n      snaplines.startListening(); //render paper\n\n      document.getElementById('paper').appendChild(this.paperScroller.render().el); //render paperScroller\n\n      this.paper.on('blank:pointerdown', this.paperScroller.startPanning);\n      this.paperScroller.$el.css({\n        width: 900,\n        height: 600\n      }).appendTo('#paper');\n      this.paperScroller.center();\n      this.addStencil();\n      this.handlePaperEvents();\n    },\n\n    jsUcfirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n\n    stencilRenderHandler(positionX, positionY, arr, elNoInPorts = \"\", spaceBetweenElToX = 0, spaceBetweenElToY = 0) {\n      var customEl = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2,\n            rx: 5,\n            ry: 5\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }, {\n            id: 'in-port',\n            group: 'in'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            },\n            in: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'left'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'passive',\n                  fill: '#FFFFFF',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      });\n      var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n        z: 1,\n        theme: 'material',\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: 'calc(w-10)',\n            height: 'calc(h-10 )'\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: '#FFFFFF',\n            stroke: '#A0A0A0',\n            width: 'calc(w)',\n            height: 'calc(h)',\n            strokeWidth: 2\n          },\n          line: {\n            connection: true,\n            stroke: '#333333',\n            strokeWidth: 2,\n            strokeLinejoin: 'round',\n            targetMarker: {\n              'type': 'path',\n              'd': 'M 10 -5 0 0 10 5 z'\n            }\n          }\n        },\n        ports: {\n          items: [{\n            id: 'out-port',\n            group: 'out'\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n              }],\n              position: {\n                name: 'right'\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: 'active',\n                  fill: '#187BD3',\n                  stroke: '#187BD3'\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: 'rect',\n          selector: 'body'\n        }, {\n          tagName: 'image',\n          selector: 'image'\n        }, {\n          tagName: 'ports',\n          selector: 'ports'\n        }]\n      });\n      this.arr.forEach(element => {\n        //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n        let elementName = this.jsUcfirst(element);\n\n        if (elementName === this.jsUcfirst(elNoInPorts)) {\n          element = new customElNoInPorts();\n        } else {\n          element = new customEl();\n        }\n\n        element.prop('attrs/image/xlinkHref', require(`../assets/${elementName}.svg`));\n        this.stencilShapes.push(element.position(positionX, positionY));\n\n        if (spaceBetweenElToX > 0) {\n          positionX += element.attributes.size.width + spaceBetweenElToX;\n        }\n\n        if (spaceBetweenElToY > 0) {\n          positionY += element.attributes.size.height + spaceBetweenElToY;\n        }\n      });\n    },\n\n    addStencil() {\n      let graph = this.graph;\n      let paper = this.paper;\n      var stencil = new joint.ui.Stencil({\n        paper: this.paperScroller,\n        width: 900,\n        height: 60,\n        dropAnimation: {\n          duration: 200,\n          easing: 'swing'\n        }\n      });\n      this.stencilRenderHandler(20, 20, this.arr, \"load\", 16);\n      document.getElementById('stencil').appendChild(stencil.render().el);\n      stencil.load(this.stencilShapes);\n    },\n\n    getNodeAttr(id) {\n      let node = this.graph.getCell(id);\n\n      if (node) {\n        return node.attributes;\n      } else {\n        return {};\n      }\n    },\n\n    addHalo(cellView) {\n      var halo = new joint.ui.Halo({\n        cellView: cellView,\n        type: 'toolbar',\n        boxContent: false // bang phia duoi cell cho biet tọa độ height width và angle\n\n      });\n      halo.removeHandle('resize');\n      halo.removeHandle('rotate');\n      halo.removeHandle('direction');\n      halo.render();\n    },\n\n    handlePaperEvents() {\n      let self = this;\n      let paper = self.paper;\n      let graph = self.graph;\n      paper.on('cell:pointerup', function (cellView) {\n        self.addHalo(cellView);\n\n        if (cellView.model.attributes['type'] === 'standard.Link') {\n          self.$emit('select-link', {\n            id: cellView.model.id\n          });\n        } else {\n          self.$emit('select-cell', {\n            id: cellView.model.id\n          });\n        }\n\n        this.selectedElement = cellView.model;\n        this.selectedElement.toFront({\n          ignoreCommandManager: true\n        }); // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\n        // console.log(graph.getLinks())\n      });\n    },\n\n    getAllLinks() {\n      return this.graph.getLinks();\n    },\n\n    getAllNodes() {\n      return this.graph.getCells();\n    },\n\n    clearAll() {\n      return this.graph.clear();\n    },\n\n    getNodeAttr(id) {\n      let node = this.graph.getCell(id);\n\n      if (node) {\n        return node.attributes;\n      } else {\n        return {};\n      }\n    },\n\n    render(node = {}, link = {}) {}\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","instanceKey","defaul","action","width","type","String","Number","default","height","gridSize","drawGrid","Object","Boolean","background","readonly","highLightLinks","Array","data","stencilShapes","selectionNode","selectedElement","selectedLink","ctrlDown","shiftDown","color","arr","created","graph","joint","dia","Graph","mounted","initPaper","methods","handelKeyPress","evt","console","log","key","commandManager","CommandManager","cmdBeforeAdd","cmdName","cell","options","ignoreCommandManager","paper","Paper","model","async","sorting","APPROX","restrictTranslate","stopDelegation","interactive","vertexAdd","snapLinks","radius","linkPinning","multiLinks","defaultRouter","args","padding","defaultConnector","validateConnection","cellViewS","magnetS","cellViewT","magnetT","end","linkView","getAttribute","get","linkMove","labelMove","arrowheadMove","vertexMove","vertexRemove","useLinkTools","defaultLink","shapes","standard","Link","attrs","z","line","connection","stroke","strokeLinejoin","wrapper","strokeWidth","markup","tagName","selector","attributes","paperScroller","ui","PaperScroller","autoResizePaper","scrollWhileDragging","cursor","snaplines","Snaplines","startListening","document","getElementById","appendChild","render","el","on","startPanning","$el","css","appendTo","center","addStencil","handlePaperEvents","jsUcfirst","string","charAt","toUpperCase","slice","stencilRenderHandler","positionX","positionY","elNoInPorts","spaceBetweenElToX","spaceBetweenElToY","customEl","Element","define","size","removable","image","x","y","root","magnet","body","fill","rx","ry","ports","items","id","group","groups","out","position","portBody","r","in","customElNoInPorts","theme","targetMarker","forEach","element","elementName","prop","require","push","stencil","Stencil","dropAnimation","duration","easing","load","getNodeAttr","node","getCell","addHalo","cellView","halo","Halo","boxContent","removeHandle","self","$emit","toFront","getAllLinks","getLinks","getAllNodes","getCells","clearAll","clear","link"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\components\\dataflow.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\" @keyup=\"handelKeyPress\">\r\n    <div class=\"btn_contain\">\r\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\r\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\r\n        <button id=\"btn-center\" class=\"btn\">center</button>\r\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\r\n    </div>\r\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\r\n    \r\n    <div id=\"paper\"></div>\r\n    <div id=\"navigator\"></div>\r\n    \r\n    \r\n        </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name:'DataFlow',\r\n    props: {\r\n        instanceKey: {\r\n            defaul: ''\r\n        },\r\n        action: {\r\n            defaul: 'view'\r\n        },\r\n\t\twidth: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 800\r\n\t\t},\r\n\t\theight: {\r\n\t\t\ttype: [String, Number],\r\n\t\t\tdefault: 250\r\n\t\t},\r\n\t\tgridSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\tdrawGrid: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tbackground: {\r\n\t\t\ttype: [Object, Boolean],\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\treadonly: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n        highLightLinks:{\r\n            type: Array,\r\n            default(){\r\n                return []\r\n            }\r\n        }\r\n\t},\r\n    data(){\r\n        return{\r\n            stencilShapes : [],\r\n            selectionNode : null,\r\n            selectedElement : null,\r\n            selectedLink : null,\r\n            \r\n            //check ctrl shift\r\n            ctrlDown : false,\r\n            shiftDown : false,\r\n            color : \"rgb(255 136 0)\",\r\n            arr: ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'],\r\n        }\r\n    },\r\n    created() {\r\n        this.graph = new joint.dia.Graph;\r\n    },\r\n    mounted() {\r\n        this.initPaper()\r\n    },\r\n    methods: {\r\n        handelKeyPress(evt) {\r\n        console.log(evt.key);\r\n        },\r\n        initPaper(){\r\n            let graph = this.graph;\r\n            var commandManager = new joint.dia.CommandManager({\r\n                graph: graph,\r\n                cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\r\n                    return !options.ignoreCommandManager;\r\n                }\r\n            });\r\n            this.paper = new joint.dia.Paper({  \r\n                \r\n                width: 1000,\r\n                height: 800,\r\n                model: this.graph,\r\n                async: true,\r\n                sorting: joint.dia.Paper.sorting.APPROX,\r\n                gridSize: 10,\r\n                drawGrid: true,\r\n                restrictTranslate: true,\r\n                stopDelegation: false,\r\n                \r\n                interactive: { vertexAdd: false } ,\r\n                // background: { color: '#F3F7F6' },\r\n                // defaultConnectionPoint: { name: 'boundary' },\r\n                // defaultConnector: {\r\n                //     name: \"rounded\"\r\n                //   },\r\n                //   defaultRouter: {\r\n                //     name: \"manhattan\",\r\n                //     args: {\r\n                //       step: 10,\r\n                //       endDirections: [\"bottom\"],\r\n                //       startDirections: [\"top\"],\r\n                //       padding: { bottom: 20 }\r\n                //     }\r\n                //   },\r\n                snapLinks: {\r\n                    radius: 75\r\n                },\r\n                linkPinning: false,\r\n                multiLinks: false,\r\n                defaultRouter: { name: 'manhattan', args: { padding: 10 }},\r\n                defaultConnector: { name: 'rounded' },\r\n                validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\r\n                    // Prevent linking from input ports.\r\n                    if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\r\n                    // Prevent linking from output ports to input ports within one element.\r\n                    if (cellViewS === cellViewT) return false;\r\n                    // Prevent linking to input ports.\r\n                    return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\r\n                },\r\n                // validateConnection: function (view1, _magnet1, view2, _magnet2) {\r\n                //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\r\n                //     return view1 !== view2;\r\n                // },\r\n                interactive: {\r\n                    linkMove: true,\r\n                    labelMove: true,\r\n                    arrowheadMove: true,\r\n                    vertexMove: false,\r\n                    vertexAdd: false,\r\n                    vertexRemove: false,\r\n                    useLinkTools: false,\r\n                },\r\n                defaultLink: function () {\r\n                    return new joint.shapes.standard.Link({\r\n                        attrs: {\r\n                            z:1,\r\n                            line: {\r\n                                connection: true,\r\n                                stroke: '#707070',\r\n                                strokeLinejoin: 'round',\r\n                            },\r\n                            wrapper: {\r\n                                connection: true,\r\n                                strokeWidth: 10,\r\n                                strokeLinejoin: 'round'\r\n                            },\r\n                            \r\n                        },\r\n                        \r\n                        markup: [{\r\n                            tagName: 'path',\r\n                            selector: 'wrapper',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                                'stroke': 'transparent'\r\n                            }\r\n                        }, {\r\n                            tagName: 'path',\r\n                            selector: 'line',\r\n                            attributes: {\r\n                                'fill': 'none',\r\n                                \r\n                            }\r\n                        }]\r\n                    });\r\n                }\r\n            });\r\n            this.paperScroller = new joint.ui.PaperScroller({\r\n                paper: this.paper,\r\n                autoResizePaper: true,\r\n                scrollWhileDragging: true,\r\n                cursor: 'grab'\r\n                \r\n            });\r\n            var snaplines = new joint.ui.Snaplines({ paper: this.paper })\r\n            snaplines.startListening()\r\n            //render paper\r\n            document.getElementById('paper').appendChild(this.paperScroller.render().el);\r\n            //render paperScroller\r\n            this.paper.on('blank:pointerdown', this.paperScroller.startPanning);\r\n            this.paperScroller.$el.css({ width: 900, height: 600 }).appendTo('#paper');\r\n            this.paperScroller.center();\r\n            this.addStencil()\r\n            this.handlePaperEvents();\r\n        },\r\n        jsUcfirst(string){\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        },\r\n        stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\r\n            \r\n            var customEl = joint.dia.Element.define('standard.Rectangle', {\r\n                z: 1,\r\n                size: {\r\n                    width: 44,\r\n                    height: 35\r\n                },\r\n                removable: false,\r\n                attrs: {\r\n                    image: {\r\n                        x: 5,\r\n                        y: 5,\r\n                        width: 'calc(w-10)',\r\n                        height: 'calc(h-10 )'\r\n                    },\r\n                    root: {\r\n                        magnet: false\r\n                    },\r\n                    body: {\r\n                        fill: '#FFFFFF',\r\n                        stroke: '#A0A0A0',\r\n                        width: 'calc(w)',\r\n                        height: 'calc(h)',\r\n                        strokeWidth: 2,\r\n                        rx: 5,\r\n                        ry: 5,\r\n\r\n                    }\r\n                },\r\n                ports: {\r\n                    items: [{\r\n                        id: 'out-port',\r\n                        group: 'out',\r\n\r\n                    },\r\n                    {\r\n                        id: 'in-port',\r\n                        group: 'in'\r\n                    }\r\n                    ],\r\n                    groups: {\r\n                        out: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'right'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'active',\r\n                                    fill: '#187BD3',\r\n                                    stroke: '#187BD3'\r\n\r\n                                }\r\n                            }\r\n                        },\r\n                        in: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'left'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'passive',\r\n                                    fill: '#FFFFFF',\r\n                                    stroke: '#187BD3',\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                markup: [\r\n                    {\r\n                        tagName: 'rect',\r\n                        selector: 'body',\r\n                    },\r\n                    {\r\n                        tagName: 'image',\r\n                        selector: 'image'\r\n                    }, {\r\n                        tagName: 'ports',\r\n                        selector: 'ports'\r\n                    }]\r\n            })\r\n            var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\r\n                z: 1,\r\n                theme: 'material',\r\n                size: {\r\n                    width: 44,\r\n                    height: 35\r\n                },\r\n                removable: false,\r\n                attrs: {\r\n                    image: {\r\n                        x: 5,\r\n                        y: 5,\r\n                        width: 'calc(w-10)',\r\n                        height: 'calc(h-10 )'\r\n                    },\r\n                    root: {\r\n                        magnet: false\r\n                    },\r\n                    body: {\r\n                        fill: '#FFFFFF',\r\n                        stroke: '#A0A0A0',\r\n                        width: 'calc(w)',\r\n                        height: 'calc(h)',\r\n                        strokeWidth: 2,\r\n                    },\r\n                    line: {\r\n                        connection: true,\r\n                        stroke: '#333333',\r\n                        strokeWidth: 2,\r\n                        strokeLinejoin: 'round',\r\n                        targetMarker: {\r\n                            'type': 'path',\r\n                            'd': 'M 10 -5 0 0 10 5 z'\r\n                        }\r\n                    },\r\n                },\r\n                ports: {\r\n                    items: [\r\n                        {\r\n                            id: 'out-port',\r\n                            group: 'out'\r\n                        }\r\n                    ],\r\n                    groups: {\r\n                        out: {\r\n                            markup: [{\r\n                                tagName: 'circle',\r\n                                selector: 'portBody'\r\n                            }],\r\n                            position: {\r\n                                name: 'right'\r\n                            },\r\n                            attrs: {\r\n                                portBody: {\r\n                                    r: 5,\r\n                                    magnet: 'active',\r\n                                    fill: '#187BD3',\r\n                                    stroke: '#187BD3'\r\n                                }\r\n                            }\r\n                        },\r\n\r\n                    }\r\n                },\r\n                markup: [\r\n                    {\r\n                        tagName: 'rect',\r\n                        selector: 'body',\r\n                    }, {\r\n                        tagName: 'image',\r\n                        selector: 'image'\r\n                    }, {\r\n                        tagName: 'ports',\r\n                        selector: 'ports'\r\n                    }]\r\n            })\r\n            this.arr.forEach(element => {\r\n                //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\r\n                let elementName = this.jsUcfirst(element)\r\n                if (elementName === this.jsUcfirst(elNoInPorts)) {\r\n                    element = new customElNoInPorts();\r\n                }\r\n                else {\r\n                    element = new customEl();\r\n                }\r\n                element.prop('attrs/image/xlinkHref', require(`../assets/${elementName}.svg`))\r\n                this.stencilShapes.push(element.position(positionX, positionY))\r\n                if(spaceBetweenElToX>0){\r\n                    positionX += element.attributes.size.width+spaceBetweenElToX;\r\n                }\r\n                if(spaceBetweenElToY>0){\r\n                    positionY += element.attributes.size.height+spaceBetweenElToY;\r\n                }\r\n            });\r\n        },\r\n    \r\n        addStencil(){\r\n            let graph = this.graph;\r\n            let paper = this.paper;\r\n            var stencil = new joint.ui.Stencil({\r\n                paper: this.paperScroller,\r\n                width: 900,\r\n                height: 60,\r\n                dropAnimation: { duration: 200, easing: 'swing' },\r\n            });\r\n            \r\n            this.stencilRenderHandler(20,20,this.arr,\"load\",16)\r\n            document.getElementById('stencil').appendChild(stencil.render().el);\r\n            stencil.load(this.stencilShapes);\r\n        },\r\n        getNodeAttr(id){\r\n            let node = this.graph.getCell(id);\r\n            if(node){\r\n                return node.attributes;\r\n            }else{\r\n                return {}\r\n            }\r\n        },\r\n        addHalo(cellView){\r\n            var halo = new joint.ui.Halo({\r\n                cellView: cellView,\r\n                type: 'toolbar',\r\n                boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\r\n            });\r\n            halo.removeHandle('resize');\r\n            halo.removeHandle('rotate');\r\n            halo.removeHandle('direction');\r\n            halo.render();\r\n        },\r\n        handlePaperEvents(){\r\n            let self = this;\r\n            let paper = self.paper;\r\n            let graph = self.graph;\r\n            paper.on('cell:pointerup',function (cellView) {\r\n                self.addHalo(cellView)\r\n                if(cellView.model.attributes['type']==='standard.Link'){\r\n                    self.$emit('select-link', {id: cellView.model.id});\r\n                }else{\r\n                    self.$emit('select-cell', {id: cellView.model.id});\r\n                }\r\n                \r\n                this.selectedElement = cellView.model;\r\n                this.selectedElement.toFront({ ignoreCommandManager: true })\r\n                // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\r\n                // console.log(graph.getLinks())\r\n            })\r\n        },\r\n        getAllLinks(){\r\n             return this.graph.getLinks()\r\n        },\r\n        getAllNodes(){\r\n            return this.graph.getCells()\r\n        },\r\n        clearAll(){\r\n            return this.graph.clear()\r\n        },\r\n        getNodeAttr(id){\r\n            let node = this.graph.getCell(id);\r\n            if(node){\r\n                return node.attributes;\r\n            }else{\r\n                return {}\r\n            }\r\n        },\r\n        render(node={},link={}){\r\n            \r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}