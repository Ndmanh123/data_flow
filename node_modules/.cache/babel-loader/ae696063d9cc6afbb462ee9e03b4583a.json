{"ast":null,"code":"export default {\n  name: \"DataFlow\",\n  props: {\n    width: {\n      type: [String, Number],\n      default: 800\n    },\n    height: {\n      type: [String, Number],\n      default: 250\n    },\n    gridSize: {\n      type: Number,\n      default: 10\n    },\n    drawGrid: {\n      type: [Object, Boolean],\n      default: true\n    },\n    highLightLinks: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    },\n    nodes: {\n      type: [Object, Boolean],\n      default: [{\n        id: \"fd9c3b76-efea-436f-9bd5-ac2ba665d512\",\n        name: \"load\",\n        position: {\n          x: 250,\n          y: 250\n        },\n        type: \"Rectangle\"\n      }, {\n        id: \"4b20a9c1-bdbf-44fa-a64c-3ac11c377f84\",\n        name: \"filter\",\n        position: {\n          x: 550,\n          y: 250\n        },\n        type: \"Rectangle\"\n      }]\n    },\n    links: {\n      type: [Object, Boolean],\n      default: // false,\n      {\n        source: \"fd9c3b76-efea-436f-9bd5-ac2ba665d512\",\n        target: \"4b20a9c1-bdbf-44fa-a64c-3ac11c377f84\"\n      }\n    }\n  },\n\n  data() {\n    return {\n      stencilShapes: [],\n      selectionNode: null,\n      selectedElement: null,\n      selectedLink: null,\n      //check ctrl shift\n      ctrlDown: false,\n      shiftDown: false,\n      color: \"rgb(255 136 0)\",\n      arr: [\"filter\", \"formula\", \"join\", \"load\", \"pivot\", \"sample\", \"script\", \"select\", \"sort\", \"summarize\", \"transposeTable\", \"union\", \"weightAvg\"]\n    };\n  },\n\n  created() {\n    this.graph = new joint.dia.Graph();\n  },\n\n  mounted() {\n    this.initPaper(); // this.center()\n  },\n\n  methods: {\n    // center() {\n    //   _.bind(self.paperScroller.centerContent, self.paperScroller);\n    // },\n    initPaper() {\n      let graph = this.graph;\n      this.commandManager = new joint.dia.CommandManager({\n        graph: graph,\n        cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\n          return !options.ignoreCommandManager;\n        }\n      });\n      this.paper = new joint.dia.Paper({\n        width: this.width,\n        height: this.height,\n        model: this.graph,\n        async: true,\n        sorting: joint.dia.Paper.sorting.APPROX,\n        gridSize: this.gridSize,\n        drawGrid: this.drawGrid,\n        restrictTranslate: true,\n        stopDelegation: false,\n        interactive: {\n          vertexAdd: false\n        },\n        // background: { color: '#F3F7F6' },\n        // defaultConnectionPoint: { name: 'boundary' },\n        // defaultConnector: {\n        //     name: \"rounded\"\n        //   },\n        //   defaultRouter: {\n        //     name: \"manhattan\",\n        //     args: {\n        //       step: 10,\n        //       endDirections: [\"bottom\"],\n        //       startDirections: [\"top\"],\n        //       padding: { bottom: 20 }\n        //     }\n        //   },\n        snapLinks: {\n          radius: 75\n        },\n        linkPinning: false,\n        multiLinks: false,\n        defaultRouter: {\n          name: \"manhattan\",\n          args: {\n            padding: 10\n          }\n        },\n        defaultConnector: {\n          name: \"rounded\"\n        },\n        validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n          // Prevent linking from input ports.\n          if (magnetS && magnetS.getAttribute(\"port-group\") === \"in\") return false; // Prevent linking from output ports to input ports within one element.\n\n          if (cellViewS === cellViewT) return false; // Prevent linking to input ports.\n\n          return magnetT && magnetT.getAttribute(\"port-group\") === \"in\" || cellViewS.model.get(\"type\") === \"qad.Question\" && cellViewT.model.get(\"type\") === \"qad.Answer\";\n        },\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n        //     return view1 !== view2;\n        // },\n        interactive: {\n          linkMove: true,\n          labelMove: true,\n          arrowheadMove: true,\n          vertexMove: false,\n          vertexAdd: false,\n          vertexRemove: false,\n          useLinkTools: false\n        },\n        defaultLink: function () {\n          return new joint.shapes.standard.Link({\n            attrs: {\n              z: 1,\n              line: {\n                connection: true,\n                stroke: \"#707070\",\n                strokeLinejoin: \"round\"\n              },\n              wrapper: {\n                connection: true,\n                strokeWidth: 10,\n                strokeLinejoin: \"round\"\n              }\n            },\n            markup: [{\n              tagName: \"path\",\n              selector: \"wrapper\",\n              attributes: {\n                fill: \"none\",\n                stroke: \"transparent\"\n              }\n            }, {\n              tagName: \"path\",\n              selector: \"line\",\n              attributes: {\n                fill: \"none\"\n              }\n            }]\n          });\n        }\n      });\n      var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n      this.toolsView = new joint.dia.ToolsView({\n        tools: [// verticesTool, segmentsTool,\n        // sourceArrowheadTool,\n        targetArrowheadTool // sourceAnchorTool, targetAnchorTool,\n        // boundaryTool, removeButton\n        ]\n      }); // var elementView = element.findView(this.paper);\n      // elementView.addTools(this.toolsView);\n      // var linkView = this.link.findView(this.paper);\n      // linkView.addTools(this.toolsView);\n\n      this.paperScroller = new joint.ui.PaperScroller({\n        paper: this.paper,\n        autoResizePaper: true,\n        scrollWhileDragging: true,\n        cursor: \"grab\"\n      });\n      this.selection = new joint.ui.Selection({\n        theme: \"material\",\n        paper: this.paper,\n        useModelGeometry: true,\n        allowTranslate: true\n      });\n      this.toolbar = new joint.ui.Toolbar({\n        // initialize tools with default settings\n        tools: [\"zoomIn\", \"zoomOut\", \"zoomToFit\", \"zoomSlider\", \"undo\", \"redo\"],\n        references: {\n          paperScroller: this.paperScroller,\n          commandManager: this.commandManager\n        }\n      });\n      document.getElementById(\"Toolbar\").appendChild(this.toolbar.render().el);\n      this.snaplines = new joint.ui.Snaplines({\n        paper: this.paper\n      });\n      this.snaplines.startListening(); //render paper\n\n      document.getElementById(\"paper\").appendChild(this.paperScroller.render().el); //render paperScroller\n\n      this.highlighters = joint.highlighters;\n      this.paperScroller.$el.css({\n        width: 800,\n        height: 500\n      }).appendTo(\"#paper\");\n      this.addStencil();\n      this.handlePaperEvents();\n      this.btnHandler();\n      this.selection.collection.reset(graph.getElements());\n      this.render();\n      this.paperScroller.center(); // _.bind(this.paperScroller.centerContent, this.paperScroller)\n      // this.paperScroller.centerContent();\n      // this.paperScroller.adjustPaper();\n      // this.paperScroller.zoomToFit({ padding: 200 });\n    },\n\n    jsUcfirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n\n    stencilRenderHandler(positionX, positionY, arr, elNoInPorts = \"\", spaceBetweenElToX = 0, spaceBetweenElToY = 0) {\n      this.customEl = joint.dia.Element.define(\"standard.Rectangle\", {\n        z: 1,\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: \"calc(w-10)\",\n            height: \"calc(h-10 )\"\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: \"#FFFFFF\",\n            stroke: \"#A0A0A0\",\n            width: \"calc(w)\",\n            height: \"calc(h)\",\n            strokeWidth: 2,\n            rx: 5,\n            ry: 5\n          }\n        },\n        ports: {\n          items: [{\n            id: \"out-port\",\n            group: \"out\"\n          }, {\n            id: \"in-port\",\n            group: \"in\"\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: \"circle\",\n                selector: \"portBody\"\n              }],\n              position: {\n                name: \"right\"\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: \"active\",\n                  fill: \"#187BD3\",\n                  stroke: \"#187BD3\"\n                }\n              }\n            },\n            in: {\n              markup: [{\n                tagName: \"circle\",\n                selector: \"portBody\"\n              }],\n              position: {\n                name: \"left\"\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: \"passive\",\n                  fill: \"#FFFFFF\",\n                  stroke: \"#187BD3\"\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: \"rect\",\n          selector: \"body\"\n        }, {\n          tagName: \"image\",\n          selector: \"image\"\n        }, {\n          tagName: \"ports\",\n          selector: \"ports\"\n        }]\n      });\n      this.customElNoInPorts = joint.dia.Element.define(\"standard.Rectangle\", {\n        z: 1,\n        theme: \"material\",\n        size: {\n          width: 44,\n          height: 35\n        },\n        removable: false,\n        attrs: {\n          image: {\n            x: 5,\n            y: 5,\n            width: \"calc(w-10)\",\n            height: \"calc(h-10 )\"\n          },\n          root: {\n            magnet: false\n          },\n          body: {\n            fill: \"#FFFFFF\",\n            stroke: \"#A0A0A0\",\n            width: \"calc(w)\",\n            height: \"calc(h)\",\n            strokeWidth: 2\n          },\n          line: {\n            connection: true,\n            stroke: \"#333333\",\n            strokeWidth: 2,\n            strokeLinejoin: \"round\",\n            targetMarker: {\n              type: \"path\",\n              d: \"M 10 -5 0 0 10 5 z\"\n            }\n          }\n        },\n        ports: {\n          items: [{\n            id: \"out-port\",\n            group: \"out\"\n          }],\n          groups: {\n            out: {\n              markup: [{\n                tagName: \"circle\",\n                selector: \"portBody\"\n              }],\n              position: {\n                name: \"right\"\n              },\n              attrs: {\n                portBody: {\n                  r: 5,\n                  magnet: \"active\",\n                  fill: \"#187BD3\",\n                  stroke: \"#187BD3\"\n                }\n              }\n            }\n          }\n        },\n        markup: [{\n          tagName: \"rect\",\n          selector: \"body\"\n        }, {\n          tagName: \"image\",\n          selector: \"image\"\n        }, {\n          tagName: \"ports\",\n          selector: \"ports\"\n        }]\n      });\n      arr.forEach(element => {\n        //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n        let elementName = this.jsUcfirst(element);\n\n        if (elementName === this.jsUcfirst(elNoInPorts)) {\n          element = new this.customElNoInPorts();\n        } else {\n          element = new this.customEl();\n        }\n\n        element.prop(\"attrs/image/xlinkHref\", require(`../assets/${elementName}.svg`));\n        this.stencilShapes.push(element.position(positionX, positionY));\n\n        if (spaceBetweenElToX > 0) {\n          positionX += element.attributes.size.width + spaceBetweenElToX;\n        }\n\n        if (spaceBetweenElToY > 0) {\n          positionY += element.attributes.size.height + spaceBetweenElToY;\n        }\n      });\n    },\n\n    addStencil() {\n      let graph = this.graph;\n      let paper = this.paper;\n      var stencil = new joint.ui.Stencil({\n        paper: this.paperScroller,\n        width: 900,\n        height: 60,\n        dropAnimation: {\n          duration: 200,\n          easing: \"swing\"\n        }\n      });\n      this.stencilRenderHandler(20, 20, this.arr, \"load\", 16);\n      document.getElementById(\"stencil\").appendChild(stencil.render().el);\n      stencil.load(this.stencilShapes);\n    },\n\n    getElementPredecessorLinks(el) {\n      let graph = this.graph;\n      return graph.getSubgraph([el, ...graph.getPredecessors(el)]).filter(cell => cell.isLink());\n    },\n\n    highlightCell(cell) {\n      let self = this;\n\n      if (cell) {\n        self.highlighters.addClass.add(cell.findView(self.paper), cell.isElement() ? \"body\" : \"line\", \"selection\", {\n          className: \"selection\"\n        });\n      } else {\n        return;\n      }\n    },\n\n    unhighlightCell(cell) {\n      let self = this;\n\n      if (cell) {\n        self.highlighters.addClass.remove(cell.findView(self.paper), \"selection\");\n      } else {\n        return;\n      }\n    },\n\n    selectElement(el) {\n      let self = this;\n      let graph = self.graph;\n      if (self.selectionNode === el) return;\n\n      if (self.selectionNode) {\n        self.unhighlightCell(self.selectionNode);\n        graph.getLinks().forEach(link => self.unhighlightCell(link));\n      }\n\n      if (el) {\n        self.highlightCell(el);\n        self.getElementPredecessorLinks(el).forEach(link => {\n          self.highlightCell(link);\n          link.toFront({\n            ignoreCommandManager: true\n          });\n        });\n        self.selectionNode = el;\n      } else {\n        self.selectionNode = null;\n      }\n    },\n\n    addHalo(cellView) {\n      var halo = new joint.ui.Halo({\n        cellView: cellView,\n        type: \"toolbar\",\n        boxContent: false // bang phia duoi cell cho biet tọa độ height width và angle\n\n      });\n      halo.removeHandle(\"resize\");\n      halo.removeHandle(\"rotate\");\n      halo.removeHandle(\"direction\");\n      halo.render();\n    },\n\n    handlePaperEvents() {\n      let self = this;\n      let paper = self.paper;\n      let graph = self.graph; //nếu bấm thì =true\n\n      document.addEventListener(\"keydown\", function (evt) {\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n          self.ctrlDown = true;\n        }\n\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n          self.shiftDown = true;\n        }\n      });\n      document.addEventListener(\"keyup\", function (evt) {\n        if (!self.selectedElement && !self.selection) return;\n\n        if (evt.code === \"Backspace\" || evt.code === \"Delete\") {\n          //xóa 1 el\n          //xóa toàn bộ  el đã chọn\n          if (self.selection) {\n            // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\n            let deleteArrId = [];\n            self.selection.model.models.forEach(element => {\n              // console.log(element.id);\n              // console.log(self.getNodeAttr(element.id));\n              deleteArrId.push(element.id);\n              self.getNodeAttr(element.id);\n            });\n            self.$emit(\"node-delete\", deleteArrId);\n            paper.removeTools({\n              ignoreCommandManager: true\n            });\n            evt.preventDefault();\n            graph.removeCells(self.selection.collection.toArray());\n            self.selectionNode = null;\n          } else if (self.selectedElement) {\n            if (self.selectedElement.model.attributes.type === \"standard.Link\") {\n              self.$emit(\"link-delete\", self.selectedElement.model.id);\n            } else {\n              self.$emit(\"node-delete\", self.selectedElement.model.id);\n            }\n\n            self.selectedElement.remove();\n            self.selectedElement = null;\n            self.selectionNode = null;\n          }\n        }\n      }); //nếu thả nút thì =false\n\n      document.addEventListener(\"keyup\", function (evt) {\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\n          self.shiftDown = false;\n        }\n\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\n          self.ctrlDown = false;\n        }\n      });\n      paper.on(\"cell:pointerup\", function (cellView) {\n        self.addHalo(cellView);\n\n        if (cellView.model.attributes[\"type\"] === \"standard.Link\") {\n          self.$emit(\"select-link\", {\n            id: cellView.model.id\n          });\n        } else {\n          self.$emit(\"select-cell\", {\n            id: cellView.model.id\n          });\n        }\n\n        self.selectedElement = cellView;\n        self.selectedElement.model.toFront({\n          ignoreCommandManager: true\n        }); // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\n        // console.log(graph.getLinks())\n      });\n      graph.on(\"add\", (cell, collection, opt) => {\n        let type = cell.attributes.type; // console.log(type.split('.')[1])\n\n        if (type == \"standard.Link\") {\n          // self.addLinkTools(cell, paper);\n          // console.log(cell.attributes.source)\n          self.$emit(\"link-added\", {\n            source: cell.attributes.source,\n            target: cell.attributes.target\n          });\n        } else {\n          type = type.split(\".\")[1];\n          self.$emit(\"node-added\", {\n            id: cell.id,\n            type: type\n          });\n        }\n      });\n      paper.on({\n        //xử lý khi các sự kiện\n        \"cell:mouseenter\": cellView => {\n          cellView.model.toFront({\n            ignoreCommandManager: true\n          });\n          cellView.addTools(this.toolsView);\n        },\n        \"cell:mouseleave\": cellView => {\n          cellView.model.toBack({\n            ignoreCommandManager: true\n          });\n          elementView.hideTools();\n\n          if (self.selectionNode) {\n            self.getElementPredecessorLinks(self.selectionNode).forEach(link => {\n              link.toFront({\n                ignoreCommandManager: true\n              });\n            });\n          }\n        },\n        \"element:pointerclick\": cellView => {\n          //chỉ đổi màu khi ko bấm ctrl\n          if (self.ctrlDown === false) {\n            self.selectElement(cellView.model);\n          }\n        },\n        \"link:mouseenter\": function (elementView) {},\n        \"link:mouseleave\": function (elementView) {\n          elementView.hideTools();\n        },\n        \"link:pointerclick\": cellView => {\n          self.selectElement(cellView.model); //chon vao link thi mo cho phep doi node\n\n          cellView.addTools(this.toolsView);\n          console.log(cellView);\n        },\n        //chuyển lại màu cũ khi bấm ra ngoài\n        \"blank:pointerclick\": () => {\n          self.selectElement(null);\n          paper.removeTools({\n            ignoreCommandManager: true\n          });\n        },\n        \"element:pointerup\": function (cellView, evt) {\n          if (evt.ctrlKey || evt.metaKey) {\n            console.log(self.selection);\n            self.selection.collection.add(cellView.model); //loop to all the element in selection and set it to front\n\n            self.selection.collection.models.forEach(element => {\n              element.toFront({\n                ignoreCommandManager: true\n              });\n            });\n          }\n        },\n        //chuyển màu khi bấm vào link và cho nó lên trc\n        \"link:pointerup\": function (cellView) {\n          self.selectedLink = cellView.model;\n          self.selectedLink.toFront({\n            ignoreCommandManager: true\n          });\n        },\n        // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\n        \"blank:pointerdown\": function (evt, x, y) {\n          if (self.shiftDown === true) {\n            self.selectElement(null);\n            self.paperScroller.setCursor(\"crosshair\");\n            self.selection.startSelecting(evt);\n          } else {\n            self.selection.collection.reset([]);\n            self.paperScroller.startPanning(evt, x, y);\n            paper.removeTools();\n            self.paperScroller.setCursor(\"grab\");\n          }\n        }\n      }); //xóa el nếu chọn lại lần 2 khi bấm ctrl\n\n      self.selection.on(\"selection-box:pointerdown\", function (cellView, evt) {\n        if (evt.ctrlKey || evt.metaKey) {\n          self.selection.collection.remove(cellView.model);\n        }\n      }); //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\n\n      document.addEventListener(\"keydown\", function (evt) {\n        self.clipboard = new joint.ui.Clipboard();\n\n        if (evt.code === \"NumpadAdd\" && self.shiftDown === true) {\n          // console.log(evt.code)\n          self.paperScroller.zoom(0.2, {\n            max: 4\n          });\n        }\n\n        if (evt.code === \"NumpadSubtract\" && self.shiftDown === true) {\n          self.paperScroller.zoom(-0.2, {\n            min: 0.2\n          }); // console.log(evt.code)\n        } //check+ A\n\n\n        if (evt.code === \"KeyA\" && self.ctrlDown === true) {\n          self.selection.collection.reset(graph.getElements());\n          evt.preventDefault();\n        } //check ctrl + Z\n\n\n        if (evt.code === \"KeyZ\" && self.ctrlDown === true) {\n          self.commandManager.undo(); // console.log(selectionNode)\n\n          self.unhighlightCell(self.selectionNode);\n          graph.getLinks().forEach(link => self.unhighlightCell(link)); // console.log(selectionNode)\n\n          self.selectionNode = null;\n        } //check ctrl + Y\n\n\n        if (evt.code === \"KeyY\" && self.ctrlDown === true) {\n          self.commandManager.redo();\n          self.selectElement(null);\n        } //check ctrl + V ,ctrl + C, ctrl+X\n\n\n        if (evt.code === \"KeyX\" && self.ctrlDown === true) {\n          self.clipboard.cutElements(self.selection.collection, paper.model);\n        }\n\n        if (evt.code === \"KeyC\" && self.ctrlDown === true) {\n          self.clipboard.copyElements(self.selection.collection, graph);\n        }\n\n        if (evt.code === \"KeyV\" && self.ctrlDown === true) {\n          var pastedCells = self.clipboard.pasteCells(graph, {\n            translate: {\n              dx: 40,\n              dy: 40\n            },\n            useLocalStorage: true\n          });\n\n          var elements = _.filter(pastedCells, function (cell) {\n            return cell.isElement();\n          }); // Make sure pasted elements get selected immediately. This makes the UX better as\n          // the user can immediately manipulate the pasted elements.\n\n\n          self.selection.collection.reset(elements);\n        }\n      });\n    },\n\n    btnHandler() {\n      let self = this;\n      $(\"#btn-zoomin\").on(\"click\", function () {\n        self.paperScroller.zoom(0.2, {\n          max: 4\n        });\n      });\n      $(\"#btn-zoomout\").on(\"click\", function () {\n        self.paperScroller.zoom(-0.2, {\n          min: 0.2\n        });\n      });\n      $(\"#btn-center\").on(\"click\", _.bind(self.paperScroller.center, self.paperScroller));\n      $(\"#btn-center-content\").on(\"click\", _.bind(self.paperScroller.centerContent, self.paperScroller));\n    },\n\n    getAllLinks() {\n      return this.graph.getLinks();\n    },\n\n    getAllNodes() {\n      return this.graph.getCells();\n    },\n\n    clearAll() {\n      return this.graph.clear();\n    },\n\n    getNodeAttr(id) {\n      let node = this.graph.getCell(id);\n\n      if (node) {\n        return node.attributes;\n      } else {\n        return {};\n      }\n    },\n\n    render() {\n      let nodeInfos = this.nodes;\n      let linkInfo = this.links;\n      nodeInfos.forEach(nodeInfo => {\n        let nodeType = nodeInfo.type;\n        let elementName = this.jsUcfirst(nodeInfo.name); //checknode\n\n        if (nodeType === \"Rectangle\") {\n          if (elementName === \"Load\") {\n            let cell = new this.customElNoInPorts({\n              position: nodeInfo.position,\n              id: nodeInfo.id\n            });\n            cell.prop(\"attrs/image/xlinkHref\", require(`../assets/${elementName}.svg`));\n            this.graph.addCell(cell); // console.log(cell)\n            // linkInfo.source=cell\n          } else {\n            let cell = new this.customEl({\n              position: nodeInfo.position,\n              id: nodeInfo.id\n            });\n            cell.prop(\"attrs/image/xlinkHref\", require(`../assets/${elementName}.svg`));\n            this.graph.addCell(cell); //   linkInfo.target=cell\n            // console.log(cell)\n          }\n        } else {\n          console.error(\"Node type '\" + nodeType + \"' is not defined\");\n        }\n      });\n\n      if (linkInfo) {\n        let link = new joint.shapes.standard.Link();\n        link.source(this.getNodeAttr(linkInfo.source));\n        link.target(this.getNodeAttr(linkInfo.target));\n        link.addTo(this.graph);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","width","type","String","Number","default","height","gridSize","drawGrid","Object","Boolean","highLightLinks","Array","nodes","id","position","x","y","links","source","target","data","stencilShapes","selectionNode","selectedElement","selectedLink","ctrlDown","shiftDown","color","arr","created","graph","joint","dia","Graph","mounted","initPaper","methods","commandManager","CommandManager","cmdBeforeAdd","cmdName","cell","options","ignoreCommandManager","paper","Paper","model","async","sorting","APPROX","restrictTranslate","stopDelegation","interactive","vertexAdd","snapLinks","radius","linkPinning","multiLinks","defaultRouter","args","padding","defaultConnector","validateConnection","cellViewS","magnetS","cellViewT","magnetT","end","linkView","getAttribute","get","linkMove","labelMove","arrowheadMove","vertexMove","vertexRemove","useLinkTools","defaultLink","shapes","standard","Link","attrs","z","line","connection","stroke","strokeLinejoin","wrapper","strokeWidth","markup","tagName","selector","attributes","fill","targetArrowheadTool","linkTools","TargetArrowhead","toolsView","ToolsView","tools","paperScroller","ui","PaperScroller","autoResizePaper","scrollWhileDragging","cursor","selection","Selection","theme","useModelGeometry","allowTranslate","toolbar","Toolbar","references","document","getElementById","appendChild","render","el","snaplines","Snaplines","startListening","highlighters","$el","css","appendTo","addStencil","handlePaperEvents","btnHandler","collection","reset","getElements","center","jsUcfirst","string","charAt","toUpperCase","slice","stencilRenderHandler","positionX","positionY","elNoInPorts","spaceBetweenElToX","spaceBetweenElToY","customEl","Element","define","size","removable","image","root","magnet","body","rx","ry","ports","items","group","groups","out","portBody","r","in","customElNoInPorts","targetMarker","d","forEach","element","elementName","prop","require","push","stencil","Stencil","dropAnimation","duration","easing","load","getElementPredecessorLinks","getSubgraph","getPredecessors","filter","isLink","highlightCell","self","addClass","add","findView","isElement","className","unhighlightCell","remove","selectElement","getLinks","link","toFront","addHalo","cellView","halo","Halo","boxContent","removeHandle","addEventListener","evt","code","deleteArrId","models","getNodeAttr","$emit","removeTools","preventDefault","removeCells","toArray","on","opt","split","addTools","toBack","elementView","hideTools","console","log","ctrlKey","metaKey","setCursor","startSelecting","startPanning","clipboard","Clipboard","zoom","max","min","undo","redo","cutElements","copyElements","pastedCells","pasteCells","translate","dx","dy","useLocalStorage","elements","_","$","bind","centerContent","getAllLinks","getAllNodes","getCells","clearAll","clear","node","getCell","nodeInfos","linkInfo","nodeInfo","nodeType","addCell","error","addTo"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\components\\dataflow.vue"],"sourcesContent":["<template>\r\n  <div id=\"main\">\r\n    <div ref=\"Toolbar\" id=\"Toolbar\">\r\n      <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\r\n      <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\r\n      <button id=\"btn-center\" class=\"btn\">center</button>\r\n      <button id=\"btn-center-content\" class=\"btn\">center content</button>\r\n    </div>\r\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\r\n\r\n    <div id=\"paper\"></div>\r\n    <div id=\"navigator\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"DataFlow\",\r\n  props: {\r\n    width: {\r\n      type: [String, Number],\r\n      default: 800,\r\n    },\r\n    height: {\r\n      type: [String, Number],\r\n      default: 250,\r\n    },\r\n    gridSize: {\r\n      type: Number,\r\n      default: 10,\r\n    },\r\n    drawGrid: {\r\n      type: [Object, Boolean],\r\n      default: true,\r\n    },\r\n\r\n    highLightLinks: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      },\r\n    },\r\n    nodes: {\r\n      type: [Object, Boolean],\r\n      default: [\r\n        {\r\n          id: \"fd9c3b76-efea-436f-9bd5-ac2ba665d512\",\r\n          name: \"load\",\r\n          position: { x: 250, y: 250 },\r\n          type: \"Rectangle\",\r\n        },\r\n        {\r\n          id: \"4b20a9c1-bdbf-44fa-a64c-3ac11c377f84\",\r\n          name: \"filter\",\r\n          position: { x: 550, y: 250 },\r\n          type: \"Rectangle\",\r\n        },\r\n      ],\r\n    },\r\n    links: {\r\n      type: [Object, Boolean],\r\n      default:\r\n        // false,\r\n        {\r\n          source: \"fd9c3b76-efea-436f-9bd5-ac2ba665d512\",\r\n          target: \"4b20a9c1-bdbf-44fa-a64c-3ac11c377f84\",\r\n        },\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      stencilShapes: [],\r\n      selectionNode: null,\r\n      selectedElement: null,\r\n      selectedLink: null,\r\n\r\n      //check ctrl shift\r\n      ctrlDown: false,\r\n      shiftDown: false,\r\n      color: \"rgb(255 136 0)\",\r\n      arr: [\r\n        \"filter\",\r\n        \"formula\",\r\n        \"join\",\r\n        \"load\",\r\n        \"pivot\",\r\n        \"sample\",\r\n        \"script\",\r\n        \"select\",\r\n        \"sort\",\r\n        \"summarize\",\r\n        \"transposeTable\",\r\n        \"union\",\r\n        \"weightAvg\",\r\n      ],\r\n    };\r\n  },\r\n  created() {\r\n    this.graph = new joint.dia.Graph();\r\n  },\r\n  mounted() {\r\n    this.initPaper();\r\n    // this.center()\r\n  },\r\n  methods: {\r\n    // center() {\r\n    //   _.bind(self.paperScroller.centerContent, self.paperScroller);\r\n    // },\r\n    initPaper() {\r\n      let graph = this.graph;\r\n      this.commandManager = new joint.dia.CommandManager({\r\n        graph: graph,\r\n        cmdBeforeAdd: (cmdName, cell, graph, options = {}) => {\r\n          return !options.ignoreCommandManager;\r\n        },\r\n      });\r\n      this.paper = new joint.dia.Paper({\r\n        width: this.width,\r\n        height: this.height,\r\n        model: this.graph,\r\n        async: true,\r\n        sorting: joint.dia.Paper.sorting.APPROX,\r\n        gridSize: this.gridSize,\r\n        drawGrid: this.drawGrid,\r\n        restrictTranslate: true,\r\n        stopDelegation: false,\r\n\r\n        interactive: { vertexAdd: false },\r\n        // background: { color: '#F3F7F6' },\r\n        // defaultConnectionPoint: { name: 'boundary' },\r\n        // defaultConnector: {\r\n        //     name: \"rounded\"\r\n        //   },\r\n        //   defaultRouter: {\r\n        //     name: \"manhattan\",\r\n        //     args: {\r\n        //       step: 10,\r\n        //       endDirections: [\"bottom\"],\r\n        //       startDirections: [\"top\"],\r\n        //       padding: { bottom: 20 }\r\n        //     }\r\n        //   },\r\n        snapLinks: {\r\n          radius: 75,\r\n        },\r\n        linkPinning: false,\r\n        multiLinks: false,\r\n        defaultRouter: { name: \"manhattan\", args: { padding: 10 } },\r\n        defaultConnector: { name: \"rounded\" },\r\n        validateConnection: function (\r\n          cellViewS,\r\n          magnetS,\r\n          cellViewT,\r\n          magnetT,\r\n          end,\r\n          linkView\r\n        ) {\r\n          // Prevent linking from input ports.\r\n          if (magnetS && magnetS.getAttribute(\"port-group\") === \"in\")\r\n            return false;\r\n          // Prevent linking from output ports to input ports within one element.\r\n          if (cellViewS === cellViewT) return false;\r\n          // Prevent linking to input ports.\r\n          return (\r\n            (magnetT && magnetT.getAttribute(\"port-group\") === \"in\") ||\r\n            (cellViewS.model.get(\"type\") === \"qad.Question\" &&\r\n              cellViewT.model.get(\"type\") === \"qad.Answer\")\r\n          );\r\n        },\r\n        // validateConnection: function (view1, _magnet1, view2, _magnet2) {\r\n        //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\r\n        //     return view1 !== view2;\r\n        // },\r\n        interactive: {\r\n          linkMove: true,\r\n          labelMove: true,\r\n          arrowheadMove: true,\r\n          vertexMove: false,\r\n          vertexAdd: false,\r\n          vertexRemove: false,\r\n          useLinkTools: false,\r\n        },\r\n        defaultLink: function () {\r\n          return new joint.shapes.standard.Link({\r\n            attrs: {\r\n              z: 1,\r\n              line: {\r\n                connection: true,\r\n                stroke: \"#707070\",\r\n                strokeLinejoin: \"round\",\r\n              },\r\n              wrapper: {\r\n                connection: true,\r\n                strokeWidth: 10,\r\n                strokeLinejoin: \"round\",\r\n              },\r\n            },\r\n\r\n            markup: [\r\n              {\r\n                tagName: \"path\",\r\n                selector: \"wrapper\",\r\n                attributes: {\r\n                  fill: \"none\",\r\n\r\n                  stroke: \"transparent\",\r\n                },\r\n              },\r\n              {\r\n                tagName: \"path\",\r\n                selector: \"line\",\r\n                attributes: {\r\n                  fill: \"none\",\r\n                },\r\n              },\r\n            ],\r\n          });\r\n        },\r\n      });\r\n      var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\r\n      this.toolsView = new joint.dia.ToolsView({\r\n        tools: [\r\n          // verticesTool, segmentsTool,\r\n          // sourceArrowheadTool,\r\n          targetArrowheadTool,\r\n          // sourceAnchorTool, targetAnchorTool,\r\n          // boundaryTool, removeButton\r\n        ],\r\n      });\r\n      // var elementView = element.findView(this.paper);\r\n      // elementView.addTools(this.toolsView);\r\n      // var linkView = this.link.findView(this.paper);\r\n      // linkView.addTools(this.toolsView);\r\n      this.paperScroller = new joint.ui.PaperScroller({\r\n        paper: this.paper,\r\n        autoResizePaper: true,\r\n        scrollWhileDragging: true,\r\n        cursor: \"grab\",\r\n      });\r\n      this.selection = new joint.ui.Selection({\r\n        theme: \"material\",\r\n        paper: this.paper,\r\n        useModelGeometry: true,\r\n        allowTranslate: true,\r\n      });\r\n      this.toolbar = new joint.ui.Toolbar({\r\n        // initialize tools with default settings\r\n        tools: [\"zoomIn\", \"zoomOut\", \"zoomToFit\", \"zoomSlider\", \"undo\", \"redo\"],\r\n        references: {\r\n          paperScroller: this.paperScroller,\r\n          commandManager: this.commandManager,\r\n        },\r\n      });\r\n      document.getElementById(\"Toolbar\").appendChild(this.toolbar.render().el);\r\n\r\n      this.snaplines = new joint.ui.Snaplines({ paper: this.paper });\r\n      this.snaplines.startListening();\r\n      //render paper\r\n      document\r\n        .getElementById(\"paper\")\r\n        .appendChild(this.paperScroller.render().el);\r\n      //render paperScroller\r\n      this.highlighters = joint.highlighters;\r\n      this.paperScroller.$el\r\n        .css({ width: 800, height: 500 })\r\n        .appendTo(\"#paper\");\r\n\r\n      this.addStencil();\r\n      this.handlePaperEvents();\r\n      this.btnHandler();\r\n      this.selection.collection.reset(graph.getElements());\r\n      this.render();\r\n      this.paperScroller.center();\r\n      // _.bind(this.paperScroller.centerContent, this.paperScroller)\r\n      // this.paperScroller.centerContent();\r\n      // this.paperScroller.adjustPaper();\r\n      // this.paperScroller.zoomToFit({ padding: 200 });\r\n    },\r\n    jsUcfirst(string) {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n    },\r\n    stencilRenderHandler(\r\n      positionX,\r\n      positionY,\r\n      arr,\r\n      elNoInPorts = \"\",\r\n      spaceBetweenElToX = 0,\r\n      spaceBetweenElToY = 0\r\n    ) {\r\n      this.customEl = joint.dia.Element.define(\"standard.Rectangle\", {\r\n        z: 1,\r\n        size: {\r\n          width: 44,\r\n          height: 35,\r\n        },\r\n        removable: false,\r\n        attrs: {\r\n          image: {\r\n            x: 5,\r\n            y: 5,\r\n            width: \"calc(w-10)\",\r\n            height: \"calc(h-10 )\",\r\n          },\r\n          root: {\r\n            magnet: false,\r\n          },\r\n          body: {\r\n            fill: \"#FFFFFF\",\r\n            stroke: \"#A0A0A0\",\r\n            width: \"calc(w)\",\r\n            height: \"calc(h)\",\r\n            strokeWidth: 2,\r\n            rx: 5,\r\n            ry: 5,\r\n          },\r\n        },\r\n        ports: {\r\n          items: [\r\n            {\r\n              id: \"out-port\",\r\n              group: \"out\",\r\n            },\r\n            {\r\n              id: \"in-port\",\r\n              group: \"in\",\r\n            },\r\n          ],\r\n          groups: {\r\n            out: {\r\n              markup: [\r\n                {\r\n                  tagName: \"circle\",\r\n                  selector: \"portBody\",\r\n                },\r\n              ],\r\n              position: {\r\n                name: \"right\",\r\n              },\r\n              attrs: {\r\n                portBody: {\r\n                  r: 5,\r\n                  magnet: \"active\",\r\n                  fill: \"#187BD3\",\r\n                  stroke: \"#187BD3\",\r\n                },\r\n              },\r\n            },\r\n            in: {\r\n              markup: [\r\n                {\r\n                  tagName: \"circle\",\r\n                  selector: \"portBody\",\r\n                },\r\n              ],\r\n              position: {\r\n                name: \"left\",\r\n              },\r\n              attrs: {\r\n                portBody: {\r\n                  r: 5,\r\n                  magnet: \"passive\",\r\n                  fill: \"#FFFFFF\",\r\n                  stroke: \"#187BD3\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        markup: [\r\n          {\r\n            tagName: \"rect\",\r\n            selector: \"body\",\r\n          },\r\n          {\r\n            tagName: \"image\",\r\n            selector: \"image\",\r\n          },\r\n          {\r\n            tagName: \"ports\",\r\n            selector: \"ports\",\r\n          },\r\n        ],\r\n      });\r\n      this.customElNoInPorts = joint.dia.Element.define(\"standard.Rectangle\", {\r\n        z: 1,\r\n        theme: \"material\",\r\n        size: {\r\n          width: 44,\r\n          height: 35,\r\n        },\r\n        removable: false,\r\n        attrs: {\r\n          image: {\r\n            x: 5,\r\n            y: 5,\r\n            width: \"calc(w-10)\",\r\n            height: \"calc(h-10 )\",\r\n          },\r\n          root: {\r\n            magnet: false,\r\n          },\r\n          body: {\r\n            fill: \"#FFFFFF\",\r\n            stroke: \"#A0A0A0\",\r\n            width: \"calc(w)\",\r\n            height: \"calc(h)\",\r\n            strokeWidth: 2,\r\n          },\r\n          line: {\r\n            connection: true,\r\n            stroke: \"#333333\",\r\n            strokeWidth: 2,\r\n            strokeLinejoin: \"round\",\r\n            targetMarker: {\r\n              type: \"path\",\r\n              d: \"M 10 -5 0 0 10 5 z\",\r\n            },\r\n          },\r\n        },\r\n        ports: {\r\n          items: [\r\n            {\r\n              id: \"out-port\",\r\n              group: \"out\",\r\n            },\r\n          ],\r\n          groups: {\r\n            out: {\r\n              markup: [\r\n                {\r\n                  tagName: \"circle\",\r\n                  selector: \"portBody\",\r\n                },\r\n              ],\r\n              position: {\r\n                name: \"right\",\r\n              },\r\n              attrs: {\r\n                portBody: {\r\n                  r: 5,\r\n                  magnet: \"active\",\r\n                  fill: \"#187BD3\",\r\n                  stroke: \"#187BD3\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        markup: [\r\n          {\r\n            tagName: \"rect\",\r\n            selector: \"body\",\r\n          },\r\n          {\r\n            tagName: \"image\",\r\n            selector: \"image\",\r\n          },\r\n          {\r\n            tagName: \"ports\",\r\n            selector: \"ports\",\r\n          },\r\n        ],\r\n      });\r\n      arr.forEach((element) => {\r\n        //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\r\n        let elementName = this.jsUcfirst(element);\r\n        if (elementName === this.jsUcfirst(elNoInPorts)) {\r\n          element = new this.customElNoInPorts();\r\n        } else {\r\n          element = new this.customEl();\r\n        }\r\n        element.prop(\r\n          \"attrs/image/xlinkHref\",\r\n          require(`../assets/${elementName}.svg`)\r\n        );\r\n        this.stencilShapes.push(element.position(positionX, positionY));\r\n        if (spaceBetweenElToX > 0) {\r\n          positionX += element.attributes.size.width + spaceBetweenElToX;\r\n        }\r\n        if (spaceBetweenElToY > 0) {\r\n          positionY += element.attributes.size.height + spaceBetweenElToY;\r\n        }\r\n      });\r\n    },\r\n\r\n    addStencil() {\r\n      let graph = this.graph;\r\n      let paper = this.paper;\r\n      var stencil = new joint.ui.Stencil({\r\n        paper: this.paperScroller,\r\n        width: 900,\r\n        height: 60,\r\n        dropAnimation: { duration: 200, easing: \"swing\" },\r\n      });\r\n\r\n      this.stencilRenderHandler(20, 20, this.arr, \"load\", 16);\r\n      document.getElementById(\"stencil\").appendChild(stencil.render().el);\r\n      stencil.load(this.stencilShapes);\r\n    },\r\n    getElementPredecessorLinks(el) {\r\n      let graph = this.graph;\r\n\r\n      return graph\r\n        .getSubgraph([el, ...graph.getPredecessors(el)])\r\n        .filter((cell) => cell.isLink());\r\n    },\r\n    highlightCell(cell) {\r\n      let self = this;\r\n      if (cell) {\r\n        self.highlighters.addClass.add(\r\n          cell.findView(self.paper),\r\n          cell.isElement() ? \"body\" : \"line\",\r\n          \"selection\",\r\n          { className: \"selection\" }\r\n        );\r\n      } else {\r\n        return;\r\n      }\r\n    },\r\n    unhighlightCell(cell) {\r\n      let self = this;\r\n      if (cell) {\r\n        self.highlighters.addClass.remove(\r\n          cell.findView(self.paper),\r\n          \"selection\"\r\n        );\r\n      } else {\r\n        return;\r\n      }\r\n    },\r\n    selectElement(el) {\r\n      let self = this;\r\n      let graph = self.graph;\r\n      if (self.selectionNode === el) return;\r\n      if (self.selectionNode) {\r\n        self.unhighlightCell(self.selectionNode);\r\n        graph.getLinks().forEach((link) => self.unhighlightCell(link));\r\n      }\r\n      if (el) {\r\n        self.highlightCell(el);\r\n        self.getElementPredecessorLinks(el).forEach((link) => {\r\n          self.highlightCell(link);\r\n          link.toFront({ ignoreCommandManager: true });\r\n        });\r\n        self.selectionNode = el;\r\n      } else {\r\n        self.selectionNode = null;\r\n      }\r\n    },\r\n    addHalo(cellView) {\r\n      var halo = new joint.ui.Halo({\r\n        cellView: cellView,\r\n        type: \"toolbar\",\r\n        boxContent: false, // bang phia duoi cell cho biet tọa độ height width và angle\r\n      });\r\n      halo.removeHandle(\"resize\");\r\n      halo.removeHandle(\"rotate\");\r\n      halo.removeHandle(\"direction\");\r\n      halo.render();\r\n    },\r\n\r\n    handlePaperEvents() {\r\n      let self = this;\r\n      let paper = self.paper;\r\n      let graph = self.graph;\r\n      //nếu bấm thì =true\r\n      document.addEventListener(\"keydown\", function (evt) {\r\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n          self.ctrlDown = true;\r\n        }\r\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n          self.shiftDown = true;\r\n        }\r\n      });\r\n      document.addEventListener(\"keyup\", function (evt) {\r\n        if (!self.selectedElement && !self.selection) return;\r\n        if (evt.code === \"Backspace\" || evt.code === \"Delete\") {\r\n          //xóa 1 el\r\n\r\n          //xóa toàn bộ  el đã chọn\r\n          if (self.selection) {\r\n            // chuyeent selection.collection thành mảng hảm remove cell nhận vào 1 mảng và xóa khỏi graph\r\n\r\n            let deleteArrId = [];\r\n            self.selection.model.models.forEach((element) => {\r\n              // console.log(element.id);\r\n              // console.log(self.getNodeAttr(element.id));\r\n              deleteArrId.push(element.id);\r\n              self.getNodeAttr(element.id);\r\n            });\r\n            self.$emit(\"node-delete\", deleteArrId);\r\n            paper.removeTools({ ignoreCommandManager: true });\r\n            evt.preventDefault();\r\n            graph.removeCells(self.selection.collection.toArray());\r\n            self.selectionNode = null;\r\n          } else if (self.selectedElement) {\r\n            if (\r\n              self.selectedElement.model.attributes.type === \"standard.Link\"\r\n            ) {\r\n              self.$emit(\"link-delete\", self.selectedElement.model.id);\r\n            } else {\r\n              self.$emit(\"node-delete\", self.selectedElement.model.id);\r\n            }\r\n            self.selectedElement.remove();\r\n            self.selectedElement = null;\r\n            self.selectionNode = null;\r\n          }\r\n        }\r\n      });\r\n      //nếu thả nút thì =false\r\n      document.addEventListener(\"keyup\", function (evt) {\r\n        if (evt.code === \"ShiftLeft\" || evt.code === \"ShiftRight\") {\r\n          self.shiftDown = false;\r\n        }\r\n        if (evt.code === \"ControlLeft\" || evt.code === \"ControlRight\") {\r\n          self.ctrlDown = false;\r\n        }\r\n      });\r\n      paper.on(\"cell:pointerup\", function (cellView) {\r\n        self.addHalo(cellView);\r\n\r\n        if (cellView.model.attributes[\"type\"] === \"standard.Link\") {\r\n          self.$emit(\"select-link\", { id: cellView.model.id });\r\n        } else {\r\n          self.$emit(\"select-cell\", { id: cellView.model.id });\r\n        }\r\n\r\n        self.selectedElement = cellView;\r\n        self.selectedElement.model.toFront({ ignoreCommandManager: true });\r\n        // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\r\n        // console.log(graph.getLinks())\r\n      });\r\n      graph.on(\"add\", (cell, collection, opt) => {\r\n        let type = cell.attributes.type;\r\n        // console.log(type.split('.')[1])\r\n        if (type == \"standard.Link\") {\r\n          // self.addLinkTools(cell, paper);\r\n          // console.log(cell.attributes.source)\r\n          self.$emit(\"link-added\", {\r\n            source: cell.attributes.source,\r\n            target: cell.attributes.target,\r\n          });\r\n        } else {\r\n          type = type.split(\".\")[1];\r\n          self.$emit(\"node-added\", {\r\n            id: cell.id,\r\n            type: type,\r\n          });\r\n        }\r\n      });\r\n      paper.on({\r\n        //xử lý khi các sự kiện\r\n        \"cell:mouseenter\": (cellView) => {\r\n          cellView.model.toFront({ ignoreCommandManager: true });\r\n          cellView.addTools(this.toolsView);\r\n        },\r\n        \"cell:mouseleave\": (cellView) => {\r\n          cellView.model.toBack({ ignoreCommandManager: true });\r\n          elementView.hideTools();\r\n          if (self.selectionNode) {\r\n            self\r\n              .getElementPredecessorLinks(self.selectionNode)\r\n              .forEach((link) => {\r\n                link.toFront({ ignoreCommandManager: true });\r\n              });\r\n          }\r\n        },\r\n\r\n        \"element:pointerclick\": (cellView) => {\r\n          //chỉ đổi màu khi ko bấm ctrl\r\n          if (self.ctrlDown === false) {\r\n            self.selectElement(cellView.model);\r\n          }\r\n        },\r\n        \"link:mouseenter\": function (elementView) {\r\n          \r\n          \r\n        },\r\n        \"link:mouseleave\": function (elementView) {\r\n          elementView.hideTools();\r\n        },\r\n        \"link:pointerclick\": (cellView) => {\r\n          self.selectElement(cellView.model);\r\n          //chon vao link thi mo cho phep doi node\r\n          cellView.addTools(this.toolsView);\r\n          console.log(cellView);\r\n        },\r\n\r\n        //chuyển lại màu cũ khi bấm ra ngoài\r\n        \"blank:pointerclick\": () => {\r\n          self.selectElement(null);\r\n          paper.removeTools({ ignoreCommandManager: true });\r\n        },\r\n\r\n        \"element:pointerup\": function (cellView, evt) {\r\n          if (evt.ctrlKey || evt.metaKey) {\r\n            console.log(self.selection);\r\n            self.selection.collection.add(cellView.model);\r\n            //loop to all the element in selection and set it to front\r\n            self.selection.collection.models.forEach((element) => {\r\n              element.toFront({ ignoreCommandManager: true });\r\n            });\r\n          }\r\n        },\r\n        //chuyển màu khi bấm vào link và cho nó lên trc\r\n        \"link:pointerup\": function (cellView) {\r\n          self.selectedLink = cellView.model;\r\n          self.selectedLink.toFront({ ignoreCommandManager: true });\r\n        },\r\n\r\n        // lắng nghe sự kiện bấm ở ngoài khoange trống check shift để active select\r\n        \"blank:pointerdown\": function (evt, x, y) {\r\n          if (self.shiftDown === true) {\r\n            self.selectElement(null);\r\n\r\n            self.paperScroller.setCursor(\"crosshair\");\r\n            self.selection.startSelecting(evt);\r\n          } else {\r\n            self.selection.collection.reset([]);\r\n            self.paperScroller.startPanning(evt, x, y);\r\n            paper.removeTools();\r\n            self.paperScroller.setCursor(\"grab\");\r\n          }\r\n        },\r\n      });\r\n      //xóa el nếu chọn lại lần 2 khi bấm ctrl\r\n      self.selection.on(\"selection-box:pointerdown\", function (cellView, evt) {\r\n        if (evt.ctrlKey || evt.metaKey) {\r\n          self.selection.collection.remove(cellView.model);\r\n        }\r\n      });\r\n      //kết hợp bấm ctrl để check các tổ hợp phím ctrl + C,V,Z,Y,A...\r\n      document.addEventListener(\"keydown\", function (evt) {\r\n        self.clipboard = new joint.ui.Clipboard();\r\n\r\n        if (evt.code === \"NumpadAdd\" && self.shiftDown === true) {\r\n          // console.log(evt.code)\r\n          self.paperScroller.zoom(0.2, { max: 4 });\r\n        }\r\n        if (evt.code === \"NumpadSubtract\" && self.shiftDown === true) {\r\n          self.paperScroller.zoom(-0.2, { min: 0.2 });\r\n          // console.log(evt.code)\r\n        }\r\n        //check+ A\r\n        if (evt.code === \"KeyA\" && self.ctrlDown === true) {\r\n          self.selection.collection.reset(graph.getElements());\r\n          evt.preventDefault();\r\n        } //check ctrl + Z\r\n        if (evt.code === \"KeyZ\" && self.ctrlDown === true) {\r\n          self.commandManager.undo();\r\n          // console.log(selectionNode)\r\n\r\n          self.unhighlightCell(self.selectionNode);\r\n          graph.getLinks().forEach((link) => self.unhighlightCell(link));\r\n\r\n          // console.log(selectionNode)\r\n          self.selectionNode = null;\r\n        }\r\n        //check ctrl + Y\r\n        if (evt.code === \"KeyY\" && self.ctrlDown === true) {\r\n          self.commandManager.redo();\r\n          self.selectElement(null);\r\n        }\r\n        //check ctrl + V ,ctrl + C, ctrl+X\r\n        if (evt.code === \"KeyX\" && self.ctrlDown === true) {\r\n          self.clipboard.cutElements(self.selection.collection, paper.model);\r\n        }\r\n        if (evt.code === \"KeyC\" && self.ctrlDown === true) {\r\n          self.clipboard.copyElements(self.selection.collection, graph);\r\n        }\r\n        if (evt.code === \"KeyV\" && self.ctrlDown === true) {\r\n          var pastedCells = self.clipboard.pasteCells(graph, {\r\n            translate: { dx: 40, dy: 40 },\r\n            useLocalStorage: true,\r\n          });\r\n\r\n          var elements = _.filter(pastedCells, function (cell) {\r\n            return cell.isElement();\r\n          });\r\n          // Make sure pasted elements get selected immediately. This makes the UX better as\r\n          // the user can immediately manipulate the pasted elements.\r\n          self.selection.collection.reset(elements);\r\n        }\r\n      });\r\n    },\r\n    btnHandler() {\r\n      let self = this;\r\n      $(\"#btn-zoomin\").on(\"click\", function () {\r\n        self.paperScroller.zoom(0.2, { max: 4 });\r\n      });\r\n      $(\"#btn-zoomout\").on(\"click\", function () {\r\n        self.paperScroller.zoom(-0.2, { min: 0.2 });\r\n      });\r\n      $(\"#btn-center\").on(\r\n        \"click\",\r\n        _.bind(self.paperScroller.center, self.paperScroller)\r\n      );\r\n      $(\"#btn-center-content\").on(\r\n        \"click\",\r\n        _.bind(self.paperScroller.centerContent, self.paperScroller)\r\n      );\r\n    },\r\n    getAllLinks() {\r\n      return this.graph.getLinks();\r\n    },\r\n    getAllNodes() {\r\n      return this.graph.getCells();\r\n    },\r\n    clearAll() {\r\n      return this.graph.clear();\r\n    },\r\n    getNodeAttr(id) {\r\n      let node = this.graph.getCell(id);\r\n      if (node) {\r\n        return node.attributes;\r\n      } else {\r\n        return {};\r\n      }\r\n    },\r\n    render() {\r\n      let nodeInfos = this.nodes;\r\n      let linkInfo = this.links;\r\n      nodeInfos.forEach((nodeInfo) => {\r\n        let nodeType = nodeInfo.type;\r\n        let elementName = this.jsUcfirst(nodeInfo.name);\r\n        //checknode\r\n        if (nodeType === \"Rectangle\") {\r\n          if (elementName === \"Load\") {\r\n            let cell = new this.customElNoInPorts({\r\n              position: nodeInfo.position,\r\n              id: nodeInfo.id,\r\n            });\r\n            cell.prop(\r\n              \"attrs/image/xlinkHref\",\r\n              require(`../assets/${elementName}.svg`)\r\n            );\r\n            this.graph.addCell(cell);\r\n            // console.log(cell)\r\n            // linkInfo.source=cell\r\n          } else {\r\n            let cell = new this.customEl({\r\n              position: nodeInfo.position,\r\n              id: nodeInfo.id,\r\n            });\r\n            cell.prop(\r\n              \"attrs/image/xlinkHref\",\r\n              require(`../assets/${elementName}.svg`)\r\n            );\r\n            this.graph.addCell(cell);\r\n            //   linkInfo.target=cell\r\n            // console.log(cell)\r\n          }\r\n        } else {\r\n          console.error(\"Node type '\" + nodeType + \"' is not defined\");\r\n        }\r\n      });\r\n\r\n      if (linkInfo) {\r\n        let link = new joint.shapes.standard.Link();\r\n        link.source(this.getNodeAttr(linkInfo.source));\r\n        link.target(this.getNodeAttr(linkInfo.target));\r\n        link.addTo(this.graph);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.joint-element .selection {\r\n  stroke: rgb(255 136 0);\r\n}\r\n.joint-link .selection {\r\n  stroke: rgb(255 136 0);\r\n  /* fill: rgb(255 136 0); */\r\n}\r\n.joint-paper-scroller.joint-theme-default {\r\n  width: 800px !important;\r\n  height: 600px;\r\n}\r\n.joint-toolbar.joint-theme-default {\r\n  width: 800px !important;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}