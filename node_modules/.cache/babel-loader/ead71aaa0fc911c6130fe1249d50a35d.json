{"ast":null,"code":"import * as util from '../util/index.mjs';\n\nfunction abs2rel(absolute, max) {\n  if (max === 0) return '0%'; // round to 3 decimal places\n\n  const dp = 1000;\n  const relative = Math.round(absolute / max * 100 * dp) / dp;\n  return `${relative}%`;\n}\n\nfunction pin(relative) {\n  return function (end, view, magnet, coords) {\n    var fn = view.isNodeConnection(magnet) ? pinnedLinkEnd : pinnedElementEnd;\n    return fn(relative, end, view, magnet, coords);\n  };\n}\n\nfunction pinnedElementEnd(relative, end, view, magnet, coords) {\n  var angle = view.model.angle();\n  var bbox = view.getNodeUnrotatedBBox(magnet);\n  var origin = view.model.getBBox().center();\n  coords.rotate(origin, angle);\n  var dx = coords.x - bbox.x;\n  var dy = coords.y - bbox.y;\n\n  if (relative) {\n    dx = abs2rel(dx, bbox.width);\n    dy = abs2rel(dy, bbox.height);\n  }\n\n  end.anchor = {\n    name: 'topLeft',\n    args: {\n      dx: dx,\n      dy: dy,\n      rotate: true\n    }\n  };\n  return end;\n}\n\nfunction pinnedLinkEnd(relative, end, view, _magnet, coords) {\n  var connection = view.getConnection();\n  if (!connection) return end;\n  var length = connection.closestPointLength(coords);\n\n  if (relative) {\n    var totalLength = connection.length();\n    end.anchor = {\n      name: 'connectionRatio',\n      args: {\n        ratio: length / totalLength\n      }\n    };\n  } else {\n    end.anchor = {\n      name: 'connectionLength',\n      args: {\n        length: length\n      }\n    };\n  }\n\n  return end;\n}\n\nexport const useDefaults = util.noop;\nexport const pinAbsolute = pin(false);\nexport const pinRelative = pin(true);","map":{"version":3,"names":["util","abs2rel","absolute","max","dp","relative","Math","round","pin","end","view","magnet","coords","fn","isNodeConnection","pinnedLinkEnd","pinnedElementEnd","angle","model","bbox","getNodeUnrotatedBBox","origin","getBBox","center","rotate","dx","x","dy","y","width","height","anchor","name","args","_magnet","connection","getConnection","length","closestPointLength","totalLength","ratio","useDefaults","noop","pinAbsolute","pinRelative"],"sources":["C:/Users/Admin/dataflow-test/node_modules/jointjs/src/connectionStrategies/index.mjs"],"sourcesContent":["import * as util from '../util/index.mjs';\n\nfunction abs2rel(absolute, max) {\n\n    if (max === 0) return '0%';\n    // round to 3 decimal places\n    const dp = 1000;\n    const relative = Math.round(absolute / max * 100 * dp) / dp;\n    return `${relative}%`;\n}\n\nfunction pin(relative) {\n\n    return function(end, view, magnet, coords) {\n        var fn = (view.isNodeConnection(magnet)) ? pinnedLinkEnd : pinnedElementEnd;\n        return fn(relative, end, view, magnet, coords);\n    };\n}\n\nfunction pinnedElementEnd(relative, end, view, magnet, coords) {\n\n    var angle = view.model.angle();\n    var bbox = view.getNodeUnrotatedBBox(magnet);\n    var origin = view.model.getBBox().center();\n    coords.rotate(origin, angle);\n    var dx = coords.x - bbox.x;\n    var dy = coords.y - bbox.y;\n\n    if (relative) {\n        dx = abs2rel(dx, bbox.width);\n        dy = abs2rel(dy, bbox.height);\n    }\n\n    end.anchor = {\n        name: 'topLeft',\n        args: {\n            dx: dx,\n            dy: dy,\n            rotate: true\n        }\n    };\n\n    return end;\n}\n\nfunction pinnedLinkEnd(relative, end, view, _magnet, coords) {\n\n    var connection = view.getConnection();\n    if (!connection) return end;\n    var length = connection.closestPointLength(coords);\n    if (relative) {\n        var totalLength = connection.length();\n        end.anchor = {\n            name: 'connectionRatio',\n            args: {\n                ratio: length / totalLength\n            }\n        };\n    } else {\n        end.anchor = {\n            name: 'connectionLength',\n            args: {\n                length: length\n            }\n        };\n    }\n    return end;\n}\n\nexport const useDefaults = util.noop;\nexport const pinAbsolute = pin(false);\nexport const pinRelative = pin(true);\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}