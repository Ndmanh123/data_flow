{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport * as mvc from '../mvc/index.mjs';\nimport V from '../V/index.mjs';\nimport { isPlainObject } from '../util/util.mjs';\n\nfunction toArray(obj) {\n  if (!obj) return [];\n  if (Array.isArray(obj)) return obj;\n  return [obj];\n}\n\nexport const HighlighterView = mvc.View.extend({\n  tagName: 'g',\n  svgElement: true,\n  className: 'highlight',\n  HIGHLIGHT_FLAG: 1,\n  UPDATE_PRIORITY: 3,\n  DETACHABLE: false,\n  UPDATABLE: true,\n  MOUNTABLE: true,\n  cellView: null,\n  nodeSelector: null,\n  node: null,\n  updateRequested: false,\n  transformGroup: null,\n\n  requestUpdate(cellView, nodeSelector) {\n    const {\n      paper\n    } = cellView;\n    this.cellView = cellView;\n    this.nodeSelector = nodeSelector;\n\n    if (paper) {\n      this.updateRequested = true;\n      paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n    }\n  },\n\n  confirmUpdate() {\n    // The cellView is now rendered/updated since it has a higher update priority.\n    this.updateRequested = false;\n    const {\n      cellView,\n      nodeSelector\n    } = this;\n    this.update(cellView, nodeSelector);\n    this.mount();\n    this.transform();\n    return 0;\n  },\n\n  findNode(cellView, nodeSelector = null) {\n    let el;\n\n    if (typeof nodeSelector === 'string') {\n      [el] = cellView.findBySelector(nodeSelector);\n    } else if (isPlainObject(nodeSelector)) {\n      const isLink = cellView.model.isLink();\n      const {\n        label = null,\n        port,\n        selector\n      } = nodeSelector;\n\n      if (isLink && label !== null) {\n        // Link Label Selector\n        el = cellView.findLabelNode(label, selector);\n      } else if (!isLink && port) {\n        // Element Port Selector\n        el = cellView.findPortNode(port, selector);\n      } else {\n        // Cell Selector\n        [el] = cellView.findBySelector(selector);\n      }\n    } else if (nodeSelector) {\n      el = V.toNode(nodeSelector);\n      if (!(el instanceof SVGElement)) el = null;\n    }\n\n    return el ? el : null;\n  },\n\n  mount() {\n    const {\n      MOUNTABLE,\n      cellView,\n      el,\n      options,\n      transformGroup\n    } = this;\n    if (!MOUNTABLE || transformGroup) return;\n    const {\n      vel: cellViewRoot,\n      paper\n    } = cellView;\n    const {\n      layer: layerName\n    } = options;\n\n    if (layerName) {\n      const vGroup = this.transformGroup = V('g').addClass('highlight-transform').append(el);\n      paper.getLayerView(layerName).insertSortedNode(vGroup.node, options.z);\n    } else {\n      // TODO: prepend vs append\n      if (!el.parentNode || el.nextSibling) {\n        // Not appended yet or not the last child\n        cellViewRoot.append(el);\n      }\n    }\n  },\n\n  unmount() {\n    const {\n      MOUNTABLE,\n      transformGroup,\n      vel\n    } = this;\n    if (!MOUNTABLE) return;\n\n    if (transformGroup) {\n      this.transformGroup = null;\n      transformGroup.remove();\n    } else {\n      vel.remove();\n    }\n  },\n\n  transform() {\n    const {\n      transformGroup,\n      cellView,\n      updateRequested\n    } = this;\n    if (!transformGroup || cellView.model.isLink() || updateRequested) return;\n    const translateMatrix = cellView.getRootTranslateMatrix();\n    const rotateMatrix = cellView.getRootRotateMatrix();\n    const transformMatrix = translateMatrix.multiply(rotateMatrix);\n    transformGroup.attr('transform', V.matrixToTransformString(transformMatrix));\n  },\n\n  update() {\n    const {\n      node: prevNode,\n      cellView,\n      nodeSelector,\n      updateRequested,\n      id\n    } = this;\n    if (updateRequested) return;\n    const node = this.node = this.findNode(cellView, nodeSelector);\n\n    if (prevNode) {\n      this.unhighlight(cellView, prevNode);\n    }\n\n    if (node) {\n      this.highlight(cellView, node);\n      this.mount();\n    } else {\n      this.unmount();\n      cellView.notify('cell:highlight:invalid', id, this);\n    }\n  },\n\n  onRemove() {\n    const {\n      node,\n      cellView,\n      id,\n      constructor\n    } = this;\n\n    if (node) {\n      this.unhighlight(cellView, node);\n    }\n\n    this.unmount();\n\n    constructor._removeRef(cellView, id);\n  },\n\n  highlight(_cellView, _node) {// to be overridden\n  },\n\n  unhighlight(_cellView, _node) {// to be overridden\n  }\n\n}, {\n  _views: {},\n  // Used internally by CellView highlight()\n  highlight: function (cellView, node, opt) {\n    const id = this.uniqueId(node, opt);\n    this.add(cellView, node, id, opt);\n  },\n  // Used internally by CellView unhighlight()\n  unhighlight: function (cellView, node, opt) {\n    const id = this.uniqueId(node, opt);\n    this.remove(cellView, id);\n  },\n\n  get(cellView, id = null) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    const refs = _views[cid];\n\n    if (id === null) {\n      // all highlighters\n      const views = [];\n      if (!refs) return views;\n\n      for (let hid in refs) {\n        const ref = refs[hid];\n\n        if (ref instanceof this) {\n          views.push(ref);\n        }\n      }\n\n      return views;\n    } else {\n      // single highlighter\n      if (!refs) return null;\n\n      if (id in refs) {\n        const ref = refs[id];\n        if (ref instanceof this) return ref;\n      }\n\n      return null;\n    }\n  },\n\n  add(cellView, nodeSelector, id, opt = {}) {\n    if (!id) throw new Error('dia.HighlighterView: An ID required.'); // Search the existing view amongst all the highlighters\n\n    const previousView = HighlighterView.get(cellView, id);\n    if (previousView) previousView.remove();\n    const view = new this(opt);\n    view.id = id;\n\n    this._addRef(cellView, id, view);\n\n    view.requestUpdate(cellView, nodeSelector);\n    return view;\n  },\n\n  _addRef(cellView, id, view) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    let refs = _views[cid];\n    if (!refs) refs = _views[cid] = {};\n    refs[id] = view;\n  },\n\n  _removeRef(cellView, id) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    const refs = _views[cid];\n    if (!refs) return;\n    if (id) delete refs[id];\n\n    for (let _ in refs) return;\n\n    delete _views[cid];\n  },\n\n  remove(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      view.remove();\n    });\n  },\n\n  update(cellView, id = null, dirty = false) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      if (dirty || view.UPDATABLE) view.update();\n    });\n  },\n\n  transform(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      if (view.UPDATABLE) view.transform();\n    });\n  },\n\n  uniqueId(node, opt = '') {\n    return V.ensureId(node) + JSON.stringify(opt);\n  }\n\n});","map":{"version":3,"names":["mvc","V","isPlainObject","toArray","obj","Array","isArray","HighlighterView","View","extend","tagName","svgElement","className","HIGHLIGHT_FLAG","UPDATE_PRIORITY","DETACHABLE","UPDATABLE","MOUNTABLE","cellView","nodeSelector","node","updateRequested","transformGroup","requestUpdate","paper","requestViewUpdate","confirmUpdate","update","mount","transform","findNode","el","findBySelector","isLink","model","label","port","selector","findLabelNode","findPortNode","toNode","SVGElement","options","vel","cellViewRoot","layer","layerName","vGroup","addClass","append","getLayerView","insertSortedNode","z","parentNode","nextSibling","unmount","remove","translateMatrix","getRootTranslateMatrix","rotateMatrix","getRootRotateMatrix","transformMatrix","multiply","attr","matrixToTransformString","prevNode","id","unhighlight","highlight","notify","onRemove","constructor","_removeRef","_cellView","_node","_views","opt","uniqueId","add","get","cid","refs","views","hid","ref","push","Error","previousView","view","_addRef","_","forEach","dirty","ensureId","JSON","stringify"],"sources":["C:/Users/Admin/dataflow-test/node_modules/jointjs/src/dia/HighlighterView.mjs"],"sourcesContent":["import * as mvc from '../mvc/index.mjs';\nimport V from '../V/index.mjs';\nimport { isPlainObject } from '../util/util.mjs';\n\nfunction toArray(obj) {\n    if (!obj) return [];\n    if (Array.isArray(obj)) return obj;\n    return [obj];\n}\n\nexport const HighlighterView = mvc.View.extend({\n\n    tagName: 'g',\n    svgElement: true,\n    className: 'highlight',\n\n    HIGHLIGHT_FLAG: 1,\n    UPDATE_PRIORITY: 3,\n    DETACHABLE: false,\n    UPDATABLE: true,\n    MOUNTABLE: true,\n\n    cellView: null,\n    nodeSelector: null,\n    node: null,\n    updateRequested: false,\n    transformGroup: null,\n\n    requestUpdate(cellView, nodeSelector) {\n        const { paper } = cellView;\n        this.cellView = cellView;\n        this.nodeSelector = nodeSelector;\n        if (paper) {\n            this.updateRequested = true;\n            paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n        }\n    },\n\n    confirmUpdate() {\n        // The cellView is now rendered/updated since it has a higher update priority.\n        this.updateRequested = false;\n        const { cellView, nodeSelector } = this;\n        this.update(cellView, nodeSelector);\n        this.mount();\n        this.transform();\n        return 0;\n    },\n\n    findNode(cellView, nodeSelector = null) {\n        let el;\n        if (typeof nodeSelector === 'string') {\n            [el] = cellView.findBySelector(nodeSelector);\n        } else if (isPlainObject(nodeSelector)) {\n            const isLink = cellView.model.isLink();\n            const { label = null, port, selector } = nodeSelector;\n            if (isLink && label !== null) {\n                // Link Label Selector\n                el = cellView.findLabelNode(label, selector);\n            } else if (!isLink && port) {\n                // Element Port Selector\n                el = cellView.findPortNode(port, selector);\n            } else {\n                // Cell Selector\n                [el] = cellView.findBySelector(selector);\n            }\n        } else if (nodeSelector) {\n            el = V.toNode(nodeSelector);\n            if (!(el instanceof SVGElement)) el = null;\n        }\n        return el ? el : null;\n    },\n\n    mount() {\n        const { MOUNTABLE, cellView, el, options, transformGroup } = this;\n        if (!MOUNTABLE || transformGroup) return;\n        const { vel: cellViewRoot, paper } = cellView;\n        const { layer: layerName } = options;\n        if (layerName) {\n            const vGroup = this.transformGroup = V('g').addClass('highlight-transform').append(el);\n            paper.getLayerView(layerName).insertSortedNode(vGroup.node, options.z);\n        } else {\n            // TODO: prepend vs append\n            if (!el.parentNode || el.nextSibling) {\n                // Not appended yet or not the last child\n                cellViewRoot.append(el);\n            }\n        }\n    },\n\n    unmount() {\n        const { MOUNTABLE, transformGroup, vel } = this;\n        if (!MOUNTABLE) return;\n        if (transformGroup) {\n            this.transformGroup = null;\n            transformGroup.remove();\n        } else {\n            vel.remove();\n        }\n    },\n\n    transform() {\n        const { transformGroup, cellView, updateRequested } = this;\n        if (!transformGroup || cellView.model.isLink() || updateRequested) return;\n        const translateMatrix = cellView.getRootTranslateMatrix();\n        const rotateMatrix = cellView.getRootRotateMatrix();\n        const transformMatrix = translateMatrix.multiply(rotateMatrix);\n        transformGroup.attr('transform', V.matrixToTransformString(transformMatrix));\n    },\n\n    update() {\n        const { node: prevNode, cellView, nodeSelector, updateRequested, id } = this;\n        if (updateRequested) return;\n        const node = this.node = this.findNode(cellView, nodeSelector);\n        if (prevNode) {\n            this.unhighlight(cellView, prevNode);\n        }\n        if (node) {\n            this.highlight(cellView, node);\n            this.mount();\n        } else {\n            this.unmount();\n            cellView.notify('cell:highlight:invalid', id, this);\n        }\n    },\n\n    onRemove() {\n        const { node, cellView, id, constructor } = this;\n        if (node) {\n            this.unhighlight(cellView, node);\n        }\n        this.unmount();\n        constructor._removeRef(cellView, id);\n    },\n\n    highlight(_cellView, _node) {\n        // to be overridden\n    },\n\n    unhighlight(_cellView, _node) {\n        // to be overridden\n    }\n\n}, {\n\n    _views: {},\n\n    // Used internally by CellView highlight()\n    highlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.add(cellView, node, id, opt);\n    },\n\n    // Used internally by CellView unhighlight()\n    unhighlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.remove(cellView, id);\n    },\n\n    get(cellView, id = null) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (id === null) {\n            // all highlighters\n            const views = [];\n            if (!refs) return views;\n            for (let hid in refs) {\n                const ref = refs[hid];\n                if (ref instanceof this) {\n                    views.push(ref);\n                }\n            }\n            return views;\n        } else {\n            // single highlighter\n            if (!refs) return null;\n            if (id in refs) {\n                const ref = refs[id];\n                if (ref instanceof this) return ref;\n            }\n            return null;\n        }\n    },\n\n    add(cellView, nodeSelector, id, opt = {}) {\n        if (!id) throw new Error('dia.HighlighterView: An ID required.');\n        // Search the existing view amongst all the highlighters\n        const previousView = HighlighterView.get(cellView, id);\n        if (previousView) previousView.remove();\n        const view = new this(opt);\n        view.id = id;\n        this._addRef(cellView, id, view);\n        view.requestUpdate(cellView, nodeSelector);\n        return view;\n    },\n\n    _addRef(cellView, id, view) {\n        const { cid } = cellView;\n        const { _views } = this;\n        let refs = _views[cid];\n        if (!refs) refs = _views[cid] = {};\n        refs[id] = view;\n    },\n\n    _removeRef(cellView, id) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (!refs) return;\n        if (id) delete refs[id];\n        for (let _ in refs) return;\n        delete _views[cid];\n    },\n\n    remove(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            view.remove();\n        });\n    },\n\n    update(cellView, id = null, dirty = false) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            if (dirty || view.UPDATABLE) view.update();\n        });\n    },\n\n    transform(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            if (view.UPDATABLE) view.transform();\n        });\n    },\n\n    uniqueId(node, opt = '') {\n        return V.ensureId(node) + JSON.stringify(opt);\n    }\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}