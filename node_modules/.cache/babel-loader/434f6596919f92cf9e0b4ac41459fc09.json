{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_DataFlow = _resolveComponent(\"DataFlow\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_DataFlow, {\n    onChangeLinkTarget: $options.log,\n    onNodeAdded: $options.log,\n    onLinkAdded: $options.log,\n    onSelectCell: $options.log,\n    onSelectLink: $options.log,\n    onNodeDelete: $options.log,\n    onLinkDelete: $options.log,\n    onArrNodeDelete: $options.log\n  }, null, 8\n  /* PROPS */\n  , [\"onChangeLinkTarget\", \"onNodeAdded\", \"onLinkAdded\", \"onSelectCell\", \"onSelectLink\", \"onNodeDelete\", \"onLinkDelete\", \"onArrNodeDelete\"]), _createCommentVNode(\" <div id=\\\"app\\\">\\n    <div class=\\\"btn_contain\\\">\\n        <button id=\\\"btn-zoomout\\\" class=\\\"btn\\\">zoom out</button>\\n        <button id=\\\"btn-zoomin\\\" class=\\\"btn\\\">zoom in</button>\\n        <button id=\\\"btn-center\\\" class=\\\"btn\\\">center</button>\\n        <button id=\\\"btn-center-content\\\" class=\\\"btn\\\">center content</button>\\n    </div>\\n    <div ref=\\\"nodeStencile\\\" id=\\\"stencil\\\"></div>\\n    \\n    <div id=\\\"paper\\\"></div>\\n    <div id=\\\"navigator\\\"></div>\\n    \\n    \\n        </div>\\n   \")], 2112\n  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;6DAGEA,aASYC,mBATZ,EASY;IARXC,kBAAkB,EAAEC,YAQT;IAPXC,WAAU,EAAED,YAOD;IANXE,WAAU,EAAEF,YAMD;IALXG,YAAW,EAAEH,YAKF;IAJXI,YAAW,EAAEJ,YAIF;IAHXK,YAAW,EAAEL,YAGF;IAFXM,YAAW,EAAEN,YAEF;IADXO,eAAe,EAAEP;EACN,CATZ;;EAAA,4IAUAQ","names":["_createVNode","_component_DataFlow","onChangeLinkTarget","$options","onNodeAdded","onLinkAdded","onSelectCell","onSelectLink","onNodeDelete","onLinkDelete","onArrNodeDelete","_createCommentVNode"],"sourceRoot":"","sources":["C:\\Users\\Admin\\dataflow-test\\src\\App.vue"],"sourcesContent":["\n<template>\n\n  <DataFlow\n  @change-link-target=\"log\"\n  @node-added=\"log\"\n  @link-added=\"log\"\n  @select-cell=\"log\"\n  @select-link=\"log\"\n  @node-delete=\"log\"\n  @link-delete=\"log\"\n  @arr-node-delete=\"log\"\n  ></DataFlow>\n  <!-- <div id=\"app\">\n    <div class=\"btn_contain\">\n        <button id=\"btn-zoomout\" class=\"btn\">zoom out</button>\n        <button id=\"btn-zoomin\" class=\"btn\">zoom in</button>\n        <button id=\"btn-center\" class=\"btn\">center</button>\n        <button id=\"btn-center-content\" class=\"btn\">center content</button>\n    </div>\n    <div ref=\"nodeStencile\" id=\"stencil\"></div>\n    \n    <div id=\"paper\"></div>\n    <div id=\"navigator\"></div>\n    \n    \n        </div>\n   -->\n</template>\n\n<script>\n\n// import '@/../public/vendor/jointJS/js/lib/backbone.js'\n// import '@/../public/vendor/jointJS/js/lib/jquery.min.js'\n// import '@/../public/vendor/jointJS/js/lib/lodash.min.js'\n// import '@/../public/vendor/jointJS/js/lib/rappid.js'\n// import '@/../public/vendor/jointJS/js/lib/backbone.min.js'\n\n\n\nimport DataFlow from './components/dataflow.vue'\n// import { Options, Vue } from 'vue-class-component';\nexport default {\n    components: {\n    DataFlow\n  },\n  methods:{\n    log(evt){\n      console.log(evt)\n    }\n  }\n//   created() {\n//         this.graph = new joint.dia.Graph;\n//     },\n//   mounted() {\n//       this.initPaper()\n//   },\n//   methods:{\n//       initPaper(){\n          \n//     let selectedElement = null;\n    \n//     const color = \"rgb(255 136 0)\";\n//       var customEl = joint.dia.Element.define('standard.Rectangle', {\n//         z: 1,\n//         size: {\n//             width: 44,\n//             height: 35\n//         },\n//         removable: false,\n//         attrs: {\n//             image: {\n//                 x: 5,\n//                 y: 5,\n//                 width: 'calc(w-10)',\n//                 height: 'calc(h-10 )'\n//             },\n//             root: {\n//                 magnet: false\n//             },\n//             body: {\n//                 fill: '#FFFFFF',\n//                 stroke: '#A0A0A0',\n//                 width: 'calc(w)',\n//                 height: 'calc(h)',\n//                 strokeWidth: 2,\n//                 rx: 5,\n//                 ry: 5,\n\n//             }\n//         },\n//         ports: {\n//             items: [{\n//                 id: 'out-port',\n//                 group: 'out',\n\n//             },\n//             {\n//                 id: 'in-port',\n//                 group: 'in'\n//             }\n//             ],\n//             groups: {\n//                 out: {\n//                     markup: [{\n//                         tagName: 'circle',\n//                         selector: 'portBody'\n//                     }],\n//                     position: {\n//                         name: 'right'\n//                     },\n//                     attrs: {\n//                         portBody: {\n//                             r: 5,\n//                             magnet: 'active',\n//                             fill: '#187BD3',\n//                             stroke: '#187BD3'\n\n//                         }\n//                     }\n//                 },\n//                 in: {\n//                     markup: [{\n//                         tagName: 'circle',\n//                         selector: 'portBody'\n//                     }],\n//                     position: {\n//                         name: 'left'\n//                     },\n//                     attrs: {\n//                         portBody: {\n//                             r: 5,\n//                             magnet: 'passive',\n//                             fill: '#FFFFFF',\n//                             stroke: '#187BD3',\n\n//                         }\n//                     }\n//                 }\n//             }\n//         },\n//         markup: [\n//             {\n//                 tagName: 'rect',\n//                 selector: 'body',\n//             },\n//             {\n//                 tagName: 'image',\n//                 selector: 'image'\n//             }, {\n//                 tagName: 'ports',\n//                 selector: 'ports'\n//             }]\n//     })\n//     var customElNoInPorts = joint.dia.Element.define('standard.Rectangle', {\n//         z: 1,\n//         theme: 'material',\n//         size: {\n//             width: 44,\n//             height: 35\n//         },\n//         removable: false,\n//         attrs: {\n//             image: {\n//                 x: 5,\n//                 y: 5,\n//                 width: 'calc(w-10)',\n//                 height: 'calc(h-10 )'\n//             },\n//             root: {\n//                 magnet: false\n//             },\n//             body: {\n//                 fill: '#FFFFFF',\n//                 stroke: '#A0A0A0',\n//                 width: 'calc(w)',\n//                 height: 'calc(h)',\n//                 strokeWidth: 2,\n//             },\n//             line: {\n//                 connection: true,\n//                 stroke: '#333333',\n//                 strokeWidth: 2,\n//                 strokeLinejoin: 'round',\n//                 targetMarker: {\n//                     'type': 'path',\n//                     'd': 'M 10 -5 0 0 10 5 z'\n//                 }\n//             },\n//         },\n//         ports: {\n//             items: [\n//                 {\n//                     id: 'out-port',\n//                     group: 'out'\n//                 }\n//             ],\n//             groups: {\n//                 out: {\n//                     markup: [{\n//                         tagName: 'circle',\n//                         selector: 'portBody'\n//                     }],\n//                     position: {\n//                         name: 'right'\n//                     },\n//                     attrs: {\n//                         portBody: {\n//                             r: 5,\n//                             magnet: 'active',\n//                             fill: '#187BD3',\n//                             stroke: '#187BD3'\n//                         }\n//                     }\n//                 },\n\n//             }\n//         },\n//         markup: [\n//             {\n//                 tagName: 'rect',\n//                 selector: 'body',\n//             }, {\n//                 tagName: 'image',\n//                 selector: 'image'\n//             }, {\n//                 tagName: 'ports',\n//                 selector: 'ports'\n//             }]\n//     })\n//     //create link tool\n// //     var verticesTool = new joint.linkTools.Vertices();\n// // var segmentsTool = new joint.linkTools.Segments();\n// // var sourceArrowheadTool = new joint.linkTools.SourceArrowhead();\n// var targetArrowheadTool = new joint.linkTools.TargetArrowhead();\n// // var sourceAnchorTool = new joint.linkTools.SourceAnchor();\n// // var targetAnchorTool = new joint.linkTools.TargetAnchor();\n// // var boundaryTool = new joint.linkTools.Boundary();\n// // var removeButton = new joint.linkTools.Remove();\n\n// var toolsView = new joint.dia.ToolsView({\n//     tools: [\n//         // verticesTool, segmentsTool,\n//         // sourceArrowheadTool, \n//         targetArrowheadTool,\n//         // sourceAnchorTool, targetAnchorTool,\n//         // boundaryTool, removeButton\n//     ]\n// });\n      \n//     //hàm viết hoa chữ đầu\n//     function jsUcfirst(string) {\n//         return string.charAt(0).toUpperCase() + string.slice(1);\n//     }\n//     //hàm render stencil\n//     function stencilRenderHandler(positionX,positionY,arr,elNoInPorts =\"\",spaceBetweenElToX=0,spaceBetweenElToY=0){\n//         arr.forEach(element => {\n//             //chuyển thành hoa chữ đầu cho đúng định dạng file ảnh lưu\n//             let elementName = jsUcfirst(element)\n//             if (elementName === jsUcfirst(elNoInPorts)) {\n//                 element = new customElNoInPorts();\n//             }\n//             else {\n//                 element = new customEl();\n//             }\n//             console.log(`@/assets/${elementName}.svg`)\n//             element.prop('attrs/image/xlinkHref', require(`./assets/${elementName}.svg`))\n//             stencilShapes.push(element.position(positionX, positionY))\n//             if(spaceBetweenElToX>0){\n//                 positionX += element.attributes.size.width+spaceBetweenElToX;\n//             }\n//             if(spaceBetweenElToY>0){\n//                 positionY += element.attributes.size.height+spaceBetweenElToY;\n//             }\n//         });\n//     }\n//     var arr = ['filter', 'formula', 'join', 'load', 'pivot', 'sample', 'script', 'select', 'sort', 'summarize', 'transposeTable', 'union', 'weightAvg'];\n\n//     var stencilShapes = [\n        \n        \n//     ];\n//     stencilRenderHandler(20,20,arr,\"load\",16)\n            \n\n//              var paper = new joint.dia.Paper({  \n//         el: document.getElementById('paper'),\n//         width: 800,\n//         height: 600,\n//         model: this.graph,\n//         async: true,\n//         sorting: joint.dia.Paper.sorting.APPROX,\n//         gridSize: 10,\n//         drawGrid: true,\n//         restrictTranslate: true,\n//         stopDelegation: false,\n        \n//         interactive: { vertexAdd: false } ,\n//         // background: { color: '#F3F7F6' },\n//         // defaultConnectionPoint: { name: 'boundary' },\n//         // defaultConnector: {\n//         //     name: \"rounded\"\n//         //   },\n//         //   defaultRouter: {\n//         //     name: \"manhattan\",\n//         //     args: {\n//         //       step: 10,\n//         //       endDirections: [\"bottom\"],\n//         //       startDirections: [\"top\"],\n//         //       padding: { bottom: 20 }\n//         //     }\n//         //   },\n//         snapLinks: {\n//             radius: 75\n//         },\n//         linkPinning: false,\n//         multiLinks: false,\n//         defaultRouter: { name: 'manhattan', args: { padding: 10 }},\n//         defaultConnector: { name: 'rounded' },\n//         validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {\n//             // Prevent linking from input ports.\n//             if (magnetS && magnetS.getAttribute('port-group') === 'in') return false;\n//             // Prevent linking from output ports to input ports within one element.\n//             if (cellViewS === cellViewT) return false;\n//             // Prevent linking to input ports.\n//             return (magnetT && magnetT.getAttribute('port-group') === 'in') || (cellViewS.model.get('type') === 'qad.Question' && cellViewT.model.get('type') === 'qad.Answer');\n//         },\n//         // validateConnection: function (view1, _magnet1, view2, _magnet2) {\n//         //     // Do not allow loop links (Element to Link, Element A to Element B is valid).\n//         //     return view1 !== view2;\n//         // },\n//         interactive: {\n//             linkMove: true,\n//             labelMove: true,\n//             arrowheadMove: true,\n//             vertexMove: false,\n//             vertexAdd: false,\n//             vertexRemove: false,\n//             useLinkTools: false,\n//         },\n//         defaultLink: function () {\n//             return new joint.shapes.standard.Link({\n//                 attrs: {\n//                     z:1,\n//                     line: {\n//                         connection: true,\n//                         stroke: '#707070',\n//                         strokeLinejoin: 'round',\n//                     },\n//                     wrapper: {\n//                         connection: true,\n//                         strokeWidth: 10,\n//                         strokeLinejoin: 'round'\n//                     },\n                    \n//                 },\n                \n//                 markup: [{\n//                     tagName: 'path',\n//                     selector: 'wrapper',\n//                     attributes: {\n//                         'fill': 'none',\n                        \n//                         'stroke': 'transparent'\n//                     }\n//                 }, {\n//                     tagName: 'path',\n//                     selector: 'line',\n//                     attributes: {\n//                         'fill': 'none',\n                        \n//                     }\n//                 }]\n//             });\n//         }\n//     });\n// var stencil = new joint.ui.Stencil({\n//         paper: paper,\n//         width: 200,\n//         height: 100,\n//         dropAnimation: { duration: 200, easing: 'swing' },\n        \n//     });document.getElementById('stencil').appendChild(stencil.render().el);\n//     stencil.load(stencilShapes);\n//     var selection = new joint.ui.Selection({\n//         theme: 'material',\n//         paper: paper,\n//         useModelGeometry: true,\n       \n//     });\n//      //halo cấu hình\n//        paper.on('cell:pointerup',function (cellView) {\n//         var halo = new joint.ui.Halo({\n//             cellView: cellView,\n//             type: 'toolbar',\n//             boxContent:false // bang phia duoi cell cho biet tọa độ height width và angle\n//         });\n//         halo.removeHandle('resize');\n//         halo.removeHandle('rotate');\n//         halo.removeHandle('direction');\n//         halo.render();\n//         //cho cell đang chọn lên trc và gán cho selectedEl để chạy những chức năng tiếp theo\n//         selectedElement = cellView.model;\n//         selectedElement.toFront({ ignoreCommandManager: true })\n//         // cellView.$el[0].parentElement.appendChild(cellView.$el[0])\n//         // console.log(graph.getLinks())\n//     }) \n//     //  //cấu hình các cell dc chọn\n//     // paper.svg.prepend(\n//     // `\n//     //         .joint-element .selection {\n//     //             stroke: ${color};\n//     //         }\n//     //         .joint-link .selection {\n//     //             stroke: ${color}; \n//     //             'fill': ${color},\n//     //         }\n            \n//     //     `\n//     // );\n    \n//     // //lấy tất cả link ở trc node\n//     // function getElementPredecessorLinks(el) {\n//     //     return graph\n//     //       .getSubgraph([el, ...graph.getPredecessors(el)])\n//     //       .filter((cell) => cell.isLink());\n//     //   }\n//     //   //đổi màu cell\n//     //   function highlightCell(cell) {\n//     //     if(cell){\n//     //     highlighters.addClass.add(\n//     //       cell.findView(paper),\n//     //       cell.isElement() ? \"body\" : \"line\",\n//     //       \"selection\",\n//     //       { className: \"selection\" }\n//     //     );\n//     //     }else{return}\n//     //   }\n//     //   //chuyển màu cell lại như cũ\n//     //   function unhighlightCell(cell) {\n//     //     if(cell){\n//     //     highlighters.addClass.remove(cell.findView(paper), \"selection\");\n//     //     }\n//     //     else{return}\n//     //   }\n//     //   //function xử lý hành dộng chọn el\n//     //   function selectElement(el) {     \n//     //     if (selectionNode === el) return;\n//     //     if (selectionNode) {\n            \n//     //       unhighlightCell(selectionNode);\n//     //       graph.getLinks().forEach((link) => unhighlightCell(link));\n//     //     }\n//     //     if (el) {\n            \n//     //       highlightCell(el);\n//     //       getElementPredecessorLinks(el).forEach((link) => {\n//     //           highlightCell(link)\n//     //           link.toFront({ ignoreCommandManager: true })\n              \n//     //         //   link.attributes.z+=1\n            \n              \n//     //         });\n//     //       selectionNode = el;\n//     //     } else {\n//     //         selectionNode = null;\n//     //     }\n//     //   }   \n//     }\n      \n//   }\n  }\n\n  \n\n</script>\n\n<style >\n@import \"@/../public/vendor/jointJS/build/package/rappid.css\";\n@import \"@/css/data_flow.css\";\n@import \"@/css/lib/rappid.min.css\";\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  /* margin-top: 60px; */\n}\n.elements.joint-paper.joint-theme-default{\n    width:100% !important;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}